// Code generated from STL.g4 by ANTLR 4.9.3. DO NOT EDIT.

package stl

import (
	"fmt"
	"unicode"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = unicode.IsLetter

var serializedLexerAtn = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 2, 14, 147,
	8, 1, 4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7,
	9, 7, 4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12,
	4, 13, 9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2,
	3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6,
	3, 6, 3, 6, 3, 6, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7,
	3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9,
	3, 9, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3,
	11, 3, 11, 5, 11, 97, 10, 11, 3, 11, 6, 11, 100, 10, 11, 13, 11, 14, 11,
	101, 3, 11, 5, 11, 105, 10, 11, 3, 12, 7, 12, 108, 10, 12, 12, 12, 14,
	12, 111, 11, 12, 3, 12, 3, 12, 6, 12, 115, 10, 12, 13, 12, 14, 12, 116,
	3, 12, 6, 12, 120, 10, 12, 13, 12, 14, 12, 121, 3, 12, 5, 12, 125, 10,
	12, 3, 13, 3, 13, 5, 13, 129, 10, 13, 3, 13, 6, 13, 132, 10, 13, 13, 13,
	14, 13, 133, 3, 14, 6, 14, 137, 10, 14, 13, 14, 14, 14, 138, 3, 15, 6,
	15, 142, 10, 15, 13, 15, 14, 15, 143, 3, 15, 3, 15, 2, 2, 16, 3, 3, 5,
	4, 7, 5, 9, 6, 11, 7, 13, 8, 15, 9, 17, 10, 19, 11, 21, 12, 23, 2, 25,
	2, 27, 13, 29, 14, 3, 2, 7, 3, 2, 50, 59, 4, 2, 71, 71, 103, 103, 4, 2,
	45, 45, 47, 47, 5, 2, 50, 59, 67, 92, 99, 124, 5, 2, 11, 12, 15, 15, 34,
	34, 2, 155, 2, 3, 3, 2, 2, 2, 2, 5, 3, 2, 2, 2, 2, 7, 3, 2, 2, 2, 2, 9,
	3, 2, 2, 2, 2, 11, 3, 2, 2, 2, 2, 13, 3, 2, 2, 2, 2, 15, 3, 2, 2, 2, 2,
	17, 3, 2, 2, 2, 2, 19, 3, 2, 2, 2, 2, 21, 3, 2, 2, 2, 2, 27, 3, 2, 2, 2,
	2, 29, 3, 2, 2, 2, 3, 31, 3, 2, 2, 2, 5, 37, 3, 2, 2, 2, 7, 44, 3, 2, 2,
	2, 9, 50, 3, 2, 2, 2, 11, 55, 3, 2, 2, 2, 13, 63, 3, 2, 2, 2, 15, 72, 3,
	2, 2, 2, 17, 79, 3, 2, 2, 2, 19, 85, 3, 2, 2, 2, 21, 104, 3, 2, 2, 2, 23,
	124, 3, 2, 2, 2, 25, 126, 3, 2, 2, 2, 27, 136, 3, 2, 2, 2, 29, 141, 3,
	2, 2, 2, 31, 32, 7, 104, 2, 2, 32, 33, 7, 99, 2, 2, 33, 34, 7, 101, 2,
	2, 34, 35, 7, 103, 2, 2, 35, 36, 7, 118, 2, 2, 36, 4, 3, 2, 2, 2, 37, 38,
	7, 112, 2, 2, 38, 39, 7, 113, 2, 2, 39, 40, 7, 116, 2, 2, 40, 41, 7, 111,
	2, 2, 41, 42, 7, 99, 2, 2, 42, 43, 7, 110, 2, 2, 43, 6, 3, 2, 2, 2, 44,
	45, 7, 113, 2, 2, 45, 46, 7, 119, 2, 2, 46, 47, 7, 118, 2, 2, 47, 48, 7,
	103, 2, 2, 48, 49, 7, 116, 2, 2, 49, 8, 3, 2, 2, 2, 50, 51, 7, 110, 2,
	2, 51, 52, 7, 113, 2, 2, 52, 53, 7, 113, 2, 2, 53, 54, 7, 114, 2, 2, 54,
	10, 3, 2, 2, 2, 55, 56, 7, 103, 2, 2, 56, 57, 7, 112, 2, 2, 57, 58, 7,
	102, 2, 2, 58, 59, 7, 110, 2, 2, 59, 60, 7, 113, 2, 2, 60, 61, 7, 113,
	2, 2, 61, 62, 7, 114, 2, 2, 62, 12, 3, 2, 2, 2, 63, 64, 7, 103, 2, 2, 64,
	65, 7, 112, 2, 2, 65, 66, 7, 102, 2, 2, 66, 67, 7, 104, 2, 2, 67, 68, 7,
	99, 2, 2, 68, 69, 7, 101, 2, 2, 69, 70, 7, 103, 2, 2, 70, 71, 7, 118, 2,
	2, 71, 14, 3, 2, 2, 2, 72, 73, 7, 120, 2, 2, 73, 74, 7, 103, 2, 2, 74,
	75, 7, 116, 2, 2, 75, 76, 7, 118, 2, 2, 76, 77, 7, 103, 2, 2, 77, 78, 7,
	122, 2, 2, 78, 16, 3, 2, 2, 2, 79, 80, 7, 117, 2, 2, 80, 81, 7, 113, 2,
	2, 81, 82, 7, 110, 2, 2, 82, 83, 7, 107, 2, 2, 83, 84, 7, 102, 2, 2, 84,
	18, 3, 2, 2, 2, 85, 86, 7, 103, 2, 2, 86, 87, 7, 112, 2, 2, 87, 88, 7,
	102, 2, 2, 88, 89, 7, 117, 2, 2, 89, 90, 7, 113, 2, 2, 90, 91, 7, 110,
	2, 2, 91, 92, 7, 107, 2, 2, 92, 93, 7, 102, 2, 2, 93, 20, 3, 2, 2, 2, 94,
	96, 5, 23, 12, 2, 95, 97, 5, 25, 13, 2, 96, 95, 3, 2, 2, 2, 96, 97, 3,
	2, 2, 2, 97, 105, 3, 2, 2, 2, 98, 100, 9, 2, 2, 2, 99, 98, 3, 2, 2, 2,
	100, 101, 3, 2, 2, 2, 101, 99, 3, 2, 2, 2, 101, 102, 3, 2, 2, 2, 102, 103,
	3, 2, 2, 2, 103, 105, 5, 25, 13, 2, 104, 94, 3, 2, 2, 2, 104, 99, 3, 2,
	2, 2, 105, 22, 3, 2, 2, 2, 106, 108, 9, 2, 2, 2, 107, 106, 3, 2, 2, 2,
	108, 111, 3, 2, 2, 2, 109, 107, 3, 2, 2, 2, 109, 110, 3, 2, 2, 2, 110,
	112, 3, 2, 2, 2, 111, 109, 3, 2, 2, 2, 112, 114, 7, 48, 2, 2, 113, 115,
	9, 2, 2, 2, 114, 113, 3, 2, 2, 2, 115, 116, 3, 2, 2, 2, 116, 114, 3, 2,
	2, 2, 116, 117, 3, 2, 2, 2, 117, 125, 3, 2, 2, 2, 118, 120, 9, 2, 2, 2,
	119, 118, 3, 2, 2, 2, 120, 121, 3, 2, 2, 2, 121, 119, 3, 2, 2, 2, 121,
	122, 3, 2, 2, 2, 122, 123, 3, 2, 2, 2, 123, 125, 7, 48, 2, 2, 124, 109,
	3, 2, 2, 2, 124, 119, 3, 2, 2, 2, 125, 24, 3, 2, 2, 2, 126, 128, 9, 3,
	2, 2, 127, 129, 9, 4, 2, 2, 128, 127, 3, 2, 2, 2, 128, 129, 3, 2, 2, 2,
	129, 131, 3, 2, 2, 2, 130, 132, 9, 2, 2, 2, 131, 130, 3, 2, 2, 2, 132,
	133, 3, 2, 2, 2, 133, 131, 3, 2, 2, 2, 133, 134, 3, 2, 2, 2, 134, 26, 3,
	2, 2, 2, 135, 137, 9, 5, 2, 2, 136, 135, 3, 2, 2, 2, 137, 138, 3, 2, 2,
	2, 138, 136, 3, 2, 2, 2, 138, 139, 3, 2, 2, 2, 139, 28, 3, 2, 2, 2, 140,
	142, 9, 6, 2, 2, 141, 140, 3, 2, 2, 2, 142, 143, 3, 2, 2, 2, 143, 141,
	3, 2, 2, 2, 143, 144, 3, 2, 2, 2, 144, 145, 3, 2, 2, 2, 145, 146, 8, 15,
	2, 2, 146, 30, 3, 2, 2, 2, 14, 2, 96, 101, 104, 109, 116, 121, 124, 128,
	133, 138, 143, 3, 8, 2, 2,
}

var lexerChannelNames = []string{
	"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
}

var lexerModeNames = []string{
	"DEFAULT_MODE",
}

var lexerLiteralNames = []string{
	"", "'facet'", "'normal'", "'outer'", "'loop'", "'endloop'", "'endfacet'",
	"'vertex'", "'solid'", "'endsolid'",
}

var lexerSymbolicNames = []string{
	"", "", "", "", "", "", "", "", "", "", "FLOAT", "IDENTIFIER", "WS",
}

var lexerRuleNames = []string{
	"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8",
	"FLOAT", "FractionalConstant", "ExponentPart", "IDENTIFIER", "WS",
}

type STLLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

// NewSTLLexer produces a new lexer instance for the optional input antlr.CharStream.
//
// The *STLLexer instance produced may be reused by calling the SetInputStream method.
// The initial lexer configuration is expensive to construct, and the object is not thread-safe;
// however, if used within a Golang sync.Pool, the construction cost amortizes well and the
// objects can be used in a thread-safe manner.
func NewSTLLexer(input antlr.CharStream) *STLLexer {
	l := new(STLLexer)
	lexerDeserializer := antlr.NewATNDeserializer(nil)
	lexerAtn := lexerDeserializer.DeserializeFromUInt16(serializedLexerAtn)
	lexerDecisionToDFA := make([]*antlr.DFA, len(lexerAtn.DecisionToState))
	for index, ds := range lexerAtn.DecisionToState {
		lexerDecisionToDFA[index] = antlr.NewDFA(ds, index)
	}
	l.BaseLexer = antlr.NewBaseLexer(input)
	l.Interpreter = antlr.NewLexerATNSimulator(l, lexerAtn, lexerDecisionToDFA, antlr.NewPredictionContextCache())

	l.channelNames = lexerChannelNames
	l.modeNames = lexerModeNames
	l.RuleNames = lexerRuleNames
	l.LiteralNames = lexerLiteralNames
	l.SymbolicNames = lexerSymbolicNames
	l.GrammarFileName = "STL.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// STLLexer tokens.
const (
	STLLexerT__0       = 1
	STLLexerT__1       = 2
	STLLexerT__2       = 3
	STLLexerT__3       = 4
	STLLexerT__4       = 5
	STLLexerT__5       = 6
	STLLexerT__6       = 7
	STLLexerT__7       = 8
	STLLexerT__8       = 9
	STLLexerFLOAT      = 10
	STLLexerIDENTIFIER = 11
	STLLexerWS         = 12
)
