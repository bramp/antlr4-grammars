// Code generated from CMake.g4 by ANTLR 4.9.3. DO NOT EDIT.

package cmake

import (
	"fmt"
	"unicode"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = unicode.IsLetter

var serializedLexerAtn = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 2, 13, 175,
	8, 1, 4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7,
	9, 7, 4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12,
	4, 13, 9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 3,
	2, 3, 2, 3, 3, 3, 3, 3, 4, 3, 4, 7, 4, 42, 10, 4, 12, 4, 14, 4, 45, 11,
	4, 3, 5, 3, 5, 6, 5, 49, 10, 5, 13, 5, 14, 5, 50, 3, 6, 3, 6, 3, 6, 5,
	6, 56, 10, 6, 3, 7, 3, 7, 3, 7, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 5,
	8, 67, 10, 8, 3, 9, 3, 9, 3, 9, 3, 10, 3, 10, 3, 10, 3, 10, 7, 10, 76,
	10, 10, 12, 10, 14, 10, 79, 11, 10, 3, 10, 3, 10, 3, 11, 3, 11, 3, 11,
	5, 11, 86, 10, 11, 3, 11, 5, 11, 89, 10, 11, 3, 12, 3, 12, 3, 12, 3, 12,
	3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 7, 13, 101, 10, 13, 12, 13, 14,
	13, 104, 11, 13, 3, 13, 5, 13, 107, 10, 13, 3, 14, 3, 14, 3, 14, 3, 14,
	3, 14, 3, 14, 3, 14, 3, 14, 3, 15, 3, 15, 3, 15, 3, 15, 7, 15, 121, 10,
	15, 12, 15, 14, 15, 124, 11, 15, 3, 15, 3, 15, 7, 15, 128, 10, 15, 12,
	15, 14, 15, 131, 11, 15, 3, 15, 3, 15, 7, 15, 135, 10, 15, 12, 15, 14,
	15, 138, 11, 15, 3, 15, 3, 15, 7, 15, 142, 10, 15, 12, 15, 14, 15, 145,
	11, 15, 5, 15, 147, 10, 15, 3, 15, 3, 15, 5, 15, 151, 10, 15, 3, 15, 5,
	15, 154, 10, 15, 3, 15, 3, 15, 3, 16, 3, 16, 5, 16, 160, 10, 16, 3, 16,
	6, 16, 163, 10, 16, 13, 16, 14, 16, 164, 3, 16, 3, 16, 3, 17, 6, 17, 170,
	10, 17, 13, 17, 14, 17, 171, 3, 17, 3, 17, 3, 102, 2, 18, 3, 3, 5, 4, 7,
	5, 9, 6, 11, 7, 13, 2, 15, 2, 17, 2, 19, 8, 21, 2, 23, 9, 25, 2, 27, 10,
	29, 11, 31, 12, 33, 13, 3, 2, 12, 5, 2, 67, 92, 97, 97, 99, 124, 6, 2,
	50, 59, 67, 92, 97, 97, 99, 124, 8, 2, 11, 12, 15, 15, 34, 34, 36, 37,
	42, 43, 94, 94, 6, 2, 50, 59, 61, 61, 67, 92, 99, 124, 4, 2, 36, 36, 94,
	94, 6, 2, 12, 12, 15, 15, 63, 63, 93, 93, 4, 2, 12, 12, 15, 15, 5, 2, 12,
	12, 15, 15, 93, 93, 3, 3, 12, 12, 4, 2, 11, 11, 34, 34, 2, 196, 2, 3, 3,
	2, 2, 2, 2, 5, 3, 2, 2, 2, 2, 7, 3, 2, 2, 2, 2, 9, 3, 2, 2, 2, 2, 11, 3,
	2, 2, 2, 2, 19, 3, 2, 2, 2, 2, 23, 3, 2, 2, 2, 2, 27, 3, 2, 2, 2, 2, 29,
	3, 2, 2, 2, 2, 31, 3, 2, 2, 2, 2, 33, 3, 2, 2, 2, 3, 35, 3, 2, 2, 2, 5,
	37, 3, 2, 2, 2, 7, 39, 3, 2, 2, 2, 9, 48, 3, 2, 2, 2, 11, 55, 3, 2, 2,
	2, 13, 57, 3, 2, 2, 2, 15, 66, 3, 2, 2, 2, 17, 68, 3, 2, 2, 2, 19, 71,
	3, 2, 2, 2, 21, 82, 3, 2, 2, 2, 23, 90, 3, 2, 2, 2, 25, 106, 3, 2, 2, 2,
	27, 108, 3, 2, 2, 2, 29, 116, 3, 2, 2, 2, 31, 162, 3, 2, 2, 2, 33, 169,
	3, 2, 2, 2, 35, 36, 7, 42, 2, 2, 36, 4, 3, 2, 2, 2, 37, 38, 7, 43, 2, 2,
	38, 6, 3, 2, 2, 2, 39, 43, 9, 2, 2, 2, 40, 42, 9, 3, 2, 2, 41, 40, 3, 2,
	2, 2, 42, 45, 3, 2, 2, 2, 43, 41, 3, 2, 2, 2, 43, 44, 3, 2, 2, 2, 44, 8,
	3, 2, 2, 2, 45, 43, 3, 2, 2, 2, 46, 49, 10, 4, 2, 2, 47, 49, 5, 11, 6,
	2, 48, 46, 3, 2, 2, 2, 48, 47, 3, 2, 2, 2, 49, 50, 3, 2, 2, 2, 50, 48,
	3, 2, 2, 2, 50, 51, 3, 2, 2, 2, 51, 10, 3, 2, 2, 2, 52, 56, 5, 13, 7, 2,
	53, 56, 5, 15, 8, 2, 54, 56, 5, 17, 9, 2, 55, 52, 3, 2, 2, 2, 55, 53, 3,
	2, 2, 2, 55, 54, 3, 2, 2, 2, 56, 12, 3, 2, 2, 2, 57, 58, 7, 94, 2, 2, 58,
	59, 10, 5, 2, 2, 59, 14, 3, 2, 2, 2, 60, 61, 7, 94, 2, 2, 61, 67, 7, 118,
	2, 2, 62, 63, 7, 94, 2, 2, 63, 67, 7, 116, 2, 2, 64, 65, 7, 94, 2, 2, 65,
	67, 7, 112, 2, 2, 66, 60, 3, 2, 2, 2, 66, 62, 3, 2, 2, 2, 66, 64, 3, 2,
	2, 2, 67, 16, 3, 2, 2, 2, 68, 69, 7, 94, 2, 2, 69, 70, 7, 61, 2, 2, 70,
	18, 3, 2, 2, 2, 71, 77, 7, 36, 2, 2, 72, 76, 10, 6, 2, 2, 73, 76, 5, 11,
	6, 2, 74, 76, 5, 21, 11, 2, 75, 72, 3, 2, 2, 2, 75, 73, 3, 2, 2, 2, 75,
	74, 3, 2, 2, 2, 76, 79, 3, 2, 2, 2, 77, 75, 3, 2, 2, 2, 77, 78, 3, 2, 2,
	2, 78, 80, 3, 2, 2, 2, 79, 77, 3, 2, 2, 2, 80, 81, 7, 36, 2, 2, 81, 20,
	3, 2, 2, 2, 82, 88, 7, 94, 2, 2, 83, 85, 7, 15, 2, 2, 84, 86, 7, 12, 2,
	2, 85, 84, 3, 2, 2, 2, 85, 86, 3, 2, 2, 2, 86, 89, 3, 2, 2, 2, 87, 89,
	7, 12, 2, 2, 88, 83, 3, 2, 2, 2, 88, 87, 3, 2, 2, 2, 89, 22, 3, 2, 2, 2,
	90, 91, 7, 93, 2, 2, 91, 92, 5, 25, 13, 2, 92, 93, 7, 95, 2, 2, 93, 24,
	3, 2, 2, 2, 94, 95, 7, 63, 2, 2, 95, 96, 5, 25, 13, 2, 96, 97, 7, 63, 2,
	2, 97, 107, 3, 2, 2, 2, 98, 102, 7, 93, 2, 2, 99, 101, 11, 2, 2, 2, 100,
	99, 3, 2, 2, 2, 101, 104, 3, 2, 2, 2, 102, 103, 3, 2, 2, 2, 102, 100, 3,
	2, 2, 2, 103, 105, 3, 2, 2, 2, 104, 102, 3, 2, 2, 2, 105, 107, 7, 95, 2,
	2, 106, 94, 3, 2, 2, 2, 106, 98, 3, 2, 2, 2, 107, 26, 3, 2, 2, 2, 108,
	109, 7, 37, 2, 2, 109, 110, 7, 93, 2, 2, 110, 111, 3, 2, 2, 2, 111, 112,
	5, 25, 13, 2, 112, 113, 7, 95, 2, 2, 113, 114, 3, 2, 2, 2, 114, 115, 8,
	14, 2, 2, 115, 28, 3, 2, 2, 2, 116, 146, 7, 37, 2, 2, 117, 147, 3, 2, 2,
	2, 118, 122, 7, 93, 2, 2, 119, 121, 7, 63, 2, 2, 120, 119, 3, 2, 2, 2,
	121, 124, 3, 2, 2, 2, 122, 120, 3, 2, 2, 2, 122, 123, 3, 2, 2, 2, 123,
	147, 3, 2, 2, 2, 124, 122, 3, 2, 2, 2, 125, 129, 7, 93, 2, 2, 126, 128,
	7, 63, 2, 2, 127, 126, 3, 2, 2, 2, 128, 131, 3, 2, 2, 2, 129, 127, 3, 2,
	2, 2, 129, 130, 3, 2, 2, 2, 130, 132, 3, 2, 2, 2, 131, 129, 3, 2, 2, 2,
	132, 136, 10, 7, 2, 2, 133, 135, 10, 8, 2, 2, 134, 133, 3, 2, 2, 2, 135,
	138, 3, 2, 2, 2, 136, 134, 3, 2, 2, 2, 136, 137, 3, 2, 2, 2, 137, 147,
	3, 2, 2, 2, 138, 136, 3, 2, 2, 2, 139, 143, 10, 9, 2, 2, 140, 142, 10,
	8, 2, 2, 141, 140, 3, 2, 2, 2, 142, 145, 3, 2, 2, 2, 143, 141, 3, 2, 2,
	2, 143, 144, 3, 2, 2, 2, 144, 147, 3, 2, 2, 2, 145, 143, 3, 2, 2, 2, 146,
	117, 3, 2, 2, 2, 146, 118, 3, 2, 2, 2, 146, 125, 3, 2, 2, 2, 146, 139,
	3, 2, 2, 2, 147, 153, 3, 2, 2, 2, 148, 150, 7, 15, 2, 2, 149, 151, 7, 12,
	2, 2, 150, 149, 3, 2, 2, 2, 150, 151, 3, 2, 2, 2, 151, 154, 3, 2, 2, 2,
	152, 154, 9, 10, 2, 2, 153, 148, 3, 2, 2, 2, 153, 152, 3, 2, 2, 2, 154,
	155, 3, 2, 2, 2, 155, 156, 8, 15, 2, 2, 156, 30, 3, 2, 2, 2, 157, 159,
	7, 15, 2, 2, 158, 160, 7, 12, 2, 2, 159, 158, 3, 2, 2, 2, 159, 160, 3,
	2, 2, 2, 160, 163, 3, 2, 2, 2, 161, 163, 7, 12, 2, 2, 162, 157, 3, 2, 2,
	2, 162, 161, 3, 2, 2, 2, 163, 164, 3, 2, 2, 2, 164, 162, 3, 2, 2, 2, 164,
	165, 3, 2, 2, 2, 165, 166, 3, 2, 2, 2, 166, 167, 8, 16, 2, 2, 167, 32,
	3, 2, 2, 2, 168, 170, 9, 11, 2, 2, 169, 168, 3, 2, 2, 2, 170, 171, 3, 2,
	2, 2, 171, 169, 3, 2, 2, 2, 171, 172, 3, 2, 2, 2, 172, 173, 3, 2, 2, 2,
	173, 174, 8, 17, 2, 2, 174, 34, 3, 2, 2, 2, 25, 2, 43, 48, 50, 55, 66,
	75, 77, 85, 88, 102, 106, 122, 129, 136, 143, 146, 150, 153, 159, 162,
	164, 171, 3, 8, 2, 2,
}

var lexerChannelNames = []string{
	"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
}

var lexerModeNames = []string{
	"DEFAULT_MODE",
}

var lexerLiteralNames = []string{
	"", "'('", "')'",
}

var lexerSymbolicNames = []string{
	"", "", "", "Identifier", "Unquoted_argument", "Escape_sequence", "Quoted_argument",
	"Bracket_argument", "Bracket_comment", "Line_comment", "Newline", "Space",
}

var lexerRuleNames = []string{
	"T__0", "T__1", "Identifier", "Unquoted_argument", "Escape_sequence", "Escape_identity",
	"Escape_encoded", "Escape_semicolon", "Quoted_argument", "Quoted_cont",
	"Bracket_argument", "Bracket_arg_nested", "Bracket_comment", "Line_comment",
	"Newline", "Space",
}

type CMakeLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

// NewCMakeLexer produces a new lexer instance for the optional input antlr.CharStream.
//
// The *CMakeLexer instance produced may be reused by calling the SetInputStream method.
// The initial lexer configuration is expensive to construct, and the object is not thread-safe;
// however, if used within a Golang sync.Pool, the construction cost amortizes well and the
// objects can be used in a thread-safe manner.
func NewCMakeLexer(input antlr.CharStream) *CMakeLexer {
	l := new(CMakeLexer)
	lexerDeserializer := antlr.NewATNDeserializer(nil)
	lexerAtn := lexerDeserializer.DeserializeFromUInt16(serializedLexerAtn)
	lexerDecisionToDFA := make([]*antlr.DFA, len(lexerAtn.DecisionToState))
	for index, ds := range lexerAtn.DecisionToState {
		lexerDecisionToDFA[index] = antlr.NewDFA(ds, index)
	}
	l.BaseLexer = antlr.NewBaseLexer(input)
	l.Interpreter = antlr.NewLexerATNSimulator(l, lexerAtn, lexerDecisionToDFA, antlr.NewPredictionContextCache())

	l.channelNames = lexerChannelNames
	l.modeNames = lexerModeNames
	l.RuleNames = lexerRuleNames
	l.LiteralNames = lexerLiteralNames
	l.SymbolicNames = lexerSymbolicNames
	l.GrammarFileName = "CMake.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// CMakeLexer tokens.
const (
	CMakeLexerT__0              = 1
	CMakeLexerT__1              = 2
	CMakeLexerIdentifier        = 3
	CMakeLexerUnquoted_argument = 4
	CMakeLexerEscape_sequence   = 5
	CMakeLexerQuoted_argument   = 6
	CMakeLexerBracket_argument  = 7
	CMakeLexerBracket_comment   = 8
	CMakeLexerLine_comment      = 9
	CMakeLexerNewline           = 10
	CMakeLexerSpace             = 11
)
