// Code generated from limbo.g4 by ANTLR 4.9.3. DO NOT EDIT.

package limbo // limbo
import (
	"fmt"
	"reflect"
	"strconv"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = reflect.Copy
var _ = strconv.Itoa

var parserATN = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 3, 64, 814,
	4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7,
	4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12, 4, 13,
	9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4, 18, 9,
	18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23, 9, 23,
	4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26, 4, 27, 9, 27, 4, 28, 9, 28, 4,
	29, 9, 29, 4, 30, 9, 30, 4, 31, 9, 31, 4, 32, 9, 32, 4, 33, 9, 33, 4, 34,
	9, 34, 4, 35, 9, 35, 4, 36, 9, 36, 4, 37, 9, 37, 4, 38, 9, 38, 4, 39, 9,
	39, 4, 40, 9, 40, 4, 41, 9, 41, 4, 42, 9, 42, 4, 43, 9, 43, 4, 44, 9, 44,
	4, 45, 9, 45, 4, 46, 9, 46, 4, 47, 9, 47, 4, 48, 9, 48, 4, 49, 9, 49, 4,
	50, 9, 50, 4, 51, 9, 51, 4, 52, 9, 52, 4, 53, 9, 53, 4, 54, 9, 54, 4, 55,
	9, 55, 4, 56, 9, 56, 4, 57, 9, 57, 4, 58, 9, 58, 3, 2, 3, 2, 3, 2, 3, 2,
	3, 2, 3, 3, 6, 3, 123, 10, 3, 13, 3, 14, 3, 124, 3, 4, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 5, 4, 148, 10, 4, 3, 5, 3, 5, 3, 5, 3, 5,
	3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5,
	3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5,
	3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 5, 184, 10, 5, 3, 6, 3, 6, 3, 6,
	3, 6, 3, 6, 3, 6, 7, 6, 192, 10, 6, 12, 6, 14, 6, 195, 11, 6, 3, 7, 6,
	7, 198, 10, 7, 13, 7, 14, 7, 199, 3, 8, 3, 8, 5, 8, 204, 10, 8, 3, 9, 3,
	9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3,
	9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 5, 9, 227, 10, 9, 3, 10, 3,
	10, 3, 11, 3, 11, 3, 12, 3, 12, 3, 13, 3, 13, 3, 14, 3, 14, 3, 15, 3, 15,
	3, 15, 3, 15, 3, 16, 3, 16, 3, 16, 7, 16, 246, 10, 16, 12, 16, 14, 16,
	249, 11, 16, 3, 17, 3, 17, 5, 17, 253, 10, 17, 3, 18, 3, 18, 3, 19, 3,
	19, 3, 19, 3, 19, 3, 20, 3, 20, 3, 21, 3, 21, 3, 21, 3, 22, 3, 22, 5, 22,
	268, 10, 22, 3, 22, 3, 22, 3, 22, 5, 22, 273, 10, 22, 3, 22, 3, 22, 3,
	22, 5, 22, 278, 10, 22, 3, 23, 3, 23, 3, 23, 7, 23, 283, 10, 23, 12, 23,
	14, 23, 286, 11, 23, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3,
	24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 5, 24, 304,
	10, 24, 3, 25, 3, 25, 3, 25, 7, 25, 309, 10, 25, 12, 25, 14, 25, 312, 11,
	25, 3, 26, 3, 26, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 5, 27, 321, 10, 27,
	3, 27, 3, 27, 3, 27, 3, 28, 6, 28, 327, 10, 28, 13, 28, 14, 28, 328, 3,
	29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29,
	3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3,
	29, 3, 29, 3, 29, 3, 29, 5, 29, 356, 10, 29, 3, 30, 3, 30, 3, 30, 3, 30,
	3, 30, 5, 30, 363, 10, 30, 3, 30, 3, 30, 3, 30, 3, 31, 3, 31, 3, 31, 3,
	31, 3, 31, 7, 31, 373, 10, 31, 12, 31, 14, 31, 376, 11, 31, 3, 32, 3, 32,
	3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3,
	32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32,
	5, 32, 401, 10, 32, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3,
	33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 7, 33, 418, 10, 33,
	12, 33, 14, 33, 421, 11, 33, 3, 34, 3, 34, 3, 34, 7, 34, 426, 10, 34, 12,
	34, 14, 34, 429, 11, 34, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 36,
	3, 36, 3, 36, 7, 36, 440, 10, 36, 12, 36, 14, 36, 443, 11, 36, 3, 37, 3,
	37, 7, 37, 447, 10, 37, 12, 37, 14, 37, 450, 11, 37, 3, 38, 3, 38, 3, 38,
	3, 38, 3, 38, 3, 38, 3, 38, 3, 38, 3, 38, 3, 38, 3, 38, 3, 38, 3, 38, 3,
	38, 3, 38, 3, 38, 3, 38, 3, 38, 3, 38, 3, 38, 3, 38, 3, 38, 3, 38, 5, 38,
	475, 10, 38, 3, 38, 3, 38, 3, 38, 5, 38, 480, 10, 38, 3, 38, 3, 38, 3,
	38, 5, 38, 485, 10, 38, 3, 38, 3, 38, 3, 38, 3, 38, 3, 38, 5, 38, 492,
	10, 38, 3, 38, 3, 38, 3, 38, 3, 38, 5, 38, 498, 10, 38, 3, 38, 3, 38, 3,
	38, 5, 38, 503, 10, 38, 3, 38, 3, 38, 5, 38, 507, 10, 38, 3, 38, 3, 38,
	5, 38, 511, 10, 38, 3, 38, 3, 38, 3, 38, 5, 38, 516, 10, 38, 3, 38, 3,
	38, 3, 38, 3, 38, 3, 38, 3, 38, 3, 38, 5, 38, 525, 10, 38, 3, 38, 3, 38,
	3, 38, 3, 38, 3, 38, 3, 38, 5, 38, 533, 10, 38, 3, 38, 3, 38, 3, 38, 3,
	38, 3, 38, 3, 38, 3, 38, 3, 38, 3, 38, 3, 38, 5, 38, 545, 10, 38, 3, 38,
	3, 38, 3, 38, 5, 38, 550, 10, 38, 3, 38, 3, 38, 3, 38, 5, 38, 555, 10,
	38, 3, 38, 3, 38, 3, 38, 3, 38, 3, 38, 5, 38, 562, 10, 38, 3, 38, 3, 38,
	3, 38, 3, 38, 3, 38, 5, 38, 569, 10, 38, 3, 39, 3, 39, 3, 39, 3, 40, 3,
	40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40,
	7, 40, 586, 10, 40, 12, 40, 14, 40, 589, 11, 40, 3, 41, 3, 41, 3, 41, 7,
	41, 594, 10, 41, 12, 41, 14, 41, 597, 11, 41, 3, 42, 3, 42, 3, 42, 3, 42,
	3, 42, 3, 42, 5, 42, 605, 10, 42, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 3,
	43, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 7, 43, 619, 10, 43, 12, 43,
	14, 43, 622, 11, 43, 3, 44, 3, 44, 3, 44, 7, 44, 627, 10, 44, 12, 44, 14,
	44, 630, 11, 44, 3, 45, 3, 45, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46,
	3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 5, 46, 648, 10,
	46, 3, 47, 3, 47, 3, 47, 3, 47, 3, 47, 3, 47, 7, 47, 656, 10, 47, 12, 47,
	14, 47, 659, 11, 47, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3,
	48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48,
	3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 5, 48, 684, 10, 48, 3, 49, 3, 49, 3,
	49, 7, 49, 689, 10, 49, 12, 49, 14, 49, 692, 11, 49, 3, 50, 3, 50, 3, 50,
	7, 50, 697, 10, 50, 12, 50, 14, 50, 700, 11, 50, 3, 51, 3, 51, 3, 51, 3,
	51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 5, 51, 711, 10, 51, 3, 51, 3, 51,
	3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 5, 51, 722, 10, 51, 3,
	51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51,
	3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3,
	51, 3, 51, 7, 51, 747, 10, 51, 12, 51, 14, 51, 750, 11, 51, 3, 52, 3, 52,
	3, 53, 3, 53, 3, 54, 3, 54, 3, 54, 3, 54, 3, 54, 3, 54, 3, 54, 3, 54, 5,
	54, 764, 10, 54, 3, 55, 3, 55, 3, 55, 3, 55, 3, 55, 3, 56, 3, 56, 3, 56,
	3, 56, 3, 57, 3, 57, 3, 57, 3, 57, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3,
	58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 5, 58, 792, 10, 58,
	3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3,
	58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 5, 58, 812, 10, 58,
	3, 58, 2, 9, 10, 60, 64, 78, 84, 92, 100, 59, 2, 4, 6, 8, 10, 12, 14, 16,
	18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52,
	54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88,
	90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 2, 4, 4, 2,
	23, 23, 53, 53, 4, 2, 53, 53, 60, 60, 2, 887, 2, 116, 3, 2, 2, 2, 4, 122,
	3, 2, 2, 2, 6, 147, 3, 2, 2, 2, 8, 183, 3, 2, 2, 2, 10, 185, 3, 2, 2, 2,
	12, 197, 3, 2, 2, 2, 14, 203, 3, 2, 2, 2, 16, 226, 3, 2, 2, 2, 18, 228,
	3, 2, 2, 2, 20, 230, 3, 2, 2, 2, 22, 232, 3, 2, 2, 2, 24, 234, 3, 2, 2,
	2, 26, 236, 3, 2, 2, 2, 28, 238, 3, 2, 2, 2, 30, 242, 3, 2, 2, 2, 32, 252,
	3, 2, 2, 2, 34, 254, 3, 2, 2, 2, 36, 256, 3, 2, 2, 2, 38, 260, 3, 2, 2,
	2, 40, 262, 3, 2, 2, 2, 42, 277, 3, 2, 2, 2, 44, 279, 3, 2, 2, 2, 46, 303,
	3, 2, 2, 2, 48, 305, 3, 2, 2, 2, 50, 313, 3, 2, 2, 2, 52, 315, 3, 2, 2,
	2, 54, 326, 3, 2, 2, 2, 56, 355, 3, 2, 2, 2, 58, 357, 3, 2, 2, 2, 60, 367,
	3, 2, 2, 2, 62, 400, 3, 2, 2, 2, 64, 402, 3, 2, 2, 2, 66, 422, 3, 2, 2,
	2, 68, 430, 3, 2, 2, 2, 70, 436, 3, 2, 2, 2, 72, 448, 3, 2, 2, 2, 74, 568,
	3, 2, 2, 2, 76, 570, 3, 2, 2, 2, 78, 573, 3, 2, 2, 2, 80, 590, 3, 2, 2,
	2, 82, 604, 3, 2, 2, 2, 84, 606, 3, 2, 2, 2, 86, 623, 3, 2, 2, 2, 88, 631,
	3, 2, 2, 2, 90, 647, 3, 2, 2, 2, 92, 649, 3, 2, 2, 2, 94, 683, 3, 2, 2,
	2, 96, 685, 3, 2, 2, 2, 98, 693, 3, 2, 2, 2, 100, 710, 3, 2, 2, 2, 102,
	751, 3, 2, 2, 2, 104, 753, 3, 2, 2, 2, 106, 763, 3, 2, 2, 2, 108, 765,
	3, 2, 2, 2, 110, 770, 3, 2, 2, 2, 112, 774, 3, 2, 2, 2, 114, 811, 3, 2,
	2, 2, 116, 117, 7, 3, 2, 2, 117, 118, 7, 53, 2, 2, 118, 119, 7, 4, 2, 2,
	119, 120, 5, 4, 3, 2, 120, 3, 3, 2, 2, 2, 121, 123, 5, 6, 4, 2, 122, 121,
	3, 2, 2, 2, 123, 124, 3, 2, 2, 2, 124, 122, 3, 2, 2, 2, 124, 125, 3, 2,
	2, 2, 125, 5, 3, 2, 2, 2, 126, 148, 5, 8, 5, 2, 127, 128, 5, 10, 6, 2,
	128, 129, 7, 5, 2, 2, 129, 130, 5, 90, 46, 2, 130, 131, 7, 4, 2, 2, 131,
	148, 3, 2, 2, 2, 132, 133, 5, 10, 6, 2, 133, 134, 7, 57, 2, 2, 134, 135,
	5, 90, 46, 2, 135, 136, 7, 4, 2, 2, 136, 148, 3, 2, 2, 2, 137, 138, 7,
	6, 2, 2, 138, 139, 5, 10, 6, 2, 139, 140, 7, 7, 2, 2, 140, 141, 7, 5, 2,
	2, 141, 142, 5, 90, 46, 2, 142, 143, 7, 4, 2, 2, 143, 148, 3, 2, 2, 2,
	144, 148, 5, 52, 27, 2, 145, 148, 5, 68, 35, 2, 146, 148, 5, 58, 30, 2,
	147, 126, 3, 2, 2, 2, 147, 127, 3, 2, 2, 2, 147, 132, 3, 2, 2, 2, 147,
	137, 3, 2, 2, 2, 147, 144, 3, 2, 2, 2, 147, 145, 3, 2, 2, 2, 147, 146,
	3, 2, 2, 2, 148, 7, 3, 2, 2, 2, 149, 150, 5, 10, 6, 2, 150, 151, 7, 8,
	2, 2, 151, 152, 5, 14, 8, 2, 152, 153, 7, 4, 2, 2, 153, 184, 3, 2, 2, 2,
	154, 155, 5, 10, 6, 2, 155, 156, 7, 8, 2, 2, 156, 157, 5, 14, 8, 2, 157,
	158, 7, 57, 2, 2, 158, 159, 5, 90, 46, 2, 159, 160, 7, 4, 2, 2, 160, 184,
	3, 2, 2, 2, 161, 162, 5, 10, 6, 2, 162, 163, 7, 8, 2, 2, 163, 164, 7, 9,
	2, 2, 164, 165, 5, 90, 46, 2, 165, 166, 7, 4, 2, 2, 166, 184, 3, 2, 2,
	2, 167, 168, 5, 10, 6, 2, 168, 169, 7, 8, 2, 2, 169, 170, 7, 10, 2, 2,
	170, 171, 7, 53, 2, 2, 171, 172, 7, 4, 2, 2, 172, 184, 3, 2, 2, 2, 173,
	174, 5, 10, 6, 2, 174, 175, 7, 8, 2, 2, 175, 176, 7, 11, 2, 2, 176, 177,
	5, 14, 8, 2, 177, 178, 7, 4, 2, 2, 178, 184, 3, 2, 2, 2, 179, 180, 7, 12,
	2, 2, 180, 181, 5, 104, 53, 2, 181, 182, 7, 4, 2, 2, 182, 184, 3, 2, 2,
	2, 183, 149, 3, 2, 2, 2, 183, 154, 3, 2, 2, 2, 183, 161, 3, 2, 2, 2, 183,
	167, 3, 2, 2, 2, 183, 173, 3, 2, 2, 2, 183, 179, 3, 2, 2, 2, 184, 9, 3,
	2, 2, 2, 185, 186, 8, 6, 1, 2, 186, 187, 7, 53, 2, 2, 187, 193, 3, 2, 2,
	2, 188, 189, 12, 3, 2, 2, 189, 190, 7, 13, 2, 2, 190, 192, 7, 53, 2, 2,
	191, 188, 3, 2, 2, 2, 192, 195, 3, 2, 2, 2, 193, 191, 3, 2, 2, 2, 193,
	194, 3, 2, 2, 2, 194, 11, 3, 2, 2, 2, 195, 193, 3, 2, 2, 2, 196, 198, 5,
	90, 46, 2, 197, 196, 3, 2, 2, 2, 198, 199, 3, 2, 2, 2, 199, 197, 3, 2,
	2, 2, 199, 200, 3, 2, 2, 2, 200, 13, 3, 2, 2, 2, 201, 204, 5, 16, 9, 2,
	202, 204, 5, 40, 21, 2, 203, 201, 3, 2, 2, 2, 203, 202, 3, 2, 2, 2, 204,
	15, 3, 2, 2, 2, 205, 227, 5, 22, 12, 2, 206, 227, 5, 24, 13, 2, 207, 227,
	5, 26, 14, 2, 208, 227, 5, 20, 11, 2, 209, 227, 5, 18, 10, 2, 210, 227,
	5, 28, 15, 2, 211, 212, 7, 14, 2, 2, 212, 213, 7, 15, 2, 2, 213, 227, 5,
	16, 9, 2, 214, 215, 7, 16, 2, 2, 215, 216, 7, 15, 2, 2, 216, 227, 5, 16,
	9, 2, 217, 218, 7, 17, 2, 2, 218, 219, 7, 15, 2, 2, 219, 227, 5, 16, 9,
	2, 220, 227, 5, 32, 17, 2, 221, 222, 7, 18, 2, 2, 222, 227, 5, 32, 17,
	2, 223, 227, 5, 34, 18, 2, 224, 227, 5, 36, 19, 2, 225, 227, 5, 38, 20,
	2, 226, 205, 3, 2, 2, 2, 226, 206, 3, 2, 2, 2, 226, 207, 3, 2, 2, 2, 226,
	208, 3, 2, 2, 2, 226, 209, 3, 2, 2, 2, 226, 210, 3, 2, 2, 2, 226, 211,
	3, 2, 2, 2, 226, 214, 3, 2, 2, 2, 226, 217, 3, 2, 2, 2, 226, 220, 3, 2,
	2, 2, 226, 221, 3, 2, 2, 2, 226, 223, 3, 2, 2, 2, 226, 224, 3, 2, 2, 2,
	226, 225, 3, 2, 2, 2, 227, 17, 3, 2, 2, 2, 228, 229, 7, 52, 2, 2, 229,
	19, 3, 2, 2, 2, 230, 231, 7, 54, 2, 2, 231, 21, 3, 2, 2, 2, 232, 233, 7,
	55, 2, 2, 233, 23, 3, 2, 2, 2, 234, 235, 7, 55, 2, 2, 235, 25, 3, 2, 2,
	2, 236, 237, 7, 55, 2, 2, 237, 27, 3, 2, 2, 2, 238, 239, 7, 6, 2, 2, 239,
	240, 5, 30, 16, 2, 240, 241, 7, 7, 2, 2, 241, 29, 3, 2, 2, 2, 242, 247,
	5, 16, 9, 2, 243, 244, 7, 13, 2, 2, 244, 246, 5, 16, 9, 2, 245, 243, 3,
	2, 2, 2, 246, 249, 3, 2, 2, 2, 247, 245, 3, 2, 2, 2, 247, 248, 3, 2, 2,
	2, 248, 31, 3, 2, 2, 2, 249, 247, 3, 2, 2, 2, 250, 253, 7, 53, 2, 2, 251,
	253, 5, 36, 19, 2, 252, 250, 3, 2, 2, 2, 252, 251, 3, 2, 2, 2, 253, 33,
	3, 2, 2, 2, 254, 255, 7, 53, 2, 2, 255, 35, 3, 2, 2, 2, 256, 257, 7, 53,
	2, 2, 257, 258, 7, 19, 2, 2, 258, 259, 7, 53, 2, 2, 259, 37, 3, 2, 2, 2,
	260, 261, 7, 53, 2, 2, 261, 39, 3, 2, 2, 2, 262, 263, 7, 20, 2, 2, 263,
	264, 5, 42, 22, 2, 264, 41, 3, 2, 2, 2, 265, 267, 7, 6, 2, 2, 266, 268,
	5, 44, 23, 2, 267, 266, 3, 2, 2, 2, 267, 268, 3, 2, 2, 2, 268, 269, 3,
	2, 2, 2, 269, 278, 7, 7, 2, 2, 270, 272, 7, 6, 2, 2, 271, 273, 5, 44, 23,
	2, 272, 271, 3, 2, 2, 2, 272, 273, 3, 2, 2, 2, 273, 274, 3, 2, 2, 2, 274,
	275, 7, 7, 2, 2, 275, 276, 7, 8, 2, 2, 276, 278, 5, 16, 9, 2, 277, 265,
	3, 2, 2, 2, 277, 270, 3, 2, 2, 2, 278, 43, 3, 2, 2, 2, 279, 284, 5, 46,
	24, 2, 280, 281, 7, 13, 2, 2, 281, 283, 5, 46, 24, 2, 282, 280, 3, 2, 2,
	2, 283, 286, 3, 2, 2, 2, 284, 282, 3, 2, 2, 2, 284, 285, 3, 2, 2, 2, 285,
	45, 3, 2, 2, 2, 286, 284, 3, 2, 2, 2, 287, 288, 5, 48, 25, 2, 288, 289,
	7, 8, 2, 2, 289, 290, 5, 14, 8, 2, 290, 304, 3, 2, 2, 2, 291, 292, 5, 50,
	26, 2, 292, 293, 7, 8, 2, 2, 293, 294, 7, 21, 2, 2, 294, 295, 7, 22, 2,
	2, 295, 296, 7, 53, 2, 2, 296, 304, 3, 2, 2, 2, 297, 298, 5, 50, 26, 2,
	298, 299, 7, 8, 2, 2, 299, 300, 7, 21, 2, 2, 300, 301, 7, 53, 2, 2, 301,
	304, 3, 2, 2, 2, 302, 304, 7, 60, 2, 2, 303, 287, 3, 2, 2, 2, 303, 291,
	3, 2, 2, 2, 303, 297, 3, 2, 2, 2, 303, 302, 3, 2, 2, 2, 304, 47, 3, 2,
	2, 2, 305, 310, 5, 50, 26, 2, 306, 307, 7, 13, 2, 2, 307, 309, 5, 50, 26,
	2, 308, 306, 3, 2, 2, 2, 309, 312, 3, 2, 2, 2, 310, 308, 3, 2, 2, 2, 310,
	311, 3, 2, 2, 2, 311, 49, 3, 2, 2, 2, 312, 310, 3, 2, 2, 2, 313, 314, 9,
	2, 2, 2, 314, 51, 3, 2, 2, 2, 315, 316, 7, 53, 2, 2, 316, 317, 7, 8, 2,
	2, 317, 318, 7, 24, 2, 2, 318, 320, 7, 25, 2, 2, 319, 321, 5, 54, 28, 2,
	320, 319, 3, 2, 2, 2, 320, 321, 3, 2, 2, 2, 321, 322, 3, 2, 2, 2, 322,
	323, 7, 26, 2, 2, 323, 324, 7, 4, 2, 2, 324, 53, 3, 2, 2, 2, 325, 327,
	5, 56, 29, 2, 326, 325, 3, 2, 2, 2, 327, 328, 3, 2, 2, 2, 328, 326, 3,
	2, 2, 2, 328, 329, 3, 2, 2, 2, 329, 55, 3, 2, 2, 2, 330, 331, 5, 10, 6,
	2, 331, 332, 7, 8, 2, 2, 332, 333, 5, 40, 21, 2, 333, 334, 7, 4, 2, 2,
	334, 356, 3, 2, 2, 2, 335, 336, 5, 10, 6, 2, 336, 337, 7, 8, 2, 2, 337,
	338, 5, 16, 9, 2, 338, 339, 7, 4, 2, 2, 339, 356, 3, 2, 2, 2, 340, 341,
	5, 58, 30, 2, 341, 342, 7, 4, 2, 2, 342, 356, 3, 2, 2, 2, 343, 344, 5,
	10, 6, 2, 344, 345, 7, 8, 2, 2, 345, 346, 7, 9, 2, 2, 346, 347, 5, 90,
	46, 2, 347, 348, 7, 4, 2, 2, 348, 356, 3, 2, 2, 2, 349, 350, 5, 10, 6,
	2, 350, 351, 7, 8, 2, 2, 351, 352, 7, 11, 2, 2, 352, 353, 5, 14, 8, 2,
	353, 354, 7, 4, 2, 2, 354, 356, 3, 2, 2, 2, 355, 330, 3, 2, 2, 2, 355,
	335, 3, 2, 2, 2, 355, 340, 3, 2, 2, 2, 355, 343, 3, 2, 2, 2, 355, 349,
	3, 2, 2, 2, 356, 57, 3, 2, 2, 2, 357, 358, 7, 53, 2, 2, 358, 359, 7, 8,
	2, 2, 359, 360, 7, 27, 2, 2, 360, 362, 7, 25, 2, 2, 361, 363, 5, 60, 31,
	2, 362, 361, 3, 2, 2, 2, 362, 363, 3, 2, 2, 2, 363, 364, 3, 2, 2, 2, 364,
	365, 7, 26, 2, 2, 365, 366, 7, 4, 2, 2, 366, 59, 3, 2, 2, 2, 367, 368,
	8, 31, 1, 2, 368, 369, 5, 62, 32, 2, 369, 374, 3, 2, 2, 2, 370, 371, 12,
	3, 2, 2, 371, 373, 5, 62, 32, 2, 372, 370, 3, 2, 2, 2, 373, 376, 3, 2,
	2, 2, 374, 372, 3, 2, 2, 2, 374, 375, 3, 2, 2, 2, 375, 61, 3, 2, 2, 2,
	376, 374, 3, 2, 2, 2, 377, 378, 5, 10, 6, 2, 378, 379, 7, 8, 2, 2, 379,
	380, 7, 28, 2, 2, 380, 381, 5, 16, 9, 2, 381, 382, 7, 4, 2, 2, 382, 401,
	3, 2, 2, 2, 383, 384, 5, 10, 6, 2, 384, 385, 7, 8, 2, 2, 385, 386, 7, 9,
	2, 2, 386, 387, 5, 90, 46, 2, 387, 388, 7, 4, 2, 2, 388, 401, 3, 2, 2,
	2, 389, 390, 5, 10, 6, 2, 390, 391, 7, 8, 2, 2, 391, 392, 5, 40, 21, 2,
	392, 393, 7, 4, 2, 2, 393, 401, 3, 2, 2, 2, 394, 395, 7, 29, 2, 2, 395,
	396, 7, 25, 2, 2, 396, 397, 5, 64, 33, 2, 397, 398, 7, 26, 2, 2, 398, 399,
	7, 4, 2, 2, 399, 401, 3, 2, 2, 2, 400, 377, 3, 2, 2, 2, 400, 383, 3, 2,
	2, 2, 400, 389, 3, 2, 2, 2, 400, 394, 3, 2, 2, 2, 401, 63, 3, 2, 2, 2,
	402, 403, 8, 33, 1, 2, 403, 404, 5, 66, 34, 2, 404, 405, 7, 30, 2, 2, 405,
	419, 3, 2, 2, 2, 406, 407, 12, 4, 2, 2, 407, 408, 5, 66, 34, 2, 408, 409,
	7, 30, 2, 2, 409, 418, 3, 2, 2, 2, 410, 411, 12, 3, 2, 2, 411, 412, 5,
	10, 6, 2, 412, 413, 7, 8, 2, 2, 413, 414, 7, 28, 2, 2, 414, 415, 5, 16,
	9, 2, 415, 416, 7, 4, 2, 2, 416, 418, 3, 2, 2, 2, 417, 406, 3, 2, 2, 2,
	417, 410, 3, 2, 2, 2, 418, 421, 3, 2, 2, 2, 419, 417, 3, 2, 2, 2, 419,
	420, 3, 2, 2, 2, 420, 65, 3, 2, 2, 2, 421, 419, 3, 2, 2, 2, 422, 427, 7,
	53, 2, 2, 423, 424, 7, 31, 2, 2, 424, 426, 7, 53, 2, 2, 425, 423, 3, 2,
	2, 2, 426, 429, 3, 2, 2, 2, 427, 425, 3, 2, 2, 2, 427, 428, 3, 2, 2, 2,
	428, 67, 3, 2, 2, 2, 429, 427, 3, 2, 2, 2, 430, 431, 5, 70, 36, 2, 431,
	432, 5, 42, 22, 2, 432, 433, 7, 25, 2, 2, 433, 434, 5, 72, 37, 2, 434,
	435, 7, 26, 2, 2, 435, 69, 3, 2, 2, 2, 436, 441, 7, 53, 2, 2, 437, 438,
	7, 32, 2, 2, 438, 440, 7, 53, 2, 2, 439, 437, 3, 2, 2, 2, 440, 443, 3,
	2, 2, 2, 441, 439, 3, 2, 2, 2, 441, 442, 3, 2, 2, 2, 442, 71, 3, 2, 2,
	2, 443, 441, 3, 2, 2, 2, 444, 447, 5, 8, 5, 2, 445, 447, 5, 74, 38, 2,
	446, 444, 3, 2, 2, 2, 446, 445, 3, 2, 2, 2, 447, 450, 3, 2, 2, 2, 448,
	446, 3, 2, 2, 2, 448, 449, 3, 2, 2, 2, 449, 73, 3, 2, 2, 2, 450, 448, 3,
	2, 2, 2, 451, 452, 5, 90, 46, 2, 452, 453, 7, 4, 2, 2, 453, 569, 3, 2,
	2, 2, 454, 569, 7, 4, 2, 2, 455, 456, 7, 25, 2, 2, 456, 457, 5, 72, 37,
	2, 457, 458, 7, 26, 2, 2, 458, 569, 3, 2, 2, 2, 459, 460, 7, 33, 2, 2,
	460, 461, 7, 6, 2, 2, 461, 462, 5, 90, 46, 2, 462, 463, 7, 7, 2, 2, 463,
	464, 5, 74, 38, 2, 464, 569, 3, 2, 2, 2, 465, 466, 7, 33, 2, 2, 466, 467,
	7, 6, 2, 2, 467, 468, 5, 90, 46, 2, 468, 469, 7, 7, 2, 2, 469, 470, 5,
	74, 38, 2, 470, 471, 7, 34, 2, 2, 471, 472, 5, 74, 38, 2, 472, 569, 3,
	2, 2, 2, 473, 475, 5, 76, 39, 2, 474, 473, 3, 2, 2, 2, 474, 475, 3, 2,
	2, 2, 475, 476, 3, 2, 2, 2, 476, 477, 7, 35, 2, 2, 477, 479, 7, 6, 2, 2,
	478, 480, 5, 90, 46, 2, 479, 478, 3, 2, 2, 2, 479, 480, 3, 2, 2, 2, 480,
	481, 3, 2, 2, 2, 481, 482, 7, 7, 2, 2, 482, 569, 5, 74, 38, 2, 483, 485,
	5, 76, 39, 2, 484, 483, 3, 2, 2, 2, 484, 485, 3, 2, 2, 2, 485, 486, 3,
	2, 2, 2, 486, 487, 7, 36, 2, 2, 487, 488, 5, 74, 38, 2, 488, 489, 7, 35,
	2, 2, 489, 491, 7, 6, 2, 2, 490, 492, 5, 90, 46, 2, 491, 490, 3, 2, 2,
	2, 491, 492, 3, 2, 2, 2, 492, 493, 3, 2, 2, 2, 493, 494, 7, 7, 2, 2, 494,
	495, 7, 4, 2, 2, 495, 569, 3, 2, 2, 2, 496, 498, 5, 76, 39, 2, 497, 496,
	3, 2, 2, 2, 497, 498, 3, 2, 2, 2, 498, 499, 3, 2, 2, 2, 499, 500, 7, 37,
	2, 2, 500, 502, 7, 6, 2, 2, 501, 503, 5, 90, 46, 2, 502, 501, 3, 2, 2,
	2, 502, 503, 3, 2, 2, 2, 503, 504, 3, 2, 2, 2, 504, 506, 7, 4, 2, 2, 505,
	507, 5, 90, 46, 2, 506, 505, 3, 2, 2, 2, 506, 507, 3, 2, 2, 2, 507, 508,
	3, 2, 2, 2, 508, 510, 7, 4, 2, 2, 509, 511, 5, 90, 46, 2, 510, 509, 3,
	2, 2, 2, 510, 511, 3, 2, 2, 2, 511, 512, 3, 2, 2, 2, 512, 513, 7, 7, 2,
	2, 513, 569, 5, 74, 38, 2, 514, 516, 5, 76, 39, 2, 515, 514, 3, 2, 2, 2,
	515, 516, 3, 2, 2, 2, 516, 517, 3, 2, 2, 2, 517, 518, 7, 38, 2, 2, 518,
	519, 5, 90, 46, 2, 519, 520, 7, 25, 2, 2, 520, 521, 5, 78, 40, 2, 521,
	522, 7, 26, 2, 2, 522, 569, 3, 2, 2, 2, 523, 525, 5, 76, 39, 2, 524, 523,
	3, 2, 2, 2, 524, 525, 3, 2, 2, 2, 525, 526, 3, 2, 2, 2, 526, 527, 7, 39,
	2, 2, 527, 528, 7, 25, 2, 2, 528, 529, 5, 78, 40, 2, 529, 530, 7, 26, 2,
	2, 530, 569, 3, 2, 2, 2, 531, 533, 5, 76, 39, 2, 532, 531, 3, 2, 2, 2,
	532, 533, 3, 2, 2, 2, 533, 534, 3, 2, 2, 2, 534, 535, 7, 29, 2, 2, 535,
	536, 7, 53, 2, 2, 536, 537, 7, 5, 2, 2, 537, 538, 5, 90, 46, 2, 538, 539,
	7, 25, 2, 2, 539, 540, 5, 84, 43, 2, 540, 541, 7, 26, 2, 2, 541, 569, 3,
	2, 2, 2, 542, 544, 7, 40, 2, 2, 543, 545, 7, 53, 2, 2, 544, 543, 3, 2,
	2, 2, 544, 545, 3, 2, 2, 2, 545, 546, 3, 2, 2, 2, 546, 569, 7, 4, 2, 2,
	547, 549, 7, 41, 2, 2, 548, 550, 7, 53, 2, 2, 549, 548, 3, 2, 2, 2, 549,
	550, 3, 2, 2, 2, 550, 551, 3, 2, 2, 2, 551, 569, 7, 4, 2, 2, 552, 554,
	7, 42, 2, 2, 553, 555, 5, 90, 46, 2, 554, 553, 3, 2, 2, 2, 554, 555, 3,
	2, 2, 2, 555, 556, 3, 2, 2, 2, 556, 569, 7, 4, 2, 2, 557, 558, 7, 43, 2,
	2, 558, 559, 5, 100, 51, 2, 559, 561, 7, 6, 2, 2, 560, 562, 5, 12, 7, 2,
	561, 560, 3, 2, 2, 2, 561, 562, 3, 2, 2, 2, 562, 563, 3, 2, 2, 2, 563,
	564, 7, 7, 2, 2, 564, 565, 7, 4, 2, 2, 565, 569, 3, 2, 2, 2, 566, 567,
	7, 44, 2, 2, 567, 569, 7, 4, 2, 2, 568, 451, 3, 2, 2, 2, 568, 454, 3, 2,
	2, 2, 568, 455, 3, 2, 2, 2, 568, 459, 3, 2, 2, 2, 568, 465, 3, 2, 2, 2,
	568, 474, 3, 2, 2, 2, 568, 484, 3, 2, 2, 2, 568, 497, 3, 2, 2, 2, 568,
	515, 3, 2, 2, 2, 568, 524, 3, 2, 2, 2, 568, 532, 3, 2, 2, 2, 568, 542,
	3, 2, 2, 2, 568, 547, 3, 2, 2, 2, 568, 552, 3, 2, 2, 2, 568, 557, 3, 2,
	2, 2, 568, 566, 3, 2, 2, 2, 569, 75, 3, 2, 2, 2, 570, 571, 7, 53, 2, 2,
	571, 572, 7, 8, 2, 2, 572, 77, 3, 2, 2, 2, 573, 574, 8, 40, 1, 2, 574,
	575, 5, 80, 41, 2, 575, 576, 7, 30, 2, 2, 576, 587, 3, 2, 2, 2, 577, 578,
	12, 5, 2, 2, 578, 579, 5, 80, 41, 2, 579, 580, 7, 30, 2, 2, 580, 586, 3,
	2, 2, 2, 581, 582, 12, 4, 2, 2, 582, 586, 5, 74, 38, 2, 583, 584, 12, 3,
	2, 2, 584, 586, 5, 8, 5, 2, 585, 577, 3, 2, 2, 2, 585, 581, 3, 2, 2, 2,
	585, 583, 3, 2, 2, 2, 586, 589, 3, 2, 2, 2, 587, 585, 3, 2, 2, 2, 587,
	588, 3, 2, 2, 2, 588, 79, 3, 2, 2, 2, 589, 587, 3, 2, 2, 2, 590, 595, 5,
	82, 42, 2, 591, 592, 7, 31, 2, 2, 592, 594, 5, 82, 42, 2, 593, 591, 3,
	2, 2, 2, 594, 597, 3, 2, 2, 2, 595, 593, 3, 2, 2, 2, 595, 596, 3, 2, 2,
	2, 596, 81, 3, 2, 2, 2, 597, 595, 3, 2, 2, 2, 598, 605, 5, 90, 46, 2, 599,
	600, 5, 90, 46, 2, 600, 601, 7, 45, 2, 2, 601, 602, 5, 90, 46, 2, 602,
	605, 3, 2, 2, 2, 603, 605, 7, 60, 2, 2, 604, 598, 3, 2, 2, 2, 604, 599,
	3, 2, 2, 2, 604, 603, 3, 2, 2, 2, 605, 83, 3, 2, 2, 2, 606, 607, 8, 43,
	1, 2, 607, 608, 5, 86, 44, 2, 608, 609, 7, 30, 2, 2, 609, 620, 3, 2, 2,
	2, 610, 611, 12, 5, 2, 2, 611, 612, 5, 86, 44, 2, 612, 613, 7, 30, 2, 2,
	613, 619, 3, 2, 2, 2, 614, 615, 12, 4, 2, 2, 615, 619, 5, 74, 38, 2, 616,
	617, 12, 3, 2, 2, 617, 619, 5, 8, 5, 2, 618, 610, 3, 2, 2, 2, 618, 614,
	3, 2, 2, 2, 618, 616, 3, 2, 2, 2, 619, 622, 3, 2, 2, 2, 620, 618, 3, 2,
	2, 2, 620, 621, 3, 2, 2, 2, 621, 85, 3, 2, 2, 2, 622, 620, 3, 2, 2, 2,
	623, 628, 5, 88, 45, 2, 624, 625, 7, 31, 2, 2, 625, 627, 5, 88, 45, 2,
	626, 624, 3, 2, 2, 2, 627, 630, 3, 2, 2, 2, 628, 626, 3, 2, 2, 2, 628,
	629, 3, 2, 2, 2, 629, 87, 3, 2, 2, 2, 630, 628, 3, 2, 2, 2, 631, 632, 9,
	3, 2, 2, 632, 89, 3, 2, 2, 2, 633, 648, 5, 92, 47, 2, 634, 635, 5, 94,
	48, 2, 635, 636, 7, 56, 2, 2, 636, 637, 5, 90, 46, 2, 637, 648, 3, 2, 2,
	2, 638, 639, 7, 6, 2, 2, 639, 640, 5, 96, 49, 2, 640, 641, 7, 7, 2, 2,
	641, 642, 7, 57, 2, 2, 642, 643, 5, 90, 46, 2, 643, 648, 3, 2, 2, 2, 644,
	648, 5, 108, 55, 2, 645, 648, 5, 110, 56, 2, 646, 648, 5, 112, 57, 2, 647,
	633, 3, 2, 2, 2, 647, 634, 3, 2, 2, 2, 647, 638, 3, 2, 2, 2, 647, 644,
	3, 2, 2, 2, 647, 645, 3, 2, 2, 2, 647, 646, 3, 2, 2, 2, 648, 91, 3, 2,
	2, 2, 649, 650, 8, 47, 1, 2, 650, 651, 5, 114, 58, 2, 651, 657, 3, 2, 2,
	2, 652, 653, 12, 3, 2, 2, 653, 654, 7, 58, 2, 2, 654, 656, 5, 92, 47, 4,
	655, 652, 3, 2, 2, 2, 656, 659, 3, 2, 2, 2, 657, 655, 3, 2, 2, 2, 657,
	658, 3, 2, 2, 2, 658, 93, 3, 2, 2, 2, 659, 657, 3, 2, 2, 2, 660, 684, 7,
	53, 2, 2, 661, 684, 7, 23, 2, 2, 662, 663, 5, 100, 51, 2, 663, 664, 7,
	46, 2, 2, 664, 665, 5, 90, 46, 2, 665, 666, 7, 47, 2, 2, 666, 684, 3, 2,
	2, 2, 667, 668, 5, 100, 51, 2, 668, 669, 7, 46, 2, 2, 669, 670, 5, 90,
	46, 2, 670, 671, 7, 8, 2, 2, 671, 672, 7, 47, 2, 2, 672, 684, 3, 2, 2,
	2, 673, 674, 5, 100, 51, 2, 674, 675, 7, 32, 2, 2, 675, 676, 7, 53, 2,
	2, 676, 684, 3, 2, 2, 2, 677, 678, 7, 6, 2, 2, 678, 679, 5, 96, 49, 2,
	679, 680, 7, 7, 2, 2, 680, 684, 3, 2, 2, 2, 681, 682, 7, 60, 2, 2, 682,
	684, 5, 114, 58, 2, 683, 660, 3, 2, 2, 2, 683, 661, 3, 2, 2, 2, 683, 662,
	3, 2, 2, 2, 683, 667, 3, 2, 2, 2, 683, 673, 3, 2, 2, 2, 683, 677, 3, 2,
	2, 2, 683, 681, 3, 2, 2, 2, 684, 95, 3, 2, 2, 2, 685, 690, 5, 94, 48, 2,
	686, 687, 7, 13, 2, 2, 687, 689, 5, 94, 48, 2, 688, 686, 3, 2, 2, 2, 689,
	692, 3, 2, 2, 2, 690, 688, 3, 2, 2, 2, 690, 691, 3, 2, 2, 2, 691, 97, 3,
	2, 2, 2, 692, 690, 3, 2, 2, 2, 693, 698, 5, 106, 54, 2, 694, 695, 7, 13,
	2, 2, 695, 697, 5, 106, 54, 2, 696, 694, 3, 2, 2, 2, 697, 700, 3, 2, 2,
	2, 698, 696, 3, 2, 2, 2, 698, 699, 3, 2, 2, 2, 699, 99, 3, 2, 2, 2, 700,
	698, 3, 2, 2, 2, 701, 702, 8, 51, 1, 2, 702, 711, 7, 53, 2, 2, 703, 711,
	5, 102, 52, 2, 704, 711, 5, 104, 53, 2, 705, 711, 7, 23, 2, 2, 706, 707,
	7, 6, 2, 2, 707, 708, 5, 12, 7, 2, 708, 709, 7, 7, 2, 2, 709, 711, 3, 2,
	2, 2, 710, 701, 3, 2, 2, 2, 710, 703, 3, 2, 2, 2, 710, 704, 3, 2, 2, 2,
	710, 705, 3, 2, 2, 2, 710, 706, 3, 2, 2, 2, 711, 748, 3, 2, 2, 2, 712,
	713, 12, 9, 2, 2, 713, 714, 7, 19, 2, 2, 714, 747, 5, 100, 51, 10, 715,
	716, 12, 10, 2, 2, 716, 717, 7, 32, 2, 2, 717, 747, 7, 53, 2, 2, 718, 719,
	12, 8, 2, 2, 719, 721, 7, 6, 2, 2, 720, 722, 5, 12, 7, 2, 721, 720, 3,
	2, 2, 2, 721, 722, 3, 2, 2, 2, 722, 723, 3, 2, 2, 2, 723, 747, 7, 7, 2,
	2, 724, 725, 12, 7, 2, 2, 725, 726, 7, 46, 2, 2, 726, 727, 5, 90, 46, 2,
	727, 728, 7, 47, 2, 2, 728, 747, 3, 2, 2, 2, 729, 730, 12, 6, 2, 2, 730,
	731, 7, 46, 2, 2, 731, 732, 5, 90, 46, 2, 732, 733, 7, 8, 2, 2, 733, 734,
	5, 90, 46, 2, 734, 735, 7, 47, 2, 2, 735, 747, 3, 2, 2, 2, 736, 737, 12,
	5, 2, 2, 737, 738, 7, 46, 2, 2, 738, 739, 5, 90, 46, 2, 739, 740, 7, 8,
	2, 2, 740, 741, 7, 47, 2, 2, 741, 747, 3, 2, 2, 2, 742, 743, 12, 4, 2,
	2, 743, 747, 7, 48, 2, 2, 744, 745, 12, 3, 2, 2, 745, 747, 7, 49, 2, 2,
	746, 712, 3, 2, 2, 2, 746, 715, 3, 2, 2, 2, 746, 718, 3, 2, 2, 2, 746,
	724, 3, 2, 2, 2, 746, 729, 3, 2, 2, 2, 746, 736, 3, 2, 2, 2, 746, 742,
	3, 2, 2, 2, 746, 744, 3, 2, 2, 2, 747, 750, 3, 2, 2, 2, 748, 746, 3, 2,
	2, 2, 748, 749, 3, 2, 2, 2, 749, 101, 3, 2, 2, 2, 750, 748, 3, 2, 2, 2,
	751, 752, 7, 54, 2, 2, 752, 103, 3, 2, 2, 2, 753, 754, 7, 52, 2, 2, 754,
	105, 3, 2, 2, 2, 755, 764, 5, 90, 46, 2, 756, 757, 5, 90, 46, 2, 757, 758,
	7, 30, 2, 2, 758, 759, 5, 90, 46, 2, 759, 764, 3, 2, 2, 2, 760, 761, 7,
	60, 2, 2, 761, 762, 7, 30, 2, 2, 762, 764, 5, 90, 46, 2, 763, 755, 3, 2,
	2, 2, 763, 756, 3, 2, 2, 2, 763, 760, 3, 2, 2, 2, 764, 107, 3, 2, 2, 2,
	765, 766, 5, 94, 48, 2, 766, 767, 7, 50, 2, 2, 767, 768, 7, 57, 2, 2, 768,
	769, 5, 90, 46, 2, 769, 109, 3, 2, 2, 2, 770, 771, 5, 94, 48, 2, 771, 772,
	7, 5, 2, 2, 772, 773, 5, 90, 46, 2, 773, 111, 3, 2, 2, 2, 774, 775, 7,
	51, 2, 2, 775, 776, 7, 53, 2, 2, 776, 777, 5, 90, 46, 2, 777, 113, 3, 2,
	2, 2, 778, 812, 5, 100, 51, 2, 779, 780, 7, 59, 2, 2, 780, 812, 5, 114,
	58, 2, 781, 782, 7, 14, 2, 2, 782, 783, 7, 46, 2, 2, 783, 784, 5, 90, 46,
	2, 784, 785, 7, 47, 2, 2, 785, 786, 7, 15, 2, 2, 786, 787, 5, 16, 9, 2,
	787, 812, 3, 2, 2, 2, 788, 789, 7, 14, 2, 2, 789, 791, 7, 46, 2, 2, 790,
	792, 5, 90, 46, 2, 791, 790, 3, 2, 2, 2, 791, 792, 3, 2, 2, 2, 792, 793,
	3, 2, 2, 2, 793, 794, 7, 47, 2, 2, 794, 795, 7, 15, 2, 2, 795, 796, 7,
	25, 2, 2, 796, 797, 5, 98, 50, 2, 797, 798, 7, 26, 2, 2, 798, 812, 3, 2,
	2, 2, 799, 800, 7, 16, 2, 2, 800, 801, 7, 15, 2, 2, 801, 802, 7, 25, 2,
	2, 802, 803, 5, 12, 7, 2, 803, 804, 7, 26, 2, 2, 804, 812, 3, 2, 2, 2,
	805, 806, 7, 17, 2, 2, 806, 807, 7, 15, 2, 2, 807, 812, 5, 16, 9, 2, 808,
	809, 5, 16, 9, 2, 809, 810, 5, 114, 58, 2, 810, 812, 3, 2, 2, 2, 811, 778,
	3, 2, 2, 2, 811, 779, 3, 2, 2, 2, 811, 781, 3, 2, 2, 2, 811, 788, 3, 2,
	2, 2, 811, 799, 3, 2, 2, 2, 811, 805, 3, 2, 2, 2, 811, 808, 3, 2, 2, 2,
	812, 115, 3, 2, 2, 2, 64, 124, 147, 183, 193, 199, 203, 226, 247, 252,
	267, 272, 277, 284, 303, 310, 320, 328, 355, 362, 374, 400, 417, 419, 427,
	441, 446, 448, 474, 479, 484, 491, 497, 502, 506, 510, 515, 524, 532, 544,
	549, 554, 561, 568, 585, 587, 595, 604, 618, 620, 628, 647, 657, 683, 690,
	698, 710, 721, 746, 748, 763, 791, 811,
}
var literalNames = []string{
	"", "'implement'", "';'", "':='", "'('", "')'", "':'", "'con'", "'import'",
	"'type'", "'include'", "','", "'array'", "'of'", "'list'", "'chan'", "'ref'",
	"'->'", "'fn'", "'self'", "'refopt'", "'nil'", "'module'", "'{'", "'}'",
	"'adt'", "'cyclicopt'", "'pick'", "'=>'", "'or'", "'.'", "'if'", "'else'",
	"'while'", "'do'", "'for'", "'case'", "'alt'", "'break'", "'continue'",
	"'return'", "'spawn'", "'exit'", "'to'", "'['", "']'", "'++'", "'--'",
	"'<-'", "'load'", "", "", "", "", "", "'='", "", "", "'*'", "'+'", "'-'",
}
var symbolicNames = []string{
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "STRING", "IDENTIFIER",
	"REAL", "INT", "ASSIGNMENT_OPERATOR", "ASSIGN", "BINARY_OPERATOR", "MONADICOPERATOR",
	"MULT", "PLUS", "MINUS", "COMMENT", "WS",
}

var ruleNames = []string{
	"program", "top_declaration_sequence", "top_declaration", "declaration",
	"identifier_list", "expression_list", "type_", "data_type", "string_",
	"real_", "byte_", "int_", "big", "tuple_type", "data_type_list", "adt_type",
	"module_type", "module_qualified_type", "type_name", "function_type", "function_arg_ret",
	"formal_arg_list", "formal_arg", "nil_or_D_list", "nil_or_D", "module_declaration",
	"mod_member_list", "mod_member", "adt_declaration", "adt_member_list",
	"adt_member", "pick_member_list", "pick_tag_list", "function_definition",
	"function_name_part", "statements_", "statement", "label", "qual_statement_sequence",
	"qual_list", "qualifier", "pqual_statement_sequence", "pqual_list", "pqualifier",
	"expression", "binary_expression", "lvalue_expression", "lvalue_expression_list",
	"init_list", "term", "real_constant", "string_constant", "element", "send_expression",
	"declare_expression", "load_expression", "monadic_expression",
}

type limboParser struct {
	*antlr.BaseParser
}

// NewlimboParser produces a new parser instance for the optional input antlr.TokenStream.
//
// The *limboParser instance produced may be reused by calling the SetInputStream method.
// The initial parser configuration is expensive to construct, and the object is not thread-safe;
// however, if used within a Golang sync.Pool, the construction cost amortizes well and the
// objects can be used in a thread-safe manner.
func NewlimboParser(input antlr.TokenStream) *limboParser {
	this := new(limboParser)
	deserializer := antlr.NewATNDeserializer(nil)
	deserializedATN := deserializer.DeserializeFromUInt16(parserATN)
	decisionToDFA := make([]*antlr.DFA, len(deserializedATN.DecisionToState))
	for index, ds := range deserializedATN.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(ds, index)
	}
	this.BaseParser = antlr.NewBaseParser(input)

	this.Interpreter = antlr.NewParserATNSimulator(this, deserializedATN, decisionToDFA, antlr.NewPredictionContextCache())
	this.RuleNames = ruleNames
	this.LiteralNames = literalNames
	this.SymbolicNames = symbolicNames
	this.GrammarFileName = "limbo.g4"

	return this
}

// limboParser tokens.
const (
	limboParserEOF                 = antlr.TokenEOF
	limboParserT__0                = 1
	limboParserT__1                = 2
	limboParserT__2                = 3
	limboParserT__3                = 4
	limboParserT__4                = 5
	limboParserT__5                = 6
	limboParserT__6                = 7
	limboParserT__7                = 8
	limboParserT__8                = 9
	limboParserT__9                = 10
	limboParserT__10               = 11
	limboParserT__11               = 12
	limboParserT__12               = 13
	limboParserT__13               = 14
	limboParserT__14               = 15
	limboParserT__15               = 16
	limboParserT__16               = 17
	limboParserT__17               = 18
	limboParserT__18               = 19
	limboParserT__19               = 20
	limboParserT__20               = 21
	limboParserT__21               = 22
	limboParserT__22               = 23
	limboParserT__23               = 24
	limboParserT__24               = 25
	limboParserT__25               = 26
	limboParserT__26               = 27
	limboParserT__27               = 28
	limboParserT__28               = 29
	limboParserT__29               = 30
	limboParserT__30               = 31
	limboParserT__31               = 32
	limboParserT__32               = 33
	limboParserT__33               = 34
	limboParserT__34               = 35
	limboParserT__35               = 36
	limboParserT__36               = 37
	limboParserT__37               = 38
	limboParserT__38               = 39
	limboParserT__39               = 40
	limboParserT__40               = 41
	limboParserT__41               = 42
	limboParserT__42               = 43
	limboParserT__43               = 44
	limboParserT__44               = 45
	limboParserT__45               = 46
	limboParserT__46               = 47
	limboParserT__47               = 48
	limboParserT__48               = 49
	limboParserSTRING              = 50
	limboParserIDENTIFIER          = 51
	limboParserREAL                = 52
	limboParserINT                 = 53
	limboParserASSIGNMENT_OPERATOR = 54
	limboParserASSIGN              = 55
	limboParserBINARY_OPERATOR     = 56
	limboParserMONADICOPERATOR     = 57
	limboParserMULT                = 58
	limboParserPLUS                = 59
	limboParserMINUS               = 60
	limboParserCOMMENT             = 61
	limboParserWS                  = 62
)

// limboParser rules.
const (
	limboParserRULE_program                  = 0
	limboParserRULE_top_declaration_sequence = 1
	limboParserRULE_top_declaration          = 2
	limboParserRULE_declaration              = 3
	limboParserRULE_identifier_list          = 4
	limboParserRULE_expression_list          = 5
	limboParserRULE_type_                    = 6
	limboParserRULE_data_type                = 7
	limboParserRULE_string_                  = 8
	limboParserRULE_real_                    = 9
	limboParserRULE_byte_                    = 10
	limboParserRULE_int_                     = 11
	limboParserRULE_big                      = 12
	limboParserRULE_tuple_type               = 13
	limboParserRULE_data_type_list           = 14
	limboParserRULE_adt_type                 = 15
	limboParserRULE_module_type              = 16
	limboParserRULE_module_qualified_type    = 17
	limboParserRULE_type_name                = 18
	limboParserRULE_function_type            = 19
	limboParserRULE_function_arg_ret         = 20
	limboParserRULE_formal_arg_list          = 21
	limboParserRULE_formal_arg               = 22
	limboParserRULE_nil_or_D_list            = 23
	limboParserRULE_nil_or_D                 = 24
	limboParserRULE_module_declaration       = 25
	limboParserRULE_mod_member_list          = 26
	limboParserRULE_mod_member               = 27
	limboParserRULE_adt_declaration          = 28
	limboParserRULE_adt_member_list          = 29
	limboParserRULE_adt_member               = 30
	limboParserRULE_pick_member_list         = 31
	limboParserRULE_pick_tag_list            = 32
	limboParserRULE_function_definition      = 33
	limboParserRULE_function_name_part       = 34
	limboParserRULE_statements_              = 35
	limboParserRULE_statement                = 36
	limboParserRULE_label                    = 37
	limboParserRULE_qual_statement_sequence  = 38
	limboParserRULE_qual_list                = 39
	limboParserRULE_qualifier                = 40
	limboParserRULE_pqual_statement_sequence = 41
	limboParserRULE_pqual_list               = 42
	limboParserRULE_pqualifier               = 43
	limboParserRULE_expression               = 44
	limboParserRULE_binary_expression        = 45
	limboParserRULE_lvalue_expression        = 46
	limboParserRULE_lvalue_expression_list   = 47
	limboParserRULE_init_list                = 48
	limboParserRULE_term                     = 49
	limboParserRULE_real_constant            = 50
	limboParserRULE_string_constant          = 51
	limboParserRULE_element                  = 52
	limboParserRULE_send_expression          = 53
	limboParserRULE_declare_expression       = 54
	limboParserRULE_load_expression          = 55
	limboParserRULE_monadic_expression       = 56
)

// IProgramContext is an interface to support dynamic dispatch.
type IProgramContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsProgramContext differentiates from other interfaces.
	IsProgramContext()
}

type ProgramContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProgramContext() *ProgramContext {
	var p = new(ProgramContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = limboParserRULE_program
	return p
}

func (*ProgramContext) IsProgramContext() {}

func NewProgramContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ProgramContext {
	var p = new(ProgramContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = limboParserRULE_program

	return p
}

func (s *ProgramContext) GetParser() antlr.Parser { return s.parser }

func (s *ProgramContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(limboParserIDENTIFIER, 0)
}

func (s *ProgramContext) Top_declaration_sequence() ITop_declaration_sequenceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITop_declaration_sequenceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITop_declaration_sequenceContext)
}

func (s *ProgramContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ProgramContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ProgramContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.EnterProgram(s)
	}
}

func (s *ProgramContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.ExitProgram(s)
	}
}

func (p *limboParser) Program() (localctx IProgramContext) {
	this := p
	_ = this

	localctx = NewProgramContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, limboParserRULE_program)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(114)
		p.Match(limboParserT__0)
	}
	{
		p.SetState(115)
		p.Match(limboParserIDENTIFIER)
	}
	{
		p.SetState(116)
		p.Match(limboParserT__1)
	}
	{
		p.SetState(117)
		p.Top_declaration_sequence()
	}

	return localctx
}

// ITop_declaration_sequenceContext is an interface to support dynamic dispatch.
type ITop_declaration_sequenceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTop_declaration_sequenceContext differentiates from other interfaces.
	IsTop_declaration_sequenceContext()
}

type Top_declaration_sequenceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTop_declaration_sequenceContext() *Top_declaration_sequenceContext {
	var p = new(Top_declaration_sequenceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = limboParserRULE_top_declaration_sequence
	return p
}

func (*Top_declaration_sequenceContext) IsTop_declaration_sequenceContext() {}

func NewTop_declaration_sequenceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Top_declaration_sequenceContext {
	var p = new(Top_declaration_sequenceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = limboParserRULE_top_declaration_sequence

	return p
}

func (s *Top_declaration_sequenceContext) GetParser() antlr.Parser { return s.parser }

func (s *Top_declaration_sequenceContext) AllTop_declaration() []ITop_declarationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITop_declarationContext)(nil)).Elem())
	var tst = make([]ITop_declarationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITop_declarationContext)
		}
	}

	return tst
}

func (s *Top_declaration_sequenceContext) Top_declaration(i int) ITop_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITop_declarationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITop_declarationContext)
}

func (s *Top_declaration_sequenceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Top_declaration_sequenceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Top_declaration_sequenceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.EnterTop_declaration_sequence(s)
	}
}

func (s *Top_declaration_sequenceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.ExitTop_declaration_sequence(s)
	}
}

func (p *limboParser) Top_declaration_sequence() (localctx ITop_declaration_sequenceContext) {
	this := p
	_ = this

	localctx = NewTop_declaration_sequenceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, limboParserRULE_top_declaration_sequence)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(120)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == limboParserT__3 || _la == limboParserT__9 || _la == limboParserIDENTIFIER {
		{
			p.SetState(119)
			p.Top_declaration()
		}

		p.SetState(122)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ITop_declarationContext is an interface to support dynamic dispatch.
type ITop_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTop_declarationContext differentiates from other interfaces.
	IsTop_declarationContext()
}

type Top_declarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTop_declarationContext() *Top_declarationContext {
	var p = new(Top_declarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = limboParserRULE_top_declaration
	return p
}

func (*Top_declarationContext) IsTop_declarationContext() {}

func NewTop_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Top_declarationContext {
	var p = new(Top_declarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = limboParserRULE_top_declaration

	return p
}

func (s *Top_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Top_declarationContext) Declaration() IDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclarationContext)
}

func (s *Top_declarationContext) Identifier_list() IIdentifier_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_listContext)
}

func (s *Top_declarationContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Top_declarationContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(limboParserASSIGN, 0)
}

func (s *Top_declarationContext) Module_declaration() IModule_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IModule_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IModule_declarationContext)
}

func (s *Top_declarationContext) Function_definition() IFunction_definitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_definitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_definitionContext)
}

func (s *Top_declarationContext) Adt_declaration() IAdt_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAdt_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAdt_declarationContext)
}

func (s *Top_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Top_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Top_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.EnterTop_declaration(s)
	}
}

func (s *Top_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.ExitTop_declaration(s)
	}
}

func (p *limboParser) Top_declaration() (localctx ITop_declarationContext) {
	this := p
	_ = this

	localctx = NewTop_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, limboParserRULE_top_declaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(145)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(124)
			p.Declaration()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(125)
			p.identifier_list(0)
		}
		{
			p.SetState(126)
			p.Match(limboParserT__2)
		}
		{
			p.SetState(127)
			p.Expression()
		}
		{
			p.SetState(128)
			p.Match(limboParserT__1)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(130)
			p.identifier_list(0)
		}
		{
			p.SetState(131)
			p.Match(limboParserASSIGN)
		}
		{
			p.SetState(132)
			p.Expression()
		}
		{
			p.SetState(133)
			p.Match(limboParserT__1)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(135)
			p.Match(limboParserT__3)
		}
		{
			p.SetState(136)
			p.identifier_list(0)
		}
		{
			p.SetState(137)
			p.Match(limboParserT__4)
		}
		{
			p.SetState(138)
			p.Match(limboParserT__2)
		}
		{
			p.SetState(139)
			p.Expression()
		}
		{
			p.SetState(140)
			p.Match(limboParserT__1)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(142)
			p.Module_declaration()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(143)
			p.Function_definition()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(144)
			p.Adt_declaration()
		}

	}

	return localctx
}

// IDeclarationContext is an interface to support dynamic dispatch.
type IDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclarationContext differentiates from other interfaces.
	IsDeclarationContext()
}

type DeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclarationContext() *DeclarationContext {
	var p = new(DeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = limboParserRULE_declaration
	return p
}

func (*DeclarationContext) IsDeclarationContext() {}

func NewDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclarationContext {
	var p = new(DeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = limboParserRULE_declaration

	return p
}

func (s *DeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclarationContext) Identifier_list() IIdentifier_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_listContext)
}

func (s *DeclarationContext) Type_() IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *DeclarationContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(limboParserASSIGN, 0)
}

func (s *DeclarationContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *DeclarationContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(limboParserIDENTIFIER, 0)
}

func (s *DeclarationContext) String_constant() IString_constantContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_constantContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IString_constantContext)
}

func (s *DeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.EnterDeclaration(s)
	}
}

func (s *DeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.ExitDeclaration(s)
	}
}

func (p *limboParser) Declaration() (localctx IDeclarationContext) {
	this := p
	_ = this

	localctx = NewDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, limboParserRULE_declaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(181)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 2, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(147)
			p.identifier_list(0)
		}
		{
			p.SetState(148)
			p.Match(limboParserT__5)
		}
		{
			p.SetState(149)
			p.Type_()
		}
		{
			p.SetState(150)
			p.Match(limboParserT__1)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(152)
			p.identifier_list(0)
		}
		{
			p.SetState(153)
			p.Match(limboParserT__5)
		}
		{
			p.SetState(154)
			p.Type_()
		}
		{
			p.SetState(155)
			p.Match(limboParserASSIGN)
		}
		{
			p.SetState(156)
			p.Expression()
		}
		{
			p.SetState(157)
			p.Match(limboParserT__1)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(159)
			p.identifier_list(0)
		}
		{
			p.SetState(160)
			p.Match(limboParserT__5)
		}
		{
			p.SetState(161)
			p.Match(limboParserT__6)
		}
		{
			p.SetState(162)
			p.Expression()
		}
		{
			p.SetState(163)
			p.Match(limboParserT__1)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(165)
			p.identifier_list(0)
		}
		{
			p.SetState(166)
			p.Match(limboParserT__5)
		}
		{
			p.SetState(167)
			p.Match(limboParserT__7)
		}
		{
			p.SetState(168)
			p.Match(limboParserIDENTIFIER)
		}
		{
			p.SetState(169)
			p.Match(limboParserT__1)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(171)
			p.identifier_list(0)
		}
		{
			p.SetState(172)
			p.Match(limboParserT__5)
		}
		{
			p.SetState(173)
			p.Match(limboParserT__8)
		}
		{
			p.SetState(174)
			p.Type_()
		}
		{
			p.SetState(175)
			p.Match(limboParserT__1)
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(177)
			p.Match(limboParserT__9)
		}
		{
			p.SetState(178)
			p.String_constant()
		}
		{
			p.SetState(179)
			p.Match(limboParserT__1)
		}

	}

	return localctx
}

// IIdentifier_listContext is an interface to support dynamic dispatch.
type IIdentifier_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdentifier_listContext differentiates from other interfaces.
	IsIdentifier_listContext()
}

type Identifier_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifier_listContext() *Identifier_listContext {
	var p = new(Identifier_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = limboParserRULE_identifier_list
	return p
}

func (*Identifier_listContext) IsIdentifier_listContext() {}

func NewIdentifier_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Identifier_listContext {
	var p = new(Identifier_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = limboParserRULE_identifier_list

	return p
}

func (s *Identifier_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Identifier_listContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(limboParserIDENTIFIER, 0)
}

func (s *Identifier_listContext) Identifier_list() IIdentifier_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_listContext)
}

func (s *Identifier_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Identifier_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Identifier_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.EnterIdentifier_list(s)
	}
}

func (s *Identifier_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.ExitIdentifier_list(s)
	}
}

func (p *limboParser) Identifier_list() (localctx IIdentifier_listContext) {
	return p.identifier_list(0)
}

func (p *limboParser) identifier_list(_p int) (localctx IIdentifier_listContext) {
	this := p
	_ = this

	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewIdentifier_listContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IIdentifier_listContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 8
	p.EnterRecursionRule(localctx, 8, limboParserRULE_identifier_list, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(184)
		p.Match(limboParserIDENTIFIER)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(191)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 3, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewIdentifier_listContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, limboParserRULE_identifier_list)
			p.SetState(186)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(187)
				p.Match(limboParserT__10)
			}
			{
				p.SetState(188)
				p.Match(limboParserIDENTIFIER)
			}

		}
		p.SetState(193)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 3, p.GetParserRuleContext())
	}

	return localctx
}

// IExpression_listContext is an interface to support dynamic dispatch.
type IExpression_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpression_listContext differentiates from other interfaces.
	IsExpression_listContext()
}

type Expression_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpression_listContext() *Expression_listContext {
	var p = new(Expression_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = limboParserRULE_expression_list
	return p
}

func (*Expression_listContext) IsExpression_listContext() {}

func NewExpression_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Expression_listContext {
	var p = new(Expression_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = limboParserRULE_expression_list

	return p
}

func (s *Expression_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Expression_listContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *Expression_listContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Expression_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expression_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Expression_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.EnterExpression_list(s)
	}
}

func (s *Expression_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.ExitExpression_list(s)
	}
}

func (p *limboParser) Expression_list() (localctx IExpression_listContext) {
	this := p
	_ = this

	localctx = NewExpression_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, limboParserRULE_expression_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(195)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<limboParserT__3)|(1<<limboParserT__11)|(1<<limboParserT__13)|(1<<limboParserT__14)|(1<<limboParserT__15)|(1<<limboParserT__20))) != 0) || (((_la-49)&-(0x1f+1)) == 0 && ((1<<uint((_la-49)))&((1<<(limboParserT__48-49))|(1<<(limboParserSTRING-49))|(1<<(limboParserIDENTIFIER-49))|(1<<(limboParserREAL-49))|(1<<(limboParserINT-49))|(1<<(limboParserMONADICOPERATOR-49))|(1<<(limboParserMULT-49)))) != 0) {
		{
			p.SetState(194)
			p.Expression()
		}

		p.SetState(197)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IType_Context is an interface to support dynamic dispatch.
type IType_Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsType_Context differentiates from other interfaces.
	IsType_Context()
}

type Type_Context struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyType_Context() *Type_Context {
	var p = new(Type_Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = limboParserRULE_type_
	return p
}

func (*Type_Context) IsType_Context() {}

func NewType_Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Type_Context {
	var p = new(Type_Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = limboParserRULE_type_

	return p
}

func (s *Type_Context) GetParser() antlr.Parser { return s.parser }

func (s *Type_Context) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Type_Context) Function_type() IFunction_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_typeContext)
}

func (s *Type_Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Type_Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Type_Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.EnterType_(s)
	}
}

func (s *Type_Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.ExitType_(s)
	}
}

func (p *limboParser) Type_() (localctx IType_Context) {
	this := p
	_ = this

	localctx = NewType_Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, limboParserRULE_type_)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(201)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case limboParserT__3, limboParserT__11, limboParserT__13, limboParserT__14, limboParserT__15, limboParserSTRING, limboParserIDENTIFIER, limboParserREAL, limboParserINT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(199)
			p.Data_type()
		}

	case limboParserT__17:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(200)
			p.Function_type()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IData_typeContext is an interface to support dynamic dispatch.
type IData_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsData_typeContext differentiates from other interfaces.
	IsData_typeContext()
}

type Data_typeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyData_typeContext() *Data_typeContext {
	var p = new(Data_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = limboParserRULE_data_type
	return p
}

func (*Data_typeContext) IsData_typeContext() {}

func NewData_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Data_typeContext {
	var p = new(Data_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = limboParserRULE_data_type

	return p
}

func (s *Data_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Data_typeContext) Byte_() IByte_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IByte_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IByte_Context)
}

func (s *Data_typeContext) Int_() IInt_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInt_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInt_Context)
}

func (s *Data_typeContext) Big() IBigContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBigContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBigContext)
}

func (s *Data_typeContext) Real_() IReal_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReal_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReal_Context)
}

func (s *Data_typeContext) String_() IString_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IString_Context)
}

func (s *Data_typeContext) Tuple_type() ITuple_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITuple_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITuple_typeContext)
}

func (s *Data_typeContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Data_typeContext) Adt_type() IAdt_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAdt_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAdt_typeContext)
}

func (s *Data_typeContext) Module_type() IModule_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IModule_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IModule_typeContext)
}

func (s *Data_typeContext) Module_qualified_type() IModule_qualified_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IModule_qualified_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IModule_qualified_typeContext)
}

func (s *Data_typeContext) Type_name() IType_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_nameContext)
}

func (s *Data_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Data_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Data_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.EnterData_type(s)
	}
}

func (s *Data_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.ExitData_type(s)
	}
}

func (p *limboParser) Data_type() (localctx IData_typeContext) {
	this := p
	_ = this

	localctx = NewData_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, limboParserRULE_data_type)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(224)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 6, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(203)
			p.Byte_()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(204)
			p.Int_()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(205)
			p.Big()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(206)
			p.Real_()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(207)
			p.String_()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(208)
			p.Tuple_type()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(209)
			p.Match(limboParserT__11)
		}
		{
			p.SetState(210)
			p.Match(limboParserT__12)
		}
		{
			p.SetState(211)
			p.Data_type()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(212)
			p.Match(limboParserT__13)
		}
		{
			p.SetState(213)
			p.Match(limboParserT__12)
		}
		{
			p.SetState(214)
			p.Data_type()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(215)
			p.Match(limboParserT__14)
		}
		{
			p.SetState(216)
			p.Match(limboParserT__12)
		}
		{
			p.SetState(217)
			p.Data_type()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(218)
			p.Adt_type()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(219)
			p.Match(limboParserT__15)
		}
		{
			p.SetState(220)
			p.Adt_type()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(221)
			p.Module_type()
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(222)
			p.Module_qualified_type()
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(223)
			p.Type_name()
		}

	}

	return localctx
}

// IString_Context is an interface to support dynamic dispatch.
type IString_Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsString_Context differentiates from other interfaces.
	IsString_Context()
}

type String_Context struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyString_Context() *String_Context {
	var p = new(String_Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = limboParserRULE_string_
	return p
}

func (*String_Context) IsString_Context() {}

func NewString_Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *String_Context {
	var p = new(String_Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = limboParserRULE_string_

	return p
}

func (s *String_Context) GetParser() antlr.Parser { return s.parser }

func (s *String_Context) STRING() antlr.TerminalNode {
	return s.GetToken(limboParserSTRING, 0)
}

func (s *String_Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *String_Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *String_Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.EnterString_(s)
	}
}

func (s *String_Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.ExitString_(s)
	}
}

func (p *limboParser) String_() (localctx IString_Context) {
	this := p
	_ = this

	localctx = NewString_Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, limboParserRULE_string_)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(226)
		p.Match(limboParserSTRING)
	}

	return localctx
}

// IReal_Context is an interface to support dynamic dispatch.
type IReal_Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReal_Context differentiates from other interfaces.
	IsReal_Context()
}

type Real_Context struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReal_Context() *Real_Context {
	var p = new(Real_Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = limboParserRULE_real_
	return p
}

func (*Real_Context) IsReal_Context() {}

func NewReal_Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Real_Context {
	var p = new(Real_Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = limboParserRULE_real_

	return p
}

func (s *Real_Context) GetParser() antlr.Parser { return s.parser }

func (s *Real_Context) REAL() antlr.TerminalNode {
	return s.GetToken(limboParserREAL, 0)
}

func (s *Real_Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Real_Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Real_Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.EnterReal_(s)
	}
}

func (s *Real_Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.ExitReal_(s)
	}
}

func (p *limboParser) Real_() (localctx IReal_Context) {
	this := p
	_ = this

	localctx = NewReal_Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, limboParserRULE_real_)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(228)
		p.Match(limboParserREAL)
	}

	return localctx
}

// IByte_Context is an interface to support dynamic dispatch.
type IByte_Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsByte_Context differentiates from other interfaces.
	IsByte_Context()
}

type Byte_Context struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyByte_Context() *Byte_Context {
	var p = new(Byte_Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = limboParserRULE_byte_
	return p
}

func (*Byte_Context) IsByte_Context() {}

func NewByte_Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Byte_Context {
	var p = new(Byte_Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = limboParserRULE_byte_

	return p
}

func (s *Byte_Context) GetParser() antlr.Parser { return s.parser }

func (s *Byte_Context) INT() antlr.TerminalNode {
	return s.GetToken(limboParserINT, 0)
}

func (s *Byte_Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Byte_Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Byte_Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.EnterByte_(s)
	}
}

func (s *Byte_Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.ExitByte_(s)
	}
}

func (p *limboParser) Byte_() (localctx IByte_Context) {
	this := p
	_ = this

	localctx = NewByte_Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, limboParserRULE_byte_)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(230)
		p.Match(limboParserINT)
	}

	return localctx
}

// IInt_Context is an interface to support dynamic dispatch.
type IInt_Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInt_Context differentiates from other interfaces.
	IsInt_Context()
}

type Int_Context struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInt_Context() *Int_Context {
	var p = new(Int_Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = limboParserRULE_int_
	return p
}

func (*Int_Context) IsInt_Context() {}

func NewInt_Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Int_Context {
	var p = new(Int_Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = limboParserRULE_int_

	return p
}

func (s *Int_Context) GetParser() antlr.Parser { return s.parser }

func (s *Int_Context) INT() antlr.TerminalNode {
	return s.GetToken(limboParserINT, 0)
}

func (s *Int_Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Int_Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Int_Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.EnterInt_(s)
	}
}

func (s *Int_Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.ExitInt_(s)
	}
}

func (p *limboParser) Int_() (localctx IInt_Context) {
	this := p
	_ = this

	localctx = NewInt_Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, limboParserRULE_int_)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(232)
		p.Match(limboParserINT)
	}

	return localctx
}

// IBigContext is an interface to support dynamic dispatch.
type IBigContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBigContext differentiates from other interfaces.
	IsBigContext()
}

type BigContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBigContext() *BigContext {
	var p = new(BigContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = limboParserRULE_big
	return p
}

func (*BigContext) IsBigContext() {}

func NewBigContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BigContext {
	var p = new(BigContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = limboParserRULE_big

	return p
}

func (s *BigContext) GetParser() antlr.Parser { return s.parser }

func (s *BigContext) INT() antlr.TerminalNode {
	return s.GetToken(limboParserINT, 0)
}

func (s *BigContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BigContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BigContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.EnterBig(s)
	}
}

func (s *BigContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.ExitBig(s)
	}
}

func (p *limboParser) Big() (localctx IBigContext) {
	this := p
	_ = this

	localctx = NewBigContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, limboParserRULE_big)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(234)
		p.Match(limboParserINT)
	}

	return localctx
}

// ITuple_typeContext is an interface to support dynamic dispatch.
type ITuple_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTuple_typeContext differentiates from other interfaces.
	IsTuple_typeContext()
}

type Tuple_typeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTuple_typeContext() *Tuple_typeContext {
	var p = new(Tuple_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = limboParserRULE_tuple_type
	return p
}

func (*Tuple_typeContext) IsTuple_typeContext() {}

func NewTuple_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Tuple_typeContext {
	var p = new(Tuple_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = limboParserRULE_tuple_type

	return p
}

func (s *Tuple_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Tuple_typeContext) Data_type_list() IData_type_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_type_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_type_listContext)
}

func (s *Tuple_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Tuple_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Tuple_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.EnterTuple_type(s)
	}
}

func (s *Tuple_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.ExitTuple_type(s)
	}
}

func (p *limboParser) Tuple_type() (localctx ITuple_typeContext) {
	this := p
	_ = this

	localctx = NewTuple_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, limboParserRULE_tuple_type)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(236)
		p.Match(limboParserT__3)
	}
	{
		p.SetState(237)
		p.Data_type_list()
	}
	{
		p.SetState(238)
		p.Match(limboParserT__4)
	}

	return localctx
}

// IData_type_listContext is an interface to support dynamic dispatch.
type IData_type_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsData_type_listContext differentiates from other interfaces.
	IsData_type_listContext()
}

type Data_type_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyData_type_listContext() *Data_type_listContext {
	var p = new(Data_type_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = limboParserRULE_data_type_list
	return p
}

func (*Data_type_listContext) IsData_type_listContext() {}

func NewData_type_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Data_type_listContext {
	var p = new(Data_type_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = limboParserRULE_data_type_list

	return p
}

func (s *Data_type_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Data_type_listContext) AllData_type() []IData_typeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IData_typeContext)(nil)).Elem())
	var tst = make([]IData_typeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IData_typeContext)
		}
	}

	return tst
}

func (s *Data_type_listContext) Data_type(i int) IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Data_type_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Data_type_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Data_type_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.EnterData_type_list(s)
	}
}

func (s *Data_type_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.ExitData_type_list(s)
	}
}

func (p *limboParser) Data_type_list() (localctx IData_type_listContext) {
	this := p
	_ = this

	localctx = NewData_type_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, limboParserRULE_data_type_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(240)
		p.Data_type()
	}
	p.SetState(245)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == limboParserT__10 {
		{
			p.SetState(241)
			p.Match(limboParserT__10)
		}
		{
			p.SetState(242)
			p.Data_type()
		}

		p.SetState(247)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IAdt_typeContext is an interface to support dynamic dispatch.
type IAdt_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAdt_typeContext differentiates from other interfaces.
	IsAdt_typeContext()
}

type Adt_typeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAdt_typeContext() *Adt_typeContext {
	var p = new(Adt_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = limboParserRULE_adt_type
	return p
}

func (*Adt_typeContext) IsAdt_typeContext() {}

func NewAdt_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Adt_typeContext {
	var p = new(Adt_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = limboParserRULE_adt_type

	return p
}

func (s *Adt_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Adt_typeContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(limboParserIDENTIFIER, 0)
}

func (s *Adt_typeContext) Module_qualified_type() IModule_qualified_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IModule_qualified_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IModule_qualified_typeContext)
}

func (s *Adt_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Adt_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Adt_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.EnterAdt_type(s)
	}
}

func (s *Adt_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.ExitAdt_type(s)
	}
}

func (p *limboParser) Adt_type() (localctx IAdt_typeContext) {
	this := p
	_ = this

	localctx = NewAdt_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, limboParserRULE_adt_type)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(250)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 8, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(248)
			p.Match(limboParserIDENTIFIER)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(249)
			p.Module_qualified_type()
		}

	}

	return localctx
}

// IModule_typeContext is an interface to support dynamic dispatch.
type IModule_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsModule_typeContext differentiates from other interfaces.
	IsModule_typeContext()
}

type Module_typeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyModule_typeContext() *Module_typeContext {
	var p = new(Module_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = limboParserRULE_module_type
	return p
}

func (*Module_typeContext) IsModule_typeContext() {}

func NewModule_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Module_typeContext {
	var p = new(Module_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = limboParserRULE_module_type

	return p
}

func (s *Module_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Module_typeContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(limboParserIDENTIFIER, 0)
}

func (s *Module_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Module_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Module_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.EnterModule_type(s)
	}
}

func (s *Module_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.ExitModule_type(s)
	}
}

func (p *limboParser) Module_type() (localctx IModule_typeContext) {
	this := p
	_ = this

	localctx = NewModule_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, limboParserRULE_module_type)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(252)
		p.Match(limboParserIDENTIFIER)
	}

	return localctx
}

// IModule_qualified_typeContext is an interface to support dynamic dispatch.
type IModule_qualified_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsModule_qualified_typeContext differentiates from other interfaces.
	IsModule_qualified_typeContext()
}

type Module_qualified_typeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyModule_qualified_typeContext() *Module_qualified_typeContext {
	var p = new(Module_qualified_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = limboParserRULE_module_qualified_type
	return p
}

func (*Module_qualified_typeContext) IsModule_qualified_typeContext() {}

func NewModule_qualified_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Module_qualified_typeContext {
	var p = new(Module_qualified_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = limboParserRULE_module_qualified_type

	return p
}

func (s *Module_qualified_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Module_qualified_typeContext) AllIDENTIFIER() []antlr.TerminalNode {
	return s.GetTokens(limboParserIDENTIFIER)
}

func (s *Module_qualified_typeContext) IDENTIFIER(i int) antlr.TerminalNode {
	return s.GetToken(limboParserIDENTIFIER, i)
}

func (s *Module_qualified_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Module_qualified_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Module_qualified_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.EnterModule_qualified_type(s)
	}
}

func (s *Module_qualified_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.ExitModule_qualified_type(s)
	}
}

func (p *limboParser) Module_qualified_type() (localctx IModule_qualified_typeContext) {
	this := p
	_ = this

	localctx = NewModule_qualified_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, limboParserRULE_module_qualified_type)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(254)
		p.Match(limboParserIDENTIFIER)
	}
	{
		p.SetState(255)
		p.Match(limboParserT__16)
	}
	{
		p.SetState(256)
		p.Match(limboParserIDENTIFIER)
	}

	return localctx
}

// IType_nameContext is an interface to support dynamic dispatch.
type IType_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsType_nameContext differentiates from other interfaces.
	IsType_nameContext()
}

type Type_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyType_nameContext() *Type_nameContext {
	var p = new(Type_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = limboParserRULE_type_name
	return p
}

func (*Type_nameContext) IsType_nameContext() {}

func NewType_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Type_nameContext {
	var p = new(Type_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = limboParserRULE_type_name

	return p
}

func (s *Type_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Type_nameContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(limboParserIDENTIFIER, 0)
}

func (s *Type_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Type_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Type_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.EnterType_name(s)
	}
}

func (s *Type_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.ExitType_name(s)
	}
}

func (p *limboParser) Type_name() (localctx IType_nameContext) {
	this := p
	_ = this

	localctx = NewType_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, limboParserRULE_type_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(258)
		p.Match(limboParserIDENTIFIER)
	}

	return localctx
}

// IFunction_typeContext is an interface to support dynamic dispatch.
type IFunction_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunction_typeContext differentiates from other interfaces.
	IsFunction_typeContext()
}

type Function_typeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunction_typeContext() *Function_typeContext {
	var p = new(Function_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = limboParserRULE_function_type
	return p
}

func (*Function_typeContext) IsFunction_typeContext() {}

func NewFunction_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_typeContext {
	var p = new(Function_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = limboParserRULE_function_type

	return p
}

func (s *Function_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Function_typeContext) Function_arg_ret() IFunction_arg_retContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_arg_retContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_arg_retContext)
}

func (s *Function_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Function_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.EnterFunction_type(s)
	}
}

func (s *Function_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.ExitFunction_type(s)
	}
}

func (p *limboParser) Function_type() (localctx IFunction_typeContext) {
	this := p
	_ = this

	localctx = NewFunction_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, limboParserRULE_function_type)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(260)
		p.Match(limboParserT__17)
	}
	{
		p.SetState(261)
		p.Function_arg_ret()
	}

	return localctx
}

// IFunction_arg_retContext is an interface to support dynamic dispatch.
type IFunction_arg_retContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunction_arg_retContext differentiates from other interfaces.
	IsFunction_arg_retContext()
}

type Function_arg_retContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunction_arg_retContext() *Function_arg_retContext {
	var p = new(Function_arg_retContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = limboParserRULE_function_arg_ret
	return p
}

func (*Function_arg_retContext) IsFunction_arg_retContext() {}

func NewFunction_arg_retContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_arg_retContext {
	var p = new(Function_arg_retContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = limboParserRULE_function_arg_ret

	return p
}

func (s *Function_arg_retContext) GetParser() antlr.Parser { return s.parser }

func (s *Function_arg_retContext) Formal_arg_list() IFormal_arg_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFormal_arg_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFormal_arg_listContext)
}

func (s *Function_arg_retContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Function_arg_retContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_arg_retContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Function_arg_retContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.EnterFunction_arg_ret(s)
	}
}

func (s *Function_arg_retContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.ExitFunction_arg_ret(s)
	}
}

func (p *limboParser) Function_arg_ret() (localctx IFunction_arg_retContext) {
	this := p
	_ = this

	localctx = NewFunction_arg_retContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, limboParserRULE_function_arg_ret)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(275)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 11, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(263)
			p.Match(limboParserT__3)
		}
		p.SetState(265)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == limboParserT__20 || _la == limboParserIDENTIFIER || _la == limboParserMULT {
			{
				p.SetState(264)
				p.Formal_arg_list()
			}

		}
		{
			p.SetState(267)
			p.Match(limboParserT__4)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(268)
			p.Match(limboParserT__3)
		}
		p.SetState(270)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == limboParserT__20 || _la == limboParserIDENTIFIER || _la == limboParserMULT {
			{
				p.SetState(269)
				p.Formal_arg_list()
			}

		}
		{
			p.SetState(272)
			p.Match(limboParserT__4)
		}
		{
			p.SetState(273)
			p.Match(limboParserT__5)
		}
		{
			p.SetState(274)
			p.Data_type()
		}

	}

	return localctx
}

// IFormal_arg_listContext is an interface to support dynamic dispatch.
type IFormal_arg_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFormal_arg_listContext differentiates from other interfaces.
	IsFormal_arg_listContext()
}

type Formal_arg_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFormal_arg_listContext() *Formal_arg_listContext {
	var p = new(Formal_arg_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = limboParserRULE_formal_arg_list
	return p
}

func (*Formal_arg_listContext) IsFormal_arg_listContext() {}

func NewFormal_arg_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Formal_arg_listContext {
	var p = new(Formal_arg_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = limboParserRULE_formal_arg_list

	return p
}

func (s *Formal_arg_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Formal_arg_listContext) AllFormal_arg() []IFormal_argContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFormal_argContext)(nil)).Elem())
	var tst = make([]IFormal_argContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFormal_argContext)
		}
	}

	return tst
}

func (s *Formal_arg_listContext) Formal_arg(i int) IFormal_argContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFormal_argContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFormal_argContext)
}

func (s *Formal_arg_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Formal_arg_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Formal_arg_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.EnterFormal_arg_list(s)
	}
}

func (s *Formal_arg_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.ExitFormal_arg_list(s)
	}
}

func (p *limboParser) Formal_arg_list() (localctx IFormal_arg_listContext) {
	this := p
	_ = this

	localctx = NewFormal_arg_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, limboParserRULE_formal_arg_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(277)
		p.Formal_arg()
	}
	p.SetState(282)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == limboParserT__10 {
		{
			p.SetState(278)
			p.Match(limboParserT__10)
		}
		{
			p.SetState(279)
			p.Formal_arg()
		}

		p.SetState(284)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IFormal_argContext is an interface to support dynamic dispatch.
type IFormal_argContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFormal_argContext differentiates from other interfaces.
	IsFormal_argContext()
}

type Formal_argContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFormal_argContext() *Formal_argContext {
	var p = new(Formal_argContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = limboParserRULE_formal_arg
	return p
}

func (*Formal_argContext) IsFormal_argContext() {}

func NewFormal_argContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Formal_argContext {
	var p = new(Formal_argContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = limboParserRULE_formal_arg

	return p
}

func (s *Formal_argContext) GetParser() antlr.Parser { return s.parser }

func (s *Formal_argContext) Nil_or_D_list() INil_or_D_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INil_or_D_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INil_or_D_listContext)
}

func (s *Formal_argContext) Type_() IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *Formal_argContext) Nil_or_D() INil_or_DContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INil_or_DContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INil_or_DContext)
}

func (s *Formal_argContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(limboParserIDENTIFIER, 0)
}

func (s *Formal_argContext) MULT() antlr.TerminalNode {
	return s.GetToken(limboParserMULT, 0)
}

func (s *Formal_argContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Formal_argContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Formal_argContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.EnterFormal_arg(s)
	}
}

func (s *Formal_argContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.ExitFormal_arg(s)
	}
}

func (p *limboParser) Formal_arg() (localctx IFormal_argContext) {
	this := p
	_ = this

	localctx = NewFormal_argContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, limboParserRULE_formal_arg)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(301)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 13, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(285)
			p.Nil_or_D_list()
		}
		{
			p.SetState(286)
			p.Match(limboParserT__5)
		}
		{
			p.SetState(287)
			p.Type_()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(289)
			p.Nil_or_D()
		}
		{
			p.SetState(290)
			p.Match(limboParserT__5)
		}
		{
			p.SetState(291)
			p.Match(limboParserT__18)
		}
		{
			p.SetState(292)
			p.Match(limboParserT__19)
		}
		{
			p.SetState(293)
			p.Match(limboParserIDENTIFIER)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(295)
			p.Nil_or_D()
		}
		{
			p.SetState(296)
			p.Match(limboParserT__5)
		}
		{
			p.SetState(297)
			p.Match(limboParserT__18)
		}
		{
			p.SetState(298)
			p.Match(limboParserIDENTIFIER)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(300)
			p.Match(limboParserMULT)
		}

	}

	return localctx
}

// INil_or_D_listContext is an interface to support dynamic dispatch.
type INil_or_D_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNil_or_D_listContext differentiates from other interfaces.
	IsNil_or_D_listContext()
}

type Nil_or_D_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNil_or_D_listContext() *Nil_or_D_listContext {
	var p = new(Nil_or_D_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = limboParserRULE_nil_or_D_list
	return p
}

func (*Nil_or_D_listContext) IsNil_or_D_listContext() {}

func NewNil_or_D_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Nil_or_D_listContext {
	var p = new(Nil_or_D_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = limboParserRULE_nil_or_D_list

	return p
}

func (s *Nil_or_D_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Nil_or_D_listContext) AllNil_or_D() []INil_or_DContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*INil_or_DContext)(nil)).Elem())
	var tst = make([]INil_or_DContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(INil_or_DContext)
		}
	}

	return tst
}

func (s *Nil_or_D_listContext) Nil_or_D(i int) INil_or_DContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INil_or_DContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(INil_or_DContext)
}

func (s *Nil_or_D_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Nil_or_D_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Nil_or_D_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.EnterNil_or_D_list(s)
	}
}

func (s *Nil_or_D_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.ExitNil_or_D_list(s)
	}
}

func (p *limboParser) Nil_or_D_list() (localctx INil_or_D_listContext) {
	this := p
	_ = this

	localctx = NewNil_or_D_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, limboParserRULE_nil_or_D_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(303)
		p.Nil_or_D()
	}
	p.SetState(308)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == limboParserT__10 {
		{
			p.SetState(304)
			p.Match(limboParserT__10)
		}
		{
			p.SetState(305)
			p.Nil_or_D()
		}

		p.SetState(310)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// INil_or_DContext is an interface to support dynamic dispatch.
type INil_or_DContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNil_or_DContext differentiates from other interfaces.
	IsNil_or_DContext()
}

type Nil_or_DContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNil_or_DContext() *Nil_or_DContext {
	var p = new(Nil_or_DContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = limboParserRULE_nil_or_D
	return p
}

func (*Nil_or_DContext) IsNil_or_DContext() {}

func NewNil_or_DContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Nil_or_DContext {
	var p = new(Nil_or_DContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = limboParserRULE_nil_or_D

	return p
}

func (s *Nil_or_DContext) GetParser() antlr.Parser { return s.parser }

func (s *Nil_or_DContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(limboParserIDENTIFIER, 0)
}

func (s *Nil_or_DContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Nil_or_DContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Nil_or_DContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.EnterNil_or_D(s)
	}
}

func (s *Nil_or_DContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.ExitNil_or_D(s)
	}
}

func (p *limboParser) Nil_or_D() (localctx INil_or_DContext) {
	this := p
	_ = this

	localctx = NewNil_or_DContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, limboParserRULE_nil_or_D)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(311)
		_la = p.GetTokenStream().LA(1)

		if !(_la == limboParserT__20 || _la == limboParserIDENTIFIER) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IModule_declarationContext is an interface to support dynamic dispatch.
type IModule_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsModule_declarationContext differentiates from other interfaces.
	IsModule_declarationContext()
}

type Module_declarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyModule_declarationContext() *Module_declarationContext {
	var p = new(Module_declarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = limboParserRULE_module_declaration
	return p
}

func (*Module_declarationContext) IsModule_declarationContext() {}

func NewModule_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Module_declarationContext {
	var p = new(Module_declarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = limboParserRULE_module_declaration

	return p
}

func (s *Module_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Module_declarationContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(limboParserIDENTIFIER, 0)
}

func (s *Module_declarationContext) Mod_member_list() IMod_member_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMod_member_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMod_member_listContext)
}

func (s *Module_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Module_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Module_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.EnterModule_declaration(s)
	}
}

func (s *Module_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.ExitModule_declaration(s)
	}
}

func (p *limboParser) Module_declaration() (localctx IModule_declarationContext) {
	this := p
	_ = this

	localctx = NewModule_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, limboParserRULE_module_declaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(313)
		p.Match(limboParserIDENTIFIER)
	}
	{
		p.SetState(314)
		p.Match(limboParserT__5)
	}
	{
		p.SetState(315)
		p.Match(limboParserT__21)
	}
	{
		p.SetState(316)
		p.Match(limboParserT__22)
	}
	p.SetState(318)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == limboParserIDENTIFIER {
		{
			p.SetState(317)
			p.Mod_member_list()
		}

	}
	{
		p.SetState(320)
		p.Match(limboParserT__23)
	}
	{
		p.SetState(321)
		p.Match(limboParserT__1)
	}

	return localctx
}

// IMod_member_listContext is an interface to support dynamic dispatch.
type IMod_member_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMod_member_listContext differentiates from other interfaces.
	IsMod_member_listContext()
}

type Mod_member_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMod_member_listContext() *Mod_member_listContext {
	var p = new(Mod_member_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = limboParserRULE_mod_member_list
	return p
}

func (*Mod_member_listContext) IsMod_member_listContext() {}

func NewMod_member_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Mod_member_listContext {
	var p = new(Mod_member_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = limboParserRULE_mod_member_list

	return p
}

func (s *Mod_member_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Mod_member_listContext) AllMod_member() []IMod_memberContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMod_memberContext)(nil)).Elem())
	var tst = make([]IMod_memberContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMod_memberContext)
		}
	}

	return tst
}

func (s *Mod_member_listContext) Mod_member(i int) IMod_memberContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMod_memberContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMod_memberContext)
}

func (s *Mod_member_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Mod_member_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Mod_member_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.EnterMod_member_list(s)
	}
}

func (s *Mod_member_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.ExitMod_member_list(s)
	}
}

func (p *limboParser) Mod_member_list() (localctx IMod_member_listContext) {
	this := p
	_ = this

	localctx = NewMod_member_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, limboParserRULE_mod_member_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(324)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == limboParserIDENTIFIER {
		{
			p.SetState(323)
			p.Mod_member()
		}

		p.SetState(326)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IMod_memberContext is an interface to support dynamic dispatch.
type IMod_memberContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMod_memberContext differentiates from other interfaces.
	IsMod_memberContext()
}

type Mod_memberContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMod_memberContext() *Mod_memberContext {
	var p = new(Mod_memberContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = limboParserRULE_mod_member
	return p
}

func (*Mod_memberContext) IsMod_memberContext() {}

func NewMod_memberContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Mod_memberContext {
	var p = new(Mod_memberContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = limboParserRULE_mod_member

	return p
}

func (s *Mod_memberContext) GetParser() antlr.Parser { return s.parser }

func (s *Mod_memberContext) Identifier_list() IIdentifier_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_listContext)
}

func (s *Mod_memberContext) Function_type() IFunction_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_typeContext)
}

func (s *Mod_memberContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Mod_memberContext) Adt_declaration() IAdt_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAdt_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAdt_declarationContext)
}

func (s *Mod_memberContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Mod_memberContext) Type_() IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *Mod_memberContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Mod_memberContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Mod_memberContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.EnterMod_member(s)
	}
}

func (s *Mod_memberContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.ExitMod_member(s)
	}
}

func (p *limboParser) Mod_member() (localctx IMod_memberContext) {
	this := p
	_ = this

	localctx = NewMod_memberContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, limboParserRULE_mod_member)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(353)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 17, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(328)
			p.identifier_list(0)
		}
		{
			p.SetState(329)
			p.Match(limboParserT__5)
		}
		{
			p.SetState(330)
			p.Function_type()
		}
		{
			p.SetState(331)
			p.Match(limboParserT__1)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(333)
			p.identifier_list(0)
		}
		{
			p.SetState(334)
			p.Match(limboParserT__5)
		}
		{
			p.SetState(335)
			p.Data_type()
		}
		{
			p.SetState(336)
			p.Match(limboParserT__1)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(338)
			p.Adt_declaration()
		}
		{
			p.SetState(339)
			p.Match(limboParserT__1)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(341)
			p.identifier_list(0)
		}
		{
			p.SetState(342)
			p.Match(limboParserT__5)
		}
		{
			p.SetState(343)
			p.Match(limboParserT__6)
		}
		{
			p.SetState(344)
			p.Expression()
		}
		{
			p.SetState(345)
			p.Match(limboParserT__1)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(347)
			p.identifier_list(0)
		}
		{
			p.SetState(348)
			p.Match(limboParserT__5)
		}
		{
			p.SetState(349)
			p.Match(limboParserT__8)
		}
		{
			p.SetState(350)
			p.Type_()
		}
		{
			p.SetState(351)
			p.Match(limboParserT__1)
		}

	}

	return localctx
}

// IAdt_declarationContext is an interface to support dynamic dispatch.
type IAdt_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAdt_declarationContext differentiates from other interfaces.
	IsAdt_declarationContext()
}

type Adt_declarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAdt_declarationContext() *Adt_declarationContext {
	var p = new(Adt_declarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = limboParserRULE_adt_declaration
	return p
}

func (*Adt_declarationContext) IsAdt_declarationContext() {}

func NewAdt_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Adt_declarationContext {
	var p = new(Adt_declarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = limboParserRULE_adt_declaration

	return p
}

func (s *Adt_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Adt_declarationContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(limboParserIDENTIFIER, 0)
}

func (s *Adt_declarationContext) Adt_member_list() IAdt_member_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAdt_member_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAdt_member_listContext)
}

func (s *Adt_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Adt_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Adt_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.EnterAdt_declaration(s)
	}
}

func (s *Adt_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.ExitAdt_declaration(s)
	}
}

func (p *limboParser) Adt_declaration() (localctx IAdt_declarationContext) {
	this := p
	_ = this

	localctx = NewAdt_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, limboParserRULE_adt_declaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(355)
		p.Match(limboParserIDENTIFIER)
	}
	{
		p.SetState(356)
		p.Match(limboParserT__5)
	}
	{
		p.SetState(357)
		p.Match(limboParserT__24)
	}
	{
		p.SetState(358)
		p.Match(limboParserT__22)
	}
	p.SetState(360)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == limboParserT__26 || _la == limboParserIDENTIFIER {
		{
			p.SetState(359)
			p.adt_member_list(0)
		}

	}
	{
		p.SetState(362)
		p.Match(limboParserT__23)
	}
	{
		p.SetState(363)
		p.Match(limboParserT__1)
	}

	return localctx
}

// IAdt_member_listContext is an interface to support dynamic dispatch.
type IAdt_member_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAdt_member_listContext differentiates from other interfaces.
	IsAdt_member_listContext()
}

type Adt_member_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAdt_member_listContext() *Adt_member_listContext {
	var p = new(Adt_member_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = limboParserRULE_adt_member_list
	return p
}

func (*Adt_member_listContext) IsAdt_member_listContext() {}

func NewAdt_member_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Adt_member_listContext {
	var p = new(Adt_member_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = limboParserRULE_adt_member_list

	return p
}

func (s *Adt_member_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Adt_member_listContext) Adt_member() IAdt_memberContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAdt_memberContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAdt_memberContext)
}

func (s *Adt_member_listContext) Adt_member_list() IAdt_member_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAdt_member_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAdt_member_listContext)
}

func (s *Adt_member_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Adt_member_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Adt_member_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.EnterAdt_member_list(s)
	}
}

func (s *Adt_member_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.ExitAdt_member_list(s)
	}
}

func (p *limboParser) Adt_member_list() (localctx IAdt_member_listContext) {
	return p.adt_member_list(0)
}

func (p *limboParser) adt_member_list(_p int) (localctx IAdt_member_listContext) {
	this := p
	_ = this

	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewAdt_member_listContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IAdt_member_listContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 58
	p.EnterRecursionRule(localctx, 58, limboParserRULE_adt_member_list, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(366)
		p.Adt_member()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(372)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 19, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewAdt_member_listContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, limboParserRULE_adt_member_list)
			p.SetState(368)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(369)
				p.Adt_member()
			}

		}
		p.SetState(374)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 19, p.GetParserRuleContext())
	}

	return localctx
}

// IAdt_memberContext is an interface to support dynamic dispatch.
type IAdt_memberContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAdt_memberContext differentiates from other interfaces.
	IsAdt_memberContext()
}

type Adt_memberContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAdt_memberContext() *Adt_memberContext {
	var p = new(Adt_memberContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = limboParserRULE_adt_member
	return p
}

func (*Adt_memberContext) IsAdt_memberContext() {}

func NewAdt_memberContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Adt_memberContext {
	var p = new(Adt_memberContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = limboParserRULE_adt_member

	return p
}

func (s *Adt_memberContext) GetParser() antlr.Parser { return s.parser }

func (s *Adt_memberContext) Identifier_list() IIdentifier_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_listContext)
}

func (s *Adt_memberContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Adt_memberContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Adt_memberContext) Function_type() IFunction_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_typeContext)
}

func (s *Adt_memberContext) Pick_member_list() IPick_member_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPick_member_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPick_member_listContext)
}

func (s *Adt_memberContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Adt_memberContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Adt_memberContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.EnterAdt_member(s)
	}
}

func (s *Adt_memberContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.ExitAdt_member(s)
	}
}

func (p *limboParser) Adt_member() (localctx IAdt_memberContext) {
	this := p
	_ = this

	localctx = NewAdt_memberContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, limboParserRULE_adt_member)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(398)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 20, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(375)
			p.identifier_list(0)
		}
		{
			p.SetState(376)
			p.Match(limboParserT__5)
		}
		{
			p.SetState(377)
			p.Match(limboParserT__25)
		}
		{
			p.SetState(378)
			p.Data_type()
		}
		{
			p.SetState(379)
			p.Match(limboParserT__1)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(381)
			p.identifier_list(0)
		}
		{
			p.SetState(382)
			p.Match(limboParserT__5)
		}
		{
			p.SetState(383)
			p.Match(limboParserT__6)
		}
		{
			p.SetState(384)
			p.Expression()
		}
		{
			p.SetState(385)
			p.Match(limboParserT__1)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(387)
			p.identifier_list(0)
		}
		{
			p.SetState(388)
			p.Match(limboParserT__5)
		}
		{
			p.SetState(389)
			p.Function_type()
		}
		{
			p.SetState(390)
			p.Match(limboParserT__1)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(392)
			p.Match(limboParserT__26)
		}
		{
			p.SetState(393)
			p.Match(limboParserT__22)
		}
		{
			p.SetState(394)
			p.pick_member_list(0)
		}
		{
			p.SetState(395)
			p.Match(limboParserT__23)
		}
		{
			p.SetState(396)
			p.Match(limboParserT__1)
		}

	}

	return localctx
}

// IPick_member_listContext is an interface to support dynamic dispatch.
type IPick_member_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPick_member_listContext differentiates from other interfaces.
	IsPick_member_listContext()
}

type Pick_member_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPick_member_listContext() *Pick_member_listContext {
	var p = new(Pick_member_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = limboParserRULE_pick_member_list
	return p
}

func (*Pick_member_listContext) IsPick_member_listContext() {}

func NewPick_member_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Pick_member_listContext {
	var p = new(Pick_member_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = limboParserRULE_pick_member_list

	return p
}

func (s *Pick_member_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Pick_member_listContext) Pick_tag_list() IPick_tag_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPick_tag_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPick_tag_listContext)
}

func (s *Pick_member_listContext) Pick_member_list() IPick_member_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPick_member_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPick_member_listContext)
}

func (s *Pick_member_listContext) Identifier_list() IIdentifier_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_listContext)
}

func (s *Pick_member_listContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Pick_member_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Pick_member_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Pick_member_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.EnterPick_member_list(s)
	}
}

func (s *Pick_member_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.ExitPick_member_list(s)
	}
}

func (p *limboParser) Pick_member_list() (localctx IPick_member_listContext) {
	return p.pick_member_list(0)
}

func (p *limboParser) pick_member_list(_p int) (localctx IPick_member_listContext) {
	this := p
	_ = this

	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewPick_member_listContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IPick_member_listContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 62
	p.EnterRecursionRule(localctx, 62, limboParserRULE_pick_member_list, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(401)
		p.Pick_tag_list()
	}
	{
		p.SetState(402)
		p.Match(limboParserT__27)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(417)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 22, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(415)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 21, p.GetParserRuleContext()) {
			case 1:
				localctx = NewPick_member_listContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, limboParserRULE_pick_member_list)
				p.SetState(404)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(405)
					p.Pick_tag_list()
				}
				{
					p.SetState(406)
					p.Match(limboParserT__27)
				}

			case 2:
				localctx = NewPick_member_listContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, limboParserRULE_pick_member_list)
				p.SetState(408)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(409)
					p.identifier_list(0)
				}
				{
					p.SetState(410)
					p.Match(limboParserT__5)
				}
				{
					p.SetState(411)
					p.Match(limboParserT__25)
				}
				{
					p.SetState(412)
					p.Data_type()
				}
				{
					p.SetState(413)
					p.Match(limboParserT__1)
				}

			}

		}
		p.SetState(419)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 22, p.GetParserRuleContext())
	}

	return localctx
}

// IPick_tag_listContext is an interface to support dynamic dispatch.
type IPick_tag_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPick_tag_listContext differentiates from other interfaces.
	IsPick_tag_listContext()
}

type Pick_tag_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPick_tag_listContext() *Pick_tag_listContext {
	var p = new(Pick_tag_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = limboParserRULE_pick_tag_list
	return p
}

func (*Pick_tag_listContext) IsPick_tag_listContext() {}

func NewPick_tag_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Pick_tag_listContext {
	var p = new(Pick_tag_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = limboParserRULE_pick_tag_list

	return p
}

func (s *Pick_tag_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Pick_tag_listContext) AllIDENTIFIER() []antlr.TerminalNode {
	return s.GetTokens(limboParserIDENTIFIER)
}

func (s *Pick_tag_listContext) IDENTIFIER(i int) antlr.TerminalNode {
	return s.GetToken(limboParserIDENTIFIER, i)
}

func (s *Pick_tag_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Pick_tag_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Pick_tag_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.EnterPick_tag_list(s)
	}
}

func (s *Pick_tag_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.ExitPick_tag_list(s)
	}
}

func (p *limboParser) Pick_tag_list() (localctx IPick_tag_listContext) {
	this := p
	_ = this

	localctx = NewPick_tag_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, limboParserRULE_pick_tag_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(420)
		p.Match(limboParserIDENTIFIER)
	}
	p.SetState(425)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == limboParserT__28 {
		{
			p.SetState(421)
			p.Match(limboParserT__28)
		}
		{
			p.SetState(422)
			p.Match(limboParserIDENTIFIER)
		}

		p.SetState(427)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IFunction_definitionContext is an interface to support dynamic dispatch.
type IFunction_definitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunction_definitionContext differentiates from other interfaces.
	IsFunction_definitionContext()
}

type Function_definitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunction_definitionContext() *Function_definitionContext {
	var p = new(Function_definitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = limboParserRULE_function_definition
	return p
}

func (*Function_definitionContext) IsFunction_definitionContext() {}

func NewFunction_definitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_definitionContext {
	var p = new(Function_definitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = limboParserRULE_function_definition

	return p
}

func (s *Function_definitionContext) GetParser() antlr.Parser { return s.parser }

func (s *Function_definitionContext) Function_name_part() IFunction_name_partContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_name_partContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_name_partContext)
}

func (s *Function_definitionContext) Function_arg_ret() IFunction_arg_retContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_arg_retContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_arg_retContext)
}

func (s *Function_definitionContext) Statements_() IStatements_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatements_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatements_Context)
}

func (s *Function_definitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_definitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Function_definitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.EnterFunction_definition(s)
	}
}

func (s *Function_definitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.ExitFunction_definition(s)
	}
}

func (p *limboParser) Function_definition() (localctx IFunction_definitionContext) {
	this := p
	_ = this

	localctx = NewFunction_definitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, limboParserRULE_function_definition)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(428)
		p.Function_name_part()
	}
	{
		p.SetState(429)
		p.Function_arg_ret()
	}
	{
		p.SetState(430)
		p.Match(limboParserT__22)
	}
	{
		p.SetState(431)
		p.Statements_()
	}
	{
		p.SetState(432)
		p.Match(limboParserT__23)
	}

	return localctx
}

// IFunction_name_partContext is an interface to support dynamic dispatch.
type IFunction_name_partContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunction_name_partContext differentiates from other interfaces.
	IsFunction_name_partContext()
}

type Function_name_partContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunction_name_partContext() *Function_name_partContext {
	var p = new(Function_name_partContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = limboParserRULE_function_name_part
	return p
}

func (*Function_name_partContext) IsFunction_name_partContext() {}

func NewFunction_name_partContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_name_partContext {
	var p = new(Function_name_partContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = limboParserRULE_function_name_part

	return p
}

func (s *Function_name_partContext) GetParser() antlr.Parser { return s.parser }

func (s *Function_name_partContext) AllIDENTIFIER() []antlr.TerminalNode {
	return s.GetTokens(limboParserIDENTIFIER)
}

func (s *Function_name_partContext) IDENTIFIER(i int) antlr.TerminalNode {
	return s.GetToken(limboParserIDENTIFIER, i)
}

func (s *Function_name_partContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_name_partContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Function_name_partContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.EnterFunction_name_part(s)
	}
}

func (s *Function_name_partContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.ExitFunction_name_part(s)
	}
}

func (p *limboParser) Function_name_part() (localctx IFunction_name_partContext) {
	this := p
	_ = this

	localctx = NewFunction_name_partContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, limboParserRULE_function_name_part)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(434)
		p.Match(limboParserIDENTIFIER)
	}
	p.SetState(439)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == limboParserT__29 {
		{
			p.SetState(435)
			p.Match(limboParserT__29)
		}
		{
			p.SetState(436)
			p.Match(limboParserIDENTIFIER)
		}

		p.SetState(441)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IStatements_Context is an interface to support dynamic dispatch.
type IStatements_Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatements_Context differentiates from other interfaces.
	IsStatements_Context()
}

type Statements_Context struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatements_Context() *Statements_Context {
	var p = new(Statements_Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = limboParserRULE_statements_
	return p
}

func (*Statements_Context) IsStatements_Context() {}

func NewStatements_Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Statements_Context {
	var p = new(Statements_Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = limboParserRULE_statements_

	return p
}

func (s *Statements_Context) GetParser() antlr.Parser { return s.parser }

func (s *Statements_Context) AllDeclaration() []IDeclarationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDeclarationContext)(nil)).Elem())
	var tst = make([]IDeclarationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDeclarationContext)
		}
	}

	return tst
}

func (s *Statements_Context) Declaration(i int) IDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDeclarationContext)
}

func (s *Statements_Context) AllStatement() []IStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatementContext)(nil)).Elem())
	var tst = make([]IStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatementContext)
		}
	}

	return tst
}

func (s *Statements_Context) Statement(i int) IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *Statements_Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Statements_Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Statements_Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.EnterStatements_(s)
	}
}

func (s *Statements_Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.ExitStatements_(s)
	}
}

func (p *limboParser) Statements_() (localctx IStatements_Context) {
	this := p
	_ = this

	localctx = NewStatements_Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, limboParserRULE_statements_)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(446)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<limboParserT__1)|(1<<limboParserT__3)|(1<<limboParserT__9)|(1<<limboParserT__11)|(1<<limboParserT__13)|(1<<limboParserT__14)|(1<<limboParserT__15)|(1<<limboParserT__20)|(1<<limboParserT__22)|(1<<limboParserT__26)|(1<<limboParserT__30))) != 0) || (((_la-33)&-(0x1f+1)) == 0 && ((1<<uint((_la-33)))&((1<<(limboParserT__32-33))|(1<<(limboParserT__33-33))|(1<<(limboParserT__34-33))|(1<<(limboParserT__35-33))|(1<<(limboParserT__36-33))|(1<<(limboParserT__37-33))|(1<<(limboParserT__38-33))|(1<<(limboParserT__39-33))|(1<<(limboParserT__40-33))|(1<<(limboParserT__41-33))|(1<<(limboParserT__48-33))|(1<<(limboParserSTRING-33))|(1<<(limboParserIDENTIFIER-33))|(1<<(limboParserREAL-33))|(1<<(limboParserINT-33))|(1<<(limboParserMONADICOPERATOR-33))|(1<<(limboParserMULT-33)))) != 0) {
		p.SetState(444)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 25, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(442)
				p.Declaration()
			}

		case 2:
			{
				p.SetState(443)
				p.Statement()
			}

		}

		p.SetState(448)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IStatementContext is an interface to support dynamic dispatch.
type IStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatementContext differentiates from other interfaces.
	IsStatementContext()
}

type StatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementContext() *StatementContext {
	var p = new(StatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = limboParserRULE_statement
	return p
}

func (*StatementContext) IsStatementContext() {}

func NewStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementContext {
	var p = new(StatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = limboParserRULE_statement

	return p
}

func (s *StatementContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *StatementContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *StatementContext) Statements_() IStatements_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatements_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatements_Context)
}

func (s *StatementContext) AllStatement() []IStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatementContext)(nil)).Elem())
	var tst = make([]IStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatementContext)
		}
	}

	return tst
}

func (s *StatementContext) Statement(i int) IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *StatementContext) Label() ILabelContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILabelContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILabelContext)
}

func (s *StatementContext) Qual_statement_sequence() IQual_statement_sequenceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQual_statement_sequenceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQual_statement_sequenceContext)
}

func (s *StatementContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(limboParserIDENTIFIER, 0)
}

func (s *StatementContext) Pqual_statement_sequence() IPqual_statement_sequenceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPqual_statement_sequenceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPqual_statement_sequenceContext)
}

func (s *StatementContext) Term() ITermContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITermContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITermContext)
}

func (s *StatementContext) Expression_list() IExpression_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_listContext)
}

func (s *StatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.EnterStatement(s)
	}
}

func (s *StatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.ExitStatement(s)
	}
}

func (p *limboParser) Statement() (localctx IStatementContext) {
	this := p
	_ = this

	localctx = NewStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, limboParserRULE_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(566)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 42, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(449)
			p.Expression()
		}
		{
			p.SetState(450)
			p.Match(limboParserT__1)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(452)
			p.Match(limboParserT__1)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(453)
			p.Match(limboParserT__22)
		}
		{
			p.SetState(454)
			p.Statements_()
		}
		{
			p.SetState(455)
			p.Match(limboParserT__23)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(457)
			p.Match(limboParserT__30)
		}
		{
			p.SetState(458)
			p.Match(limboParserT__3)
		}
		{
			p.SetState(459)
			p.Expression()
		}
		{
			p.SetState(460)
			p.Match(limboParserT__4)
		}
		{
			p.SetState(461)
			p.Statement()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(463)
			p.Match(limboParserT__30)
		}
		{
			p.SetState(464)
			p.Match(limboParserT__3)
		}
		{
			p.SetState(465)
			p.Expression()
		}
		{
			p.SetState(466)
			p.Match(limboParserT__4)
		}
		{
			p.SetState(467)
			p.Statement()
		}
		{
			p.SetState(468)
			p.Match(limboParserT__31)
		}
		{
			p.SetState(469)
			p.Statement()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		p.SetState(472)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == limboParserIDENTIFIER {
			{
				p.SetState(471)
				p.Label()
			}

		}
		{
			p.SetState(474)
			p.Match(limboParserT__32)
		}
		{
			p.SetState(475)
			p.Match(limboParserT__3)
		}
		p.SetState(477)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<limboParserT__3)|(1<<limboParserT__11)|(1<<limboParserT__13)|(1<<limboParserT__14)|(1<<limboParserT__15)|(1<<limboParserT__20))) != 0) || (((_la-49)&-(0x1f+1)) == 0 && ((1<<uint((_la-49)))&((1<<(limboParserT__48-49))|(1<<(limboParserSTRING-49))|(1<<(limboParserIDENTIFIER-49))|(1<<(limboParserREAL-49))|(1<<(limboParserINT-49))|(1<<(limboParserMONADICOPERATOR-49))|(1<<(limboParserMULT-49)))) != 0) {
			{
				p.SetState(476)
				p.Expression()
			}

		}
		{
			p.SetState(479)
			p.Match(limboParserT__4)
		}
		{
			p.SetState(480)
			p.Statement()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		p.SetState(482)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == limboParserIDENTIFIER {
			{
				p.SetState(481)
				p.Label()
			}

		}
		{
			p.SetState(484)
			p.Match(limboParserT__33)
		}
		{
			p.SetState(485)
			p.Statement()
		}
		{
			p.SetState(486)
			p.Match(limboParserT__32)
		}
		{
			p.SetState(487)
			p.Match(limboParserT__3)
		}
		p.SetState(489)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<limboParserT__3)|(1<<limboParserT__11)|(1<<limboParserT__13)|(1<<limboParserT__14)|(1<<limboParserT__15)|(1<<limboParserT__20))) != 0) || (((_la-49)&-(0x1f+1)) == 0 && ((1<<uint((_la-49)))&((1<<(limboParserT__48-49))|(1<<(limboParserSTRING-49))|(1<<(limboParserIDENTIFIER-49))|(1<<(limboParserREAL-49))|(1<<(limboParserINT-49))|(1<<(limboParserMONADICOPERATOR-49))|(1<<(limboParserMULT-49)))) != 0) {
			{
				p.SetState(488)
				p.Expression()
			}

		}
		{
			p.SetState(491)
			p.Match(limboParserT__4)
		}
		{
			p.SetState(492)
			p.Match(limboParserT__1)
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		p.SetState(495)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == limboParserIDENTIFIER {
			{
				p.SetState(494)
				p.Label()
			}

		}
		{
			p.SetState(497)
			p.Match(limboParserT__34)
		}
		{
			p.SetState(498)
			p.Match(limboParserT__3)
		}
		p.SetState(500)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<limboParserT__3)|(1<<limboParserT__11)|(1<<limboParserT__13)|(1<<limboParserT__14)|(1<<limboParserT__15)|(1<<limboParserT__20))) != 0) || (((_la-49)&-(0x1f+1)) == 0 && ((1<<uint((_la-49)))&((1<<(limboParserT__48-49))|(1<<(limboParserSTRING-49))|(1<<(limboParserIDENTIFIER-49))|(1<<(limboParserREAL-49))|(1<<(limboParserINT-49))|(1<<(limboParserMONADICOPERATOR-49))|(1<<(limboParserMULT-49)))) != 0) {
			{
				p.SetState(499)
				p.Expression()
			}

		}
		{
			p.SetState(502)
			p.Match(limboParserT__1)
		}
		p.SetState(504)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<limboParserT__3)|(1<<limboParserT__11)|(1<<limboParserT__13)|(1<<limboParserT__14)|(1<<limboParserT__15)|(1<<limboParserT__20))) != 0) || (((_la-49)&-(0x1f+1)) == 0 && ((1<<uint((_la-49)))&((1<<(limboParserT__48-49))|(1<<(limboParserSTRING-49))|(1<<(limboParserIDENTIFIER-49))|(1<<(limboParserREAL-49))|(1<<(limboParserINT-49))|(1<<(limboParserMONADICOPERATOR-49))|(1<<(limboParserMULT-49)))) != 0) {
			{
				p.SetState(503)
				p.Expression()
			}

		}
		{
			p.SetState(506)
			p.Match(limboParserT__1)
		}
		p.SetState(508)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<limboParserT__3)|(1<<limboParserT__11)|(1<<limboParserT__13)|(1<<limboParserT__14)|(1<<limboParserT__15)|(1<<limboParserT__20))) != 0) || (((_la-49)&-(0x1f+1)) == 0 && ((1<<uint((_la-49)))&((1<<(limboParserT__48-49))|(1<<(limboParserSTRING-49))|(1<<(limboParserIDENTIFIER-49))|(1<<(limboParserREAL-49))|(1<<(limboParserINT-49))|(1<<(limboParserMONADICOPERATOR-49))|(1<<(limboParserMULT-49)))) != 0) {
			{
				p.SetState(507)
				p.Expression()
			}

		}
		{
			p.SetState(510)
			p.Match(limboParserT__4)
		}
		{
			p.SetState(511)
			p.Statement()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		p.SetState(513)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == limboParserIDENTIFIER {
			{
				p.SetState(512)
				p.Label()
			}

		}
		{
			p.SetState(515)
			p.Match(limboParserT__35)
		}
		{
			p.SetState(516)
			p.Expression()
		}
		{
			p.SetState(517)
			p.Match(limboParserT__22)
		}
		{
			p.SetState(518)
			p.qual_statement_sequence(0)
		}
		{
			p.SetState(519)
			p.Match(limboParserT__23)
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		p.SetState(522)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == limboParserIDENTIFIER {
			{
				p.SetState(521)
				p.Label()
			}

		}
		{
			p.SetState(524)
			p.Match(limboParserT__36)
		}
		{
			p.SetState(525)
			p.Match(limboParserT__22)
		}
		{
			p.SetState(526)
			p.qual_statement_sequence(0)
		}
		{
			p.SetState(527)
			p.Match(limboParserT__23)
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		p.SetState(530)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == limboParserIDENTIFIER {
			{
				p.SetState(529)
				p.Label()
			}

		}
		{
			p.SetState(532)
			p.Match(limboParserT__26)
		}
		{
			p.SetState(533)
			p.Match(limboParserIDENTIFIER)
		}
		{
			p.SetState(534)
			p.Match(limboParserT__2)
		}
		{
			p.SetState(535)
			p.Expression()
		}
		{
			p.SetState(536)
			p.Match(limboParserT__22)
		}
		{
			p.SetState(537)
			p.pqual_statement_sequence(0)
		}
		{
			p.SetState(538)
			p.Match(limboParserT__23)
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(540)
			p.Match(limboParserT__37)
		}
		p.SetState(542)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == limboParserIDENTIFIER {
			{
				p.SetState(541)
				p.Match(limboParserIDENTIFIER)
			}

		}
		{
			p.SetState(544)
			p.Match(limboParserT__1)
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(545)
			p.Match(limboParserT__38)
		}
		p.SetState(547)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == limboParserIDENTIFIER {
			{
				p.SetState(546)
				p.Match(limboParserIDENTIFIER)
			}

		}
		{
			p.SetState(549)
			p.Match(limboParserT__1)
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(550)
			p.Match(limboParserT__39)
		}
		p.SetState(552)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<limboParserT__3)|(1<<limboParserT__11)|(1<<limboParserT__13)|(1<<limboParserT__14)|(1<<limboParserT__15)|(1<<limboParserT__20))) != 0) || (((_la-49)&-(0x1f+1)) == 0 && ((1<<uint((_la-49)))&((1<<(limboParserT__48-49))|(1<<(limboParserSTRING-49))|(1<<(limboParserIDENTIFIER-49))|(1<<(limboParserREAL-49))|(1<<(limboParserINT-49))|(1<<(limboParserMONADICOPERATOR-49))|(1<<(limboParserMULT-49)))) != 0) {
			{
				p.SetState(551)
				p.Expression()
			}

		}
		{
			p.SetState(554)
			p.Match(limboParserT__1)
		}

	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(555)
			p.Match(limboParserT__40)
		}
		{
			p.SetState(556)
			p.term(0)
		}
		{
			p.SetState(557)
			p.Match(limboParserT__3)
		}
		p.SetState(559)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<limboParserT__3)|(1<<limboParserT__11)|(1<<limboParserT__13)|(1<<limboParserT__14)|(1<<limboParserT__15)|(1<<limboParserT__20))) != 0) || (((_la-49)&-(0x1f+1)) == 0 && ((1<<uint((_la-49)))&((1<<(limboParserT__48-49))|(1<<(limboParserSTRING-49))|(1<<(limboParserIDENTIFIER-49))|(1<<(limboParserREAL-49))|(1<<(limboParserINT-49))|(1<<(limboParserMONADICOPERATOR-49))|(1<<(limboParserMULT-49)))) != 0) {
			{
				p.SetState(558)
				p.Expression_list()
			}

		}
		{
			p.SetState(561)
			p.Match(limboParserT__4)
		}
		{
			p.SetState(562)
			p.Match(limboParserT__1)
		}

	case 16:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(564)
			p.Match(limboParserT__41)
		}
		{
			p.SetState(565)
			p.Match(limboParserT__1)
		}

	}

	return localctx
}

// ILabelContext is an interface to support dynamic dispatch.
type ILabelContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLabelContext differentiates from other interfaces.
	IsLabelContext()
}

type LabelContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLabelContext() *LabelContext {
	var p = new(LabelContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = limboParserRULE_label
	return p
}

func (*LabelContext) IsLabelContext() {}

func NewLabelContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LabelContext {
	var p = new(LabelContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = limboParserRULE_label

	return p
}

func (s *LabelContext) GetParser() antlr.Parser { return s.parser }

func (s *LabelContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(limboParserIDENTIFIER, 0)
}

func (s *LabelContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LabelContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LabelContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.EnterLabel(s)
	}
}

func (s *LabelContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.ExitLabel(s)
	}
}

func (p *limboParser) Label() (localctx ILabelContext) {
	this := p
	_ = this

	localctx = NewLabelContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, limboParserRULE_label)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(568)
		p.Match(limboParserIDENTIFIER)
	}
	{
		p.SetState(569)
		p.Match(limboParserT__5)
	}

	return localctx
}

// IQual_statement_sequenceContext is an interface to support dynamic dispatch.
type IQual_statement_sequenceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsQual_statement_sequenceContext differentiates from other interfaces.
	IsQual_statement_sequenceContext()
}

type Qual_statement_sequenceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQual_statement_sequenceContext() *Qual_statement_sequenceContext {
	var p = new(Qual_statement_sequenceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = limboParserRULE_qual_statement_sequence
	return p
}

func (*Qual_statement_sequenceContext) IsQual_statement_sequenceContext() {}

func NewQual_statement_sequenceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Qual_statement_sequenceContext {
	var p = new(Qual_statement_sequenceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = limboParserRULE_qual_statement_sequence

	return p
}

func (s *Qual_statement_sequenceContext) GetParser() antlr.Parser { return s.parser }

func (s *Qual_statement_sequenceContext) Qual_list() IQual_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQual_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQual_listContext)
}

func (s *Qual_statement_sequenceContext) Qual_statement_sequence() IQual_statement_sequenceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQual_statement_sequenceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQual_statement_sequenceContext)
}

func (s *Qual_statement_sequenceContext) Statement() IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *Qual_statement_sequenceContext) Declaration() IDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclarationContext)
}

func (s *Qual_statement_sequenceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Qual_statement_sequenceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Qual_statement_sequenceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.EnterQual_statement_sequence(s)
	}
}

func (s *Qual_statement_sequenceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.ExitQual_statement_sequence(s)
	}
}

func (p *limboParser) Qual_statement_sequence() (localctx IQual_statement_sequenceContext) {
	return p.qual_statement_sequence(0)
}

func (p *limboParser) qual_statement_sequence(_p int) (localctx IQual_statement_sequenceContext) {
	this := p
	_ = this

	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewQual_statement_sequenceContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IQual_statement_sequenceContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 76
	p.EnterRecursionRule(localctx, 76, limboParserRULE_qual_statement_sequence, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(572)
		p.Qual_list()
	}
	{
		p.SetState(573)
		p.Match(limboParserT__27)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(585)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 44, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(583)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 43, p.GetParserRuleContext()) {
			case 1:
				localctx = NewQual_statement_sequenceContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, limboParserRULE_qual_statement_sequence)
				p.SetState(575)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(576)
					p.Qual_list()
				}
				{
					p.SetState(577)
					p.Match(limboParserT__27)
				}

			case 2:
				localctx = NewQual_statement_sequenceContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, limboParserRULE_qual_statement_sequence)
				p.SetState(579)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(580)
					p.Statement()
				}

			case 3:
				localctx = NewQual_statement_sequenceContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, limboParserRULE_qual_statement_sequence)
				p.SetState(581)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(582)
					p.Declaration()
				}

			}

		}
		p.SetState(587)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 44, p.GetParserRuleContext())
	}

	return localctx
}

// IQual_listContext is an interface to support dynamic dispatch.
type IQual_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsQual_listContext differentiates from other interfaces.
	IsQual_listContext()
}

type Qual_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQual_listContext() *Qual_listContext {
	var p = new(Qual_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = limboParserRULE_qual_list
	return p
}

func (*Qual_listContext) IsQual_listContext() {}

func NewQual_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Qual_listContext {
	var p = new(Qual_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = limboParserRULE_qual_list

	return p
}

func (s *Qual_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Qual_listContext) AllQualifier() []IQualifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IQualifierContext)(nil)).Elem())
	var tst = make([]IQualifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IQualifierContext)
		}
	}

	return tst
}

func (s *Qual_listContext) Qualifier(i int) IQualifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQualifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IQualifierContext)
}

func (s *Qual_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Qual_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Qual_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.EnterQual_list(s)
	}
}

func (s *Qual_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.ExitQual_list(s)
	}
}

func (p *limboParser) Qual_list() (localctx IQual_listContext) {
	this := p
	_ = this

	localctx = NewQual_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, limboParserRULE_qual_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(588)
		p.Qualifier()
	}
	p.SetState(593)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == limboParserT__28 {
		{
			p.SetState(589)
			p.Match(limboParserT__28)
		}
		{
			p.SetState(590)
			p.Qualifier()
		}

		p.SetState(595)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IQualifierContext is an interface to support dynamic dispatch.
type IQualifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsQualifierContext differentiates from other interfaces.
	IsQualifierContext()
}

type QualifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQualifierContext() *QualifierContext {
	var p = new(QualifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = limboParserRULE_qualifier
	return p
}

func (*QualifierContext) IsQualifierContext() {}

func NewQualifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *QualifierContext {
	var p = new(QualifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = limboParserRULE_qualifier

	return p
}

func (s *QualifierContext) GetParser() antlr.Parser { return s.parser }

func (s *QualifierContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *QualifierContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *QualifierContext) MULT() antlr.TerminalNode {
	return s.GetToken(limboParserMULT, 0)
}

func (s *QualifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QualifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *QualifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.EnterQualifier(s)
	}
}

func (s *QualifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.ExitQualifier(s)
	}
}

func (p *limboParser) Qualifier() (localctx IQualifierContext) {
	this := p
	_ = this

	localctx = NewQualifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, limboParserRULE_qualifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(602)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 46, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(596)
			p.Expression()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(597)
			p.Expression()
		}
		{
			p.SetState(598)
			p.Match(limboParserT__42)
		}
		{
			p.SetState(599)
			p.Expression()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(601)
			p.Match(limboParserMULT)
		}

	}

	return localctx
}

// IPqual_statement_sequenceContext is an interface to support dynamic dispatch.
type IPqual_statement_sequenceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPqual_statement_sequenceContext differentiates from other interfaces.
	IsPqual_statement_sequenceContext()
}

type Pqual_statement_sequenceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPqual_statement_sequenceContext() *Pqual_statement_sequenceContext {
	var p = new(Pqual_statement_sequenceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = limboParserRULE_pqual_statement_sequence
	return p
}

func (*Pqual_statement_sequenceContext) IsPqual_statement_sequenceContext() {}

func NewPqual_statement_sequenceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Pqual_statement_sequenceContext {
	var p = new(Pqual_statement_sequenceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = limboParserRULE_pqual_statement_sequence

	return p
}

func (s *Pqual_statement_sequenceContext) GetParser() antlr.Parser { return s.parser }

func (s *Pqual_statement_sequenceContext) Pqual_list() IPqual_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPqual_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPqual_listContext)
}

func (s *Pqual_statement_sequenceContext) Pqual_statement_sequence() IPqual_statement_sequenceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPqual_statement_sequenceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPqual_statement_sequenceContext)
}

func (s *Pqual_statement_sequenceContext) Statement() IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *Pqual_statement_sequenceContext) Declaration() IDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclarationContext)
}

func (s *Pqual_statement_sequenceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Pqual_statement_sequenceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Pqual_statement_sequenceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.EnterPqual_statement_sequence(s)
	}
}

func (s *Pqual_statement_sequenceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.ExitPqual_statement_sequence(s)
	}
}

func (p *limboParser) Pqual_statement_sequence() (localctx IPqual_statement_sequenceContext) {
	return p.pqual_statement_sequence(0)
}

func (p *limboParser) pqual_statement_sequence(_p int) (localctx IPqual_statement_sequenceContext) {
	this := p
	_ = this

	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewPqual_statement_sequenceContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IPqual_statement_sequenceContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 82
	p.EnterRecursionRule(localctx, 82, limboParserRULE_pqual_statement_sequence, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(605)
		p.Pqual_list()
	}
	{
		p.SetState(606)
		p.Match(limboParserT__27)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(618)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 48, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(616)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 47, p.GetParserRuleContext()) {
			case 1:
				localctx = NewPqual_statement_sequenceContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, limboParserRULE_pqual_statement_sequence)
				p.SetState(608)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(609)
					p.Pqual_list()
				}
				{
					p.SetState(610)
					p.Match(limboParserT__27)
				}

			case 2:
				localctx = NewPqual_statement_sequenceContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, limboParserRULE_pqual_statement_sequence)
				p.SetState(612)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(613)
					p.Statement()
				}

			case 3:
				localctx = NewPqual_statement_sequenceContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, limboParserRULE_pqual_statement_sequence)
				p.SetState(614)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(615)
					p.Declaration()
				}

			}

		}
		p.SetState(620)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 48, p.GetParserRuleContext())
	}

	return localctx
}

// IPqual_listContext is an interface to support dynamic dispatch.
type IPqual_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPqual_listContext differentiates from other interfaces.
	IsPqual_listContext()
}

type Pqual_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPqual_listContext() *Pqual_listContext {
	var p = new(Pqual_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = limboParserRULE_pqual_list
	return p
}

func (*Pqual_listContext) IsPqual_listContext() {}

func NewPqual_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Pqual_listContext {
	var p = new(Pqual_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = limboParserRULE_pqual_list

	return p
}

func (s *Pqual_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Pqual_listContext) AllPqualifier() []IPqualifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPqualifierContext)(nil)).Elem())
	var tst = make([]IPqualifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPqualifierContext)
		}
	}

	return tst
}

func (s *Pqual_listContext) Pqualifier(i int) IPqualifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPqualifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPqualifierContext)
}

func (s *Pqual_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Pqual_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Pqual_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.EnterPqual_list(s)
	}
}

func (s *Pqual_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.ExitPqual_list(s)
	}
}

func (p *limboParser) Pqual_list() (localctx IPqual_listContext) {
	this := p
	_ = this

	localctx = NewPqual_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, limboParserRULE_pqual_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(621)
		p.Pqualifier()
	}
	p.SetState(626)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == limboParserT__28 {
		{
			p.SetState(622)
			p.Match(limboParserT__28)
		}
		{
			p.SetState(623)
			p.Pqualifier()
		}

		p.SetState(628)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IPqualifierContext is an interface to support dynamic dispatch.
type IPqualifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPqualifierContext differentiates from other interfaces.
	IsPqualifierContext()
}

type PqualifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPqualifierContext() *PqualifierContext {
	var p = new(PqualifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = limboParserRULE_pqualifier
	return p
}

func (*PqualifierContext) IsPqualifierContext() {}

func NewPqualifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PqualifierContext {
	var p = new(PqualifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = limboParserRULE_pqualifier

	return p
}

func (s *PqualifierContext) GetParser() antlr.Parser { return s.parser }

func (s *PqualifierContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(limboParserIDENTIFIER, 0)
}

func (s *PqualifierContext) MULT() antlr.TerminalNode {
	return s.GetToken(limboParserMULT, 0)
}

func (s *PqualifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PqualifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PqualifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.EnterPqualifier(s)
	}
}

func (s *PqualifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.ExitPqualifier(s)
	}
}

func (p *limboParser) Pqualifier() (localctx IPqualifierContext) {
	this := p
	_ = this

	localctx = NewPqualifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, limboParserRULE_pqualifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(629)
		_la = p.GetTokenStream().LA(1)

		if !(_la == limboParserIDENTIFIER || _la == limboParserMULT) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IExpressionContext is an interface to support dynamic dispatch.
type IExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionContext differentiates from other interfaces.
	IsExpressionContext()
}

type ExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionContext() *ExpressionContext {
	var p = new(ExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = limboParserRULE_expression
	return p
}

func (*ExpressionContext) IsExpressionContext() {}

func NewExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionContext {
	var p = new(ExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = limboParserRULE_expression

	return p
}

func (s *ExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionContext) Binary_expression() IBinary_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBinary_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBinary_expressionContext)
}

func (s *ExpressionContext) Lvalue_expression() ILvalue_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILvalue_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILvalue_expressionContext)
}

func (s *ExpressionContext) ASSIGNMENT_OPERATOR() antlr.TerminalNode {
	return s.GetToken(limboParserASSIGNMENT_OPERATOR, 0)
}

func (s *ExpressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionContext) Lvalue_expression_list() ILvalue_expression_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILvalue_expression_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILvalue_expression_listContext)
}

func (s *ExpressionContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(limboParserASSIGN, 0)
}

func (s *ExpressionContext) Send_expression() ISend_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISend_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISend_expressionContext)
}

func (s *ExpressionContext) Declare_expression() IDeclare_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclare_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclare_expressionContext)
}

func (s *ExpressionContext) Load_expression() ILoad_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoad_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoad_expressionContext)
}

func (s *ExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.EnterExpression(s)
	}
}

func (s *ExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.ExitExpression(s)
	}
}

func (p *limboParser) Expression() (localctx IExpressionContext) {
	this := p
	_ = this

	localctx = NewExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, limboParserRULE_expression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(645)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 50, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(631)
			p.binary_expression(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(632)
			p.Lvalue_expression()
		}
		{
			p.SetState(633)
			p.Match(limboParserASSIGNMENT_OPERATOR)
		}
		{
			p.SetState(634)
			p.Expression()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(636)
			p.Match(limboParserT__3)
		}
		{
			p.SetState(637)
			p.Lvalue_expression_list()
		}
		{
			p.SetState(638)
			p.Match(limboParserT__4)
		}
		{
			p.SetState(639)
			p.Match(limboParserASSIGN)
		}
		{
			p.SetState(640)
			p.Expression()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(642)
			p.Send_expression()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(643)
			p.Declare_expression()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(644)
			p.Load_expression()
		}

	}

	return localctx
}

// IBinary_expressionContext is an interface to support dynamic dispatch.
type IBinary_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBinary_expressionContext differentiates from other interfaces.
	IsBinary_expressionContext()
}

type Binary_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBinary_expressionContext() *Binary_expressionContext {
	var p = new(Binary_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = limboParserRULE_binary_expression
	return p
}

func (*Binary_expressionContext) IsBinary_expressionContext() {}

func NewBinary_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Binary_expressionContext {
	var p = new(Binary_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = limboParserRULE_binary_expression

	return p
}

func (s *Binary_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Binary_expressionContext) Monadic_expression() IMonadic_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMonadic_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMonadic_expressionContext)
}

func (s *Binary_expressionContext) AllBinary_expression() []IBinary_expressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBinary_expressionContext)(nil)).Elem())
	var tst = make([]IBinary_expressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBinary_expressionContext)
		}
	}

	return tst
}

func (s *Binary_expressionContext) Binary_expression(i int) IBinary_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBinary_expressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBinary_expressionContext)
}

func (s *Binary_expressionContext) BINARY_OPERATOR() antlr.TerminalNode {
	return s.GetToken(limboParserBINARY_OPERATOR, 0)
}

func (s *Binary_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Binary_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Binary_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.EnterBinary_expression(s)
	}
}

func (s *Binary_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.ExitBinary_expression(s)
	}
}

func (p *limboParser) Binary_expression() (localctx IBinary_expressionContext) {
	return p.binary_expression(0)
}

func (p *limboParser) binary_expression(_p int) (localctx IBinary_expressionContext) {
	this := p
	_ = this

	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewBinary_expressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IBinary_expressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 90
	p.EnterRecursionRule(localctx, 90, limboParserRULE_binary_expression, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(648)
		p.Monadic_expression()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(655)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 51, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewBinary_expressionContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, limboParserRULE_binary_expression)
			p.SetState(650)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(651)
				p.Match(limboParserBINARY_OPERATOR)
			}
			{
				p.SetState(652)
				p.binary_expression(2)
			}

		}
		p.SetState(657)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 51, p.GetParserRuleContext())
	}

	return localctx
}

// ILvalue_expressionContext is an interface to support dynamic dispatch.
type ILvalue_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLvalue_expressionContext differentiates from other interfaces.
	IsLvalue_expressionContext()
}

type Lvalue_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLvalue_expressionContext() *Lvalue_expressionContext {
	var p = new(Lvalue_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = limboParserRULE_lvalue_expression
	return p
}

func (*Lvalue_expressionContext) IsLvalue_expressionContext() {}

func NewLvalue_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Lvalue_expressionContext {
	var p = new(Lvalue_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = limboParserRULE_lvalue_expression

	return p
}

func (s *Lvalue_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Lvalue_expressionContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(limboParserIDENTIFIER, 0)
}

func (s *Lvalue_expressionContext) Term() ITermContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITermContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITermContext)
}

func (s *Lvalue_expressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Lvalue_expressionContext) Lvalue_expression_list() ILvalue_expression_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILvalue_expression_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILvalue_expression_listContext)
}

func (s *Lvalue_expressionContext) MULT() antlr.TerminalNode {
	return s.GetToken(limboParserMULT, 0)
}

func (s *Lvalue_expressionContext) Monadic_expression() IMonadic_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMonadic_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMonadic_expressionContext)
}

func (s *Lvalue_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Lvalue_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Lvalue_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.EnterLvalue_expression(s)
	}
}

func (s *Lvalue_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.ExitLvalue_expression(s)
	}
}

func (p *limboParser) Lvalue_expression() (localctx ILvalue_expressionContext) {
	this := p
	_ = this

	localctx = NewLvalue_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, limboParserRULE_lvalue_expression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(681)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 52, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(658)
			p.Match(limboParserIDENTIFIER)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(659)
			p.Match(limboParserT__20)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(660)
			p.term(0)
		}
		{
			p.SetState(661)
			p.Match(limboParserT__43)
		}
		{
			p.SetState(662)
			p.Expression()
		}
		{
			p.SetState(663)
			p.Match(limboParserT__44)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(665)
			p.term(0)
		}
		{
			p.SetState(666)
			p.Match(limboParserT__43)
		}
		{
			p.SetState(667)
			p.Expression()
		}
		{
			p.SetState(668)
			p.Match(limboParserT__5)
		}
		{
			p.SetState(669)
			p.Match(limboParserT__44)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(671)
			p.term(0)
		}
		{
			p.SetState(672)
			p.Match(limboParserT__29)
		}
		{
			p.SetState(673)
			p.Match(limboParserIDENTIFIER)
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(675)
			p.Match(limboParserT__3)
		}
		{
			p.SetState(676)
			p.Lvalue_expression_list()
		}
		{
			p.SetState(677)
			p.Match(limboParserT__4)
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(679)
			p.Match(limboParserMULT)
		}
		{
			p.SetState(680)
			p.Monadic_expression()
		}

	}

	return localctx
}

// ILvalue_expression_listContext is an interface to support dynamic dispatch.
type ILvalue_expression_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLvalue_expression_listContext differentiates from other interfaces.
	IsLvalue_expression_listContext()
}

type Lvalue_expression_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLvalue_expression_listContext() *Lvalue_expression_listContext {
	var p = new(Lvalue_expression_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = limboParserRULE_lvalue_expression_list
	return p
}

func (*Lvalue_expression_listContext) IsLvalue_expression_listContext() {}

func NewLvalue_expression_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Lvalue_expression_listContext {
	var p = new(Lvalue_expression_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = limboParserRULE_lvalue_expression_list

	return p
}

func (s *Lvalue_expression_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Lvalue_expression_listContext) AllLvalue_expression() []ILvalue_expressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ILvalue_expressionContext)(nil)).Elem())
	var tst = make([]ILvalue_expressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ILvalue_expressionContext)
		}
	}

	return tst
}

func (s *Lvalue_expression_listContext) Lvalue_expression(i int) ILvalue_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILvalue_expressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ILvalue_expressionContext)
}

func (s *Lvalue_expression_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Lvalue_expression_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Lvalue_expression_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.EnterLvalue_expression_list(s)
	}
}

func (s *Lvalue_expression_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.ExitLvalue_expression_list(s)
	}
}

func (p *limboParser) Lvalue_expression_list() (localctx ILvalue_expression_listContext) {
	this := p
	_ = this

	localctx = NewLvalue_expression_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, limboParserRULE_lvalue_expression_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(683)
		p.Lvalue_expression()
	}
	p.SetState(688)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == limboParserT__10 {
		{
			p.SetState(684)
			p.Match(limboParserT__10)
		}
		{
			p.SetState(685)
			p.Lvalue_expression()
		}

		p.SetState(690)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IInit_listContext is an interface to support dynamic dispatch.
type IInit_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInit_listContext differentiates from other interfaces.
	IsInit_listContext()
}

type Init_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInit_listContext() *Init_listContext {
	var p = new(Init_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = limboParserRULE_init_list
	return p
}

func (*Init_listContext) IsInit_listContext() {}

func NewInit_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Init_listContext {
	var p = new(Init_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = limboParserRULE_init_list

	return p
}

func (s *Init_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Init_listContext) AllElement() []IElementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IElementContext)(nil)).Elem())
	var tst = make([]IElementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IElementContext)
		}
	}

	return tst
}

func (s *Init_listContext) Element(i int) IElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IElementContext)
}

func (s *Init_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Init_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Init_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.EnterInit_list(s)
	}
}

func (s *Init_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.ExitInit_list(s)
	}
}

func (p *limboParser) Init_list() (localctx IInit_listContext) {
	this := p
	_ = this

	localctx = NewInit_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, limboParserRULE_init_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(691)
		p.Element()
	}
	p.SetState(696)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == limboParserT__10 {
		{
			p.SetState(692)
			p.Match(limboParserT__10)
		}
		{
			p.SetState(693)
			p.Element()
		}

		p.SetState(698)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ITermContext is an interface to support dynamic dispatch.
type ITermContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTermContext differentiates from other interfaces.
	IsTermContext()
}

type TermContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTermContext() *TermContext {
	var p = new(TermContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = limboParserRULE_term
	return p
}

func (*TermContext) IsTermContext() {}

func NewTermContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TermContext {
	var p = new(TermContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = limboParserRULE_term

	return p
}

func (s *TermContext) GetParser() antlr.Parser { return s.parser }

func (s *TermContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(limboParserIDENTIFIER, 0)
}

func (s *TermContext) Real_constant() IReal_constantContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReal_constantContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReal_constantContext)
}

func (s *TermContext) String_constant() IString_constantContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_constantContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IString_constantContext)
}

func (s *TermContext) Expression_list() IExpression_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_listContext)
}

func (s *TermContext) AllTerm() []ITermContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITermContext)(nil)).Elem())
	var tst = make([]ITermContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITermContext)
		}
	}

	return tst
}

func (s *TermContext) Term(i int) ITermContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITermContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITermContext)
}

func (s *TermContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *TermContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *TermContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TermContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TermContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.EnterTerm(s)
	}
}

func (s *TermContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.ExitTerm(s)
	}
}

func (p *limboParser) Term() (localctx ITermContext) {
	return p.term(0)
}

func (p *limboParser) term(_p int) (localctx ITermContext) {
	this := p
	_ = this

	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewTermContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx ITermContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 98
	p.EnterRecursionRule(localctx, 98, limboParserRULE_term, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(708)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case limboParserIDENTIFIER:
		{
			p.SetState(700)
			p.Match(limboParserIDENTIFIER)
		}

	case limboParserREAL:
		{
			p.SetState(701)
			p.Real_constant()
		}

	case limboParserSTRING:
		{
			p.SetState(702)
			p.String_constant()
		}

	case limboParserT__20:
		{
			p.SetState(703)
			p.Match(limboParserT__20)
		}

	case limboParserT__3:
		{
			p.SetState(704)
			p.Match(limboParserT__3)
		}
		{
			p.SetState(705)
			p.Expression_list()
		}
		{
			p.SetState(706)
			p.Match(limboParserT__4)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(746)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 58, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(744)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 57, p.GetParserRuleContext()) {
			case 1:
				localctx = NewTermContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, limboParserRULE_term)
				p.SetState(710)

				if !(p.Precpred(p.GetParserRuleContext(), 7)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 7)", ""))
				}
				{
					p.SetState(711)
					p.Match(limboParserT__16)
				}
				{
					p.SetState(712)
					p.term(8)
				}

			case 2:
				localctx = NewTermContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, limboParserRULE_term)
				p.SetState(713)

				if !(p.Precpred(p.GetParserRuleContext(), 8)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 8)", ""))
				}
				{
					p.SetState(714)
					p.Match(limboParserT__29)
				}
				{
					p.SetState(715)
					p.Match(limboParserIDENTIFIER)
				}

			case 3:
				localctx = NewTermContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, limboParserRULE_term)
				p.SetState(716)

				if !(p.Precpred(p.GetParserRuleContext(), 6)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 6)", ""))
				}
				{
					p.SetState(717)
					p.Match(limboParserT__3)
				}
				p.SetState(719)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<limboParserT__3)|(1<<limboParserT__11)|(1<<limboParserT__13)|(1<<limboParserT__14)|(1<<limboParserT__15)|(1<<limboParserT__20))) != 0) || (((_la-49)&-(0x1f+1)) == 0 && ((1<<uint((_la-49)))&((1<<(limboParserT__48-49))|(1<<(limboParserSTRING-49))|(1<<(limboParserIDENTIFIER-49))|(1<<(limboParserREAL-49))|(1<<(limboParserINT-49))|(1<<(limboParserMONADICOPERATOR-49))|(1<<(limboParserMULT-49)))) != 0) {
					{
						p.SetState(718)
						p.Expression_list()
					}

				}
				{
					p.SetState(721)
					p.Match(limboParserT__4)
				}

			case 4:
				localctx = NewTermContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, limboParserRULE_term)
				p.SetState(722)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
				}
				{
					p.SetState(723)
					p.Match(limboParserT__43)
				}
				{
					p.SetState(724)
					p.Expression()
				}
				{
					p.SetState(725)
					p.Match(limboParserT__44)
				}

			case 5:
				localctx = NewTermContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, limboParserRULE_term)
				p.SetState(727)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				{
					p.SetState(728)
					p.Match(limboParserT__43)
				}
				{
					p.SetState(729)
					p.Expression()
				}
				{
					p.SetState(730)
					p.Match(limboParserT__5)
				}
				{
					p.SetState(731)
					p.Expression()
				}
				{
					p.SetState(732)
					p.Match(limboParserT__44)
				}

			case 6:
				localctx = NewTermContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, limboParserRULE_term)
				p.SetState(734)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(735)
					p.Match(limboParserT__43)
				}
				{
					p.SetState(736)
					p.Expression()
				}
				{
					p.SetState(737)
					p.Match(limboParserT__5)
				}
				{
					p.SetState(738)
					p.Match(limboParserT__44)
				}

			case 7:
				localctx = NewTermContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, limboParserRULE_term)
				p.SetState(740)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(741)
					p.Match(limboParserT__45)
				}

			case 8:
				localctx = NewTermContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, limboParserRULE_term)
				p.SetState(742)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(743)
					p.Match(limboParserT__46)
				}

			}

		}
		p.SetState(748)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 58, p.GetParserRuleContext())
	}

	return localctx
}

// IReal_constantContext is an interface to support dynamic dispatch.
type IReal_constantContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReal_constantContext differentiates from other interfaces.
	IsReal_constantContext()
}

type Real_constantContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReal_constantContext() *Real_constantContext {
	var p = new(Real_constantContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = limboParserRULE_real_constant
	return p
}

func (*Real_constantContext) IsReal_constantContext() {}

func NewReal_constantContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Real_constantContext {
	var p = new(Real_constantContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = limboParserRULE_real_constant

	return p
}

func (s *Real_constantContext) GetParser() antlr.Parser { return s.parser }

func (s *Real_constantContext) REAL() antlr.TerminalNode {
	return s.GetToken(limboParserREAL, 0)
}

func (s *Real_constantContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Real_constantContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Real_constantContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.EnterReal_constant(s)
	}
}

func (s *Real_constantContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.ExitReal_constant(s)
	}
}

func (p *limboParser) Real_constant() (localctx IReal_constantContext) {
	this := p
	_ = this

	localctx = NewReal_constantContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, limboParserRULE_real_constant)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(749)
		p.Match(limboParserREAL)
	}

	return localctx
}

// IString_constantContext is an interface to support dynamic dispatch.
type IString_constantContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsString_constantContext differentiates from other interfaces.
	IsString_constantContext()
}

type String_constantContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyString_constantContext() *String_constantContext {
	var p = new(String_constantContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = limboParserRULE_string_constant
	return p
}

func (*String_constantContext) IsString_constantContext() {}

func NewString_constantContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *String_constantContext {
	var p = new(String_constantContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = limboParserRULE_string_constant

	return p
}

func (s *String_constantContext) GetParser() antlr.Parser { return s.parser }

func (s *String_constantContext) STRING() antlr.TerminalNode {
	return s.GetToken(limboParserSTRING, 0)
}

func (s *String_constantContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *String_constantContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *String_constantContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.EnterString_constant(s)
	}
}

func (s *String_constantContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.ExitString_constant(s)
	}
}

func (p *limboParser) String_constant() (localctx IString_constantContext) {
	this := p
	_ = this

	localctx = NewString_constantContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, limboParserRULE_string_constant)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(751)
		p.Match(limboParserSTRING)
	}

	return localctx
}

// IElementContext is an interface to support dynamic dispatch.
type IElementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsElementContext differentiates from other interfaces.
	IsElementContext()
}

type ElementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyElementContext() *ElementContext {
	var p = new(ElementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = limboParserRULE_element
	return p
}

func (*ElementContext) IsElementContext() {}

func NewElementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ElementContext {
	var p = new(ElementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = limboParserRULE_element

	return p
}

func (s *ElementContext) GetParser() antlr.Parser { return s.parser }

func (s *ElementContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *ElementContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ElementContext) MULT() antlr.TerminalNode {
	return s.GetToken(limboParserMULT, 0)
}

func (s *ElementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ElementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ElementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.EnterElement(s)
	}
}

func (s *ElementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.ExitElement(s)
	}
}

func (p *limboParser) Element() (localctx IElementContext) {
	this := p
	_ = this

	localctx = NewElementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, limboParserRULE_element)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(761)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 59, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(753)
			p.Expression()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(754)
			p.Expression()
		}
		{
			p.SetState(755)
			p.Match(limboParserT__27)
		}
		{
			p.SetState(756)
			p.Expression()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(758)
			p.Match(limboParserMULT)
		}
		{
			p.SetState(759)
			p.Match(limboParserT__27)
		}
		{
			p.SetState(760)
			p.Expression()
		}

	}

	return localctx
}

// ISend_expressionContext is an interface to support dynamic dispatch.
type ISend_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSend_expressionContext differentiates from other interfaces.
	IsSend_expressionContext()
}

type Send_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySend_expressionContext() *Send_expressionContext {
	var p = new(Send_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = limboParserRULE_send_expression
	return p
}

func (*Send_expressionContext) IsSend_expressionContext() {}

func NewSend_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Send_expressionContext {
	var p = new(Send_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = limboParserRULE_send_expression

	return p
}

func (s *Send_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Send_expressionContext) Lvalue_expression() ILvalue_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILvalue_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILvalue_expressionContext)
}

func (s *Send_expressionContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(limboParserASSIGN, 0)
}

func (s *Send_expressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Send_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Send_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Send_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.EnterSend_expression(s)
	}
}

func (s *Send_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.ExitSend_expression(s)
	}
}

func (p *limboParser) Send_expression() (localctx ISend_expressionContext) {
	this := p
	_ = this

	localctx = NewSend_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, limboParserRULE_send_expression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(763)
		p.Lvalue_expression()
	}
	{
		p.SetState(764)
		p.Match(limboParserT__47)
	}
	{
		p.SetState(765)
		p.Match(limboParserASSIGN)
	}
	{
		p.SetState(766)
		p.Expression()
	}

	return localctx
}

// IDeclare_expressionContext is an interface to support dynamic dispatch.
type IDeclare_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclare_expressionContext differentiates from other interfaces.
	IsDeclare_expressionContext()
}

type Declare_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclare_expressionContext() *Declare_expressionContext {
	var p = new(Declare_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = limboParserRULE_declare_expression
	return p
}

func (*Declare_expressionContext) IsDeclare_expressionContext() {}

func NewDeclare_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Declare_expressionContext {
	var p = new(Declare_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = limboParserRULE_declare_expression

	return p
}

func (s *Declare_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Declare_expressionContext) Lvalue_expression() ILvalue_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILvalue_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILvalue_expressionContext)
}

func (s *Declare_expressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Declare_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Declare_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Declare_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.EnterDeclare_expression(s)
	}
}

func (s *Declare_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.ExitDeclare_expression(s)
	}
}

func (p *limboParser) Declare_expression() (localctx IDeclare_expressionContext) {
	this := p
	_ = this

	localctx = NewDeclare_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, limboParserRULE_declare_expression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(768)
		p.Lvalue_expression()
	}
	{
		p.SetState(769)
		p.Match(limboParserT__2)
	}
	{
		p.SetState(770)
		p.Expression()
	}

	return localctx
}

// ILoad_expressionContext is an interface to support dynamic dispatch.
type ILoad_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLoad_expressionContext differentiates from other interfaces.
	IsLoad_expressionContext()
}

type Load_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLoad_expressionContext() *Load_expressionContext {
	var p = new(Load_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = limboParserRULE_load_expression
	return p
}

func (*Load_expressionContext) IsLoad_expressionContext() {}

func NewLoad_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Load_expressionContext {
	var p = new(Load_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = limboParserRULE_load_expression

	return p
}

func (s *Load_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Load_expressionContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(limboParserIDENTIFIER, 0)
}

func (s *Load_expressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Load_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Load_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Load_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.EnterLoad_expression(s)
	}
}

func (s *Load_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.ExitLoad_expression(s)
	}
}

func (p *limboParser) Load_expression() (localctx ILoad_expressionContext) {
	this := p
	_ = this

	localctx = NewLoad_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, limboParserRULE_load_expression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(772)
		p.Match(limboParserT__48)
	}
	{
		p.SetState(773)
		p.Match(limboParserIDENTIFIER)
	}
	{
		p.SetState(774)
		p.Expression()
	}

	return localctx
}

// IMonadic_expressionContext is an interface to support dynamic dispatch.
type IMonadic_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMonadic_expressionContext differentiates from other interfaces.
	IsMonadic_expressionContext()
}

type Monadic_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMonadic_expressionContext() *Monadic_expressionContext {
	var p = new(Monadic_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = limboParserRULE_monadic_expression
	return p
}

func (*Monadic_expressionContext) IsMonadic_expressionContext() {}

func NewMonadic_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Monadic_expressionContext {
	var p = new(Monadic_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = limboParserRULE_monadic_expression

	return p
}

func (s *Monadic_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Monadic_expressionContext) Term() ITermContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITermContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITermContext)
}

func (s *Monadic_expressionContext) MONADICOPERATOR() antlr.TerminalNode {
	return s.GetToken(limboParserMONADICOPERATOR, 0)
}

func (s *Monadic_expressionContext) Monadic_expression() IMonadic_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMonadic_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMonadic_expressionContext)
}

func (s *Monadic_expressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Monadic_expressionContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Monadic_expressionContext) Init_list() IInit_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInit_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInit_listContext)
}

func (s *Monadic_expressionContext) Expression_list() IExpression_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_listContext)
}

func (s *Monadic_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Monadic_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Monadic_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.EnterMonadic_expression(s)
	}
}

func (s *Monadic_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(limboListener); ok {
		listenerT.ExitMonadic_expression(s)
	}
}

func (p *limboParser) Monadic_expression() (localctx IMonadic_expressionContext) {
	this := p
	_ = this

	localctx = NewMonadic_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, limboParserRULE_monadic_expression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(809)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 61, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(776)
			p.term(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(777)
			p.Match(limboParserMONADICOPERATOR)
		}
		{
			p.SetState(778)
			p.Monadic_expression()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(779)
			p.Match(limboParserT__11)
		}
		{
			p.SetState(780)
			p.Match(limboParserT__43)
		}
		{
			p.SetState(781)
			p.Expression()
		}
		{
			p.SetState(782)
			p.Match(limboParserT__44)
		}
		{
			p.SetState(783)
			p.Match(limboParserT__12)
		}
		{
			p.SetState(784)
			p.Data_type()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(786)
			p.Match(limboParserT__11)
		}
		{
			p.SetState(787)
			p.Match(limboParserT__43)
		}
		p.SetState(789)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<limboParserT__3)|(1<<limboParserT__11)|(1<<limboParserT__13)|(1<<limboParserT__14)|(1<<limboParserT__15)|(1<<limboParserT__20))) != 0) || (((_la-49)&-(0x1f+1)) == 0 && ((1<<uint((_la-49)))&((1<<(limboParserT__48-49))|(1<<(limboParserSTRING-49))|(1<<(limboParserIDENTIFIER-49))|(1<<(limboParserREAL-49))|(1<<(limboParserINT-49))|(1<<(limboParserMONADICOPERATOR-49))|(1<<(limboParserMULT-49)))) != 0) {
			{
				p.SetState(788)
				p.Expression()
			}

		}
		{
			p.SetState(791)
			p.Match(limboParserT__44)
		}
		{
			p.SetState(792)
			p.Match(limboParserT__12)
		}
		{
			p.SetState(793)
			p.Match(limboParserT__22)
		}
		{
			p.SetState(794)
			p.Init_list()
		}
		{
			p.SetState(795)
			p.Match(limboParserT__23)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(797)
			p.Match(limboParserT__13)
		}
		{
			p.SetState(798)
			p.Match(limboParserT__12)
		}
		{
			p.SetState(799)
			p.Match(limboParserT__22)
		}
		{
			p.SetState(800)
			p.Expression_list()
		}
		{
			p.SetState(801)
			p.Match(limboParserT__23)
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(803)
			p.Match(limboParserT__14)
		}
		{
			p.SetState(804)
			p.Match(limboParserT__12)
		}
		{
			p.SetState(805)
			p.Data_type()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(806)
			p.Data_type()
		}
		{
			p.SetState(807)
			p.Monadic_expression()
		}

	}

	return localctx
}

func (p *limboParser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 4:
		var t *Identifier_listContext = nil
		if localctx != nil {
			t = localctx.(*Identifier_listContext)
		}
		return p.Identifier_list_Sempred(t, predIndex)

	case 29:
		var t *Adt_member_listContext = nil
		if localctx != nil {
			t = localctx.(*Adt_member_listContext)
		}
		return p.Adt_member_list_Sempred(t, predIndex)

	case 31:
		var t *Pick_member_listContext = nil
		if localctx != nil {
			t = localctx.(*Pick_member_listContext)
		}
		return p.Pick_member_list_Sempred(t, predIndex)

	case 38:
		var t *Qual_statement_sequenceContext = nil
		if localctx != nil {
			t = localctx.(*Qual_statement_sequenceContext)
		}
		return p.Qual_statement_sequence_Sempred(t, predIndex)

	case 41:
		var t *Pqual_statement_sequenceContext = nil
		if localctx != nil {
			t = localctx.(*Pqual_statement_sequenceContext)
		}
		return p.Pqual_statement_sequence_Sempred(t, predIndex)

	case 45:
		var t *Binary_expressionContext = nil
		if localctx != nil {
			t = localctx.(*Binary_expressionContext)
		}
		return p.Binary_expression_Sempred(t, predIndex)

	case 49:
		var t *TermContext = nil
		if localctx != nil {
			t = localctx.(*TermContext)
		}
		return p.Term_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *limboParser) Identifier_list_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 0:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *limboParser) Adt_member_list_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 1:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *limboParser) Pick_member_list_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 2:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 3:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *limboParser) Qual_statement_sequence_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 4:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 5:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 6:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *limboParser) Pqual_statement_sequence_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 7:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 8:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 9:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *limboParser) Binary_expression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 10:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *limboParser) Term_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 11:
		return p.Precpred(p.GetParserRuleContext(), 7)

	case 12:
		return p.Precpred(p.GetParserRuleContext(), 8)

	case 13:
		return p.Precpred(p.GetParserRuleContext(), 6)

	case 14:
		return p.Precpred(p.GetParserRuleContext(), 5)

	case 15:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 16:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 17:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 18:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
