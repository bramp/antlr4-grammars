// Code generated from argus.g4 by ANTLR 4.9.3. DO NOT EDIT.

package argus // argus
import (
	"fmt"
	"reflect"
	"strconv"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = reflect.Copy
var _ = strconv.Itoa

var parserATN = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 3, 131, 1542,
	4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7,
	4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12, 4, 13,
	9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4, 18, 9,
	18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23, 9, 23,
	4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26, 4, 27, 9, 27, 4, 28, 9, 28, 4,
	29, 9, 29, 4, 30, 9, 30, 4, 31, 9, 31, 4, 32, 9, 32, 4, 33, 9, 33, 4, 34,
	9, 34, 4, 35, 9, 35, 4, 36, 9, 36, 4, 37, 9, 37, 4, 38, 9, 38, 4, 39, 9,
	39, 4, 40, 9, 40, 4, 41, 9, 41, 4, 42, 9, 42, 4, 43, 9, 43, 4, 44, 9, 44,
	4, 45, 9, 45, 4, 46, 9, 46, 4, 47, 9, 47, 4, 48, 9, 48, 4, 49, 9, 49, 4,
	50, 9, 50, 4, 51, 9, 51, 4, 52, 9, 52, 4, 53, 9, 53, 4, 54, 9, 54, 4, 55,
	9, 55, 4, 56, 9, 56, 4, 57, 9, 57, 4, 58, 9, 58, 4, 59, 9, 59, 4, 60, 9,
	60, 3, 2, 7, 2, 122, 10, 2, 12, 2, 14, 2, 125, 11, 2, 3, 2, 3, 2, 7, 2,
	129, 10, 2, 12, 2, 14, 2, 132, 11, 2, 3, 2, 3, 2, 7, 2, 136, 10, 2, 12,
	2, 14, 2, 139, 11, 2, 3, 2, 3, 2, 7, 2, 143, 10, 2, 12, 2, 14, 2, 146,
	11, 2, 3, 2, 3, 2, 7, 2, 150, 10, 2, 12, 2, 14, 2, 153, 11, 2, 3, 2, 5,
	2, 156, 10, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 3, 163, 10, 3, 5, 3, 165,
	10, 3, 3, 3, 7, 3, 168, 10, 3, 12, 3, 14, 3, 171, 11, 3, 3, 3, 3, 3, 3,
	3, 3, 4, 3, 4, 3, 4, 3, 4, 5, 4, 180, 10, 4, 3, 4, 3, 4, 3, 4, 3, 4, 7,
	4, 186, 10, 4, 12, 4, 14, 4, 189, 11, 4, 3, 4, 3, 4, 3, 4, 3, 4, 7, 4,
	195, 10, 4, 12, 4, 14, 4, 198, 11, 4, 5, 4, 200, 10, 4, 3, 4, 5, 4, 203,
	10, 4, 3, 4, 7, 4, 206, 10, 4, 12, 4, 14, 4, 209, 11, 4, 3, 4, 7, 4, 212,
	10, 4, 12, 4, 14, 4, 215, 11, 4, 3, 4, 3, 4, 3, 4, 3, 4, 5, 4, 221, 10,
	4, 3, 4, 3, 4, 3, 4, 3, 4, 5, 4, 227, 10, 4, 3, 4, 7, 4, 230, 10, 4, 12,
	4, 14, 4, 233, 11, 4, 3, 4, 3, 4, 7, 4, 237, 10, 4, 12, 4, 14, 4, 240,
	11, 4, 3, 4, 3, 4, 3, 4, 3, 5, 3, 5, 3, 5, 3, 5, 5, 5, 249, 10, 5, 3, 5,
	3, 5, 3, 5, 3, 5, 7, 5, 255, 10, 5, 12, 5, 14, 5, 258, 11, 5, 3, 5, 5,
	5, 261, 10, 5, 3, 5, 7, 5, 264, 10, 5, 12, 5, 14, 5, 267, 11, 5, 3, 5,
	3, 5, 3, 5, 3, 5, 7, 5, 273, 10, 5, 12, 5, 14, 5, 276, 11, 5, 3, 5, 7,
	5, 279, 10, 5, 12, 5, 14, 5, 282, 11, 5, 3, 5, 3, 5, 7, 5, 286, 10, 5,
	12, 5, 14, 5, 289, 11, 5, 3, 5, 3, 5, 3, 5, 3, 6, 3, 6, 3, 6, 5, 6, 297,
	10, 6, 3, 7, 3, 7, 5, 7, 301, 10, 7, 3, 8, 3, 8, 3, 8, 3, 8, 5, 8, 307,
	10, 8, 3, 8, 3, 8, 5, 8, 311, 10, 8, 3, 8, 5, 8, 314, 10, 8, 3, 8, 5, 8,
	317, 10, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 9, 3, 9, 3, 9, 3, 9, 5, 9, 327,
	10, 9, 3, 9, 3, 9, 5, 9, 331, 10, 9, 3, 9, 5, 9, 334, 10, 9, 3, 9, 5, 9,
	337, 10, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10,
	5, 10, 348, 10, 10, 3, 10, 5, 10, 351, 10, 10, 3, 10, 3, 10, 3, 10, 3,
	10, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 5, 11, 362, 10, 11, 3, 11, 5, 11,
	365, 10, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 12, 7, 12, 372, 10, 12, 12,
	12, 14, 12, 375, 11, 12, 3, 12, 7, 12, 378, 10, 12, 12, 12, 14, 12, 381,
	11, 12, 3, 12, 7, 12, 384, 10, 12, 12, 12, 14, 12, 387, 11, 12, 3, 13,
	3, 13, 3, 13, 7, 13, 392, 10, 13, 12, 13, 14, 13, 395, 11, 13, 3, 14, 3,
	14, 3, 14, 7, 14, 400, 10, 14, 12, 14, 14, 14, 403, 11, 14, 3, 14, 3, 14,
	3, 14, 3, 14, 3, 14, 3, 14, 7, 14, 411, 10, 14, 12, 14, 14, 14, 414, 11,
	14, 3, 14, 3, 14, 3, 14, 5, 14, 419, 10, 14, 3, 15, 3, 15, 3, 15, 3, 15,
	7, 15, 425, 10, 15, 12, 15, 14, 15, 428, 11, 15, 7, 15, 430, 10, 15, 12,
	15, 14, 15, 433, 11, 15, 3, 15, 3, 15, 3, 16, 3, 16, 3, 16, 7, 16, 440,
	10, 16, 12, 16, 14, 16, 443, 11, 16, 3, 16, 3, 16, 3, 16, 3, 17, 3, 17,
	3, 17, 3, 17, 3, 17, 7, 17, 453, 10, 17, 12, 17, 14, 17, 456, 11, 17, 3,
	17, 3, 17, 3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 7, 18, 465, 10, 18, 12, 18,
	14, 18, 468, 11, 18, 3, 18, 3, 18, 3, 19, 3, 19, 3, 19, 3, 19, 3, 19, 7,
	19, 477, 10, 19, 12, 19, 14, 19, 480, 11, 19, 3, 19, 3, 19, 3, 20, 3, 20,
	3, 20, 3, 20, 7, 20, 488, 10, 20, 12, 20, 14, 20, 491, 11, 20, 5, 20, 493,
	10, 20, 3, 21, 3, 21, 5, 21, 497, 10, 21, 3, 22, 3, 22, 3, 22, 3, 22, 7,
	22, 503, 10, 22, 12, 22, 14, 22, 506, 11, 22, 3, 23, 3, 23, 3, 23, 3, 23,
	3, 23, 7, 23, 513, 10, 23, 12, 23, 14, 23, 516, 11, 23, 3, 23, 3, 23, 3,
	23, 3, 23, 5, 23, 522, 10, 23, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24,
	7, 24, 530, 10, 24, 12, 24, 14, 24, 533, 11, 24, 3, 24, 7, 24, 536, 10,
	24, 12, 24, 14, 24, 539, 11, 24, 7, 24, 541, 10, 24, 12, 24, 14, 24, 544,
	11, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 5, 24, 551, 10, 24, 3, 25, 3,
	25, 3, 25, 7, 25, 556, 10, 25, 12, 25, 14, 25, 559, 11, 25, 3, 25, 3, 25,
	3, 25, 3, 25, 5, 25, 565, 10, 25, 3, 26, 3, 26, 5, 26, 569, 10, 26, 3,
	27, 5, 27, 572, 10, 27, 3, 27, 3, 27, 5, 27, 576, 10, 27, 3, 27, 3, 27,
	3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 5, 27, 585, 10, 27, 3, 27, 3, 27, 3,
	27, 7, 27, 590, 10, 27, 12, 27, 14, 27, 593, 11, 27, 3, 27, 3, 27, 3, 27,
	5, 27, 598, 10, 27, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3,
	28, 3, 28, 3, 28, 3, 28, 3, 28, 5, 28, 612, 10, 28, 3, 29, 3, 29, 3, 29,
	3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 7,
	29, 627, 10, 29, 12, 29, 14, 29, 630, 11, 29, 3, 29, 3, 29, 3, 29, 3, 29,
	5, 29, 636, 10, 29, 5, 29, 638, 10, 29, 3, 30, 3, 30, 3, 30, 3, 30, 3,
	30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 7, 30, 651, 10, 30, 12, 30,
	14, 30, 654, 11, 30, 3, 30, 3, 30, 3, 30, 3, 30, 5, 30, 660, 10, 30, 3,
	30, 3, 30, 3, 30, 7, 30, 665, 10, 30, 12, 30, 14, 30, 668, 11, 30, 3, 30,
	3, 30, 3, 30, 3, 30, 5, 30, 674, 10, 30, 3, 30, 3, 30, 3, 30, 7, 30, 679,
	10, 30, 12, 30, 14, 30, 682, 11, 30, 3, 30, 3, 30, 3, 30, 3, 30, 7, 30,
	688, 10, 30, 12, 30, 14, 30, 691, 11, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3,
	30, 3, 30, 3, 30, 3, 30, 5, 30, 701, 10, 30, 3, 30, 3, 30, 3, 30, 3, 30,
	3, 30, 3, 30, 5, 30, 709, 10, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3,
	30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 7, 30, 725,
	10, 30, 12, 30, 14, 30, 728, 11, 30, 3, 30, 3, 30, 3, 30, 5, 30, 733, 10,
	30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30,
	3, 30, 3, 30, 3, 30, 5, 30, 748, 10, 30, 3, 30, 3, 30, 3, 30, 3, 30, 7,
	30, 754, 10, 30, 12, 30, 14, 30, 757, 11, 30, 5, 30, 759, 10, 30, 3, 30,
	3, 30, 3, 30, 3, 30, 7, 30, 765, 10, 30, 12, 30, 14, 30, 768, 11, 30, 5,
	30, 770, 10, 30, 3, 30, 5, 30, 773, 10, 30, 3, 30, 3, 30, 3, 30, 3, 30,
	3, 30, 7, 30, 780, 10, 30, 12, 30, 14, 30, 783, 11, 30, 5, 30, 785, 10,
	30, 3, 30, 5, 30, 788, 10, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 7, 30,
	795, 10, 30, 12, 30, 14, 30, 798, 11, 30, 5, 30, 800, 10, 30, 3, 30, 5,
	30, 803, 10, 30, 3, 30, 3, 30, 5, 30, 807, 10, 30, 3, 30, 3, 30, 3, 30,
	3, 30, 3, 30, 5, 30, 814, 10, 30, 3, 30, 3, 30, 5, 30, 818, 10, 30, 3,
	30, 3, 30, 3, 30, 3, 30, 7, 30, 824, 10, 30, 12, 30, 14, 30, 827, 11, 30,
	3, 30, 3, 30, 3, 30, 7, 30, 832, 10, 30, 12, 30, 14, 30, 835, 11, 30, 3,
	30, 5, 30, 838, 10, 30, 3, 30, 7, 30, 841, 10, 30, 12, 30, 14, 30, 844,
	11, 30, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31,
	3, 31, 5, 31, 856, 10, 31, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 7, 32, 863,
	10, 32, 12, 32, 14, 32, 866, 11, 32, 3, 32, 3, 32, 3, 32, 7, 32, 871, 10,
	32, 12, 32, 14, 32, 874, 11, 32, 3, 32, 3, 32, 3, 33, 3, 33, 3, 34, 3,
	34, 3, 34, 3, 34, 7, 34, 884, 10, 34, 12, 34, 14, 34, 887, 11, 34, 3, 34,
	3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 7, 34, 899,
	10, 34, 12, 34, 14, 34, 902, 11, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34,
	3, 34, 5, 34, 910, 10, 34, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3,
	35, 3, 35, 3, 35, 7, 35, 921, 10, 35, 12, 35, 14, 35, 924, 11, 35, 3, 35,
	3, 35, 5, 35, 928, 10, 35, 3, 35, 3, 35, 3, 36, 3, 36, 3, 36, 3, 36, 7,
	36, 936, 10, 36, 12, 36, 14, 36, 939, 11, 36, 3, 36, 3, 36, 3, 36, 5, 36,
	944, 10, 36, 3, 36, 3, 36, 3, 37, 3, 37, 3, 37, 3, 37, 7, 37, 952, 10,
	37, 12, 37, 14, 37, 955, 11, 37, 3, 37, 3, 37, 3, 37, 5, 37, 960, 10, 37,
	3, 37, 3, 37, 3, 38, 3, 38, 3, 38, 3, 38, 7, 38, 968, 10, 38, 12, 38, 14,
	38, 971, 11, 38, 3, 38, 3, 38, 3, 39, 3, 39, 3, 39, 3, 39, 7, 39, 979,
	10, 39, 12, 39, 14, 39, 982, 11, 39, 3, 39, 3, 39, 3, 39, 3, 39, 5, 39,
	988, 10, 39, 3, 39, 3, 39, 3, 39, 3, 40, 3, 40, 3, 40, 3, 40, 7, 40, 997,
	10, 40, 12, 40, 14, 40, 1000, 11, 40, 3, 40, 3, 40, 3, 40, 3, 40, 7, 40,
	1006, 10, 40, 12, 40, 14, 40, 1009, 11, 40, 3, 40, 3, 40, 3, 40, 3, 41,
	3, 41, 3, 42, 3, 42, 3, 42, 3, 42, 7, 42, 1020, 10, 42, 12, 42, 14, 42,
	1023, 11, 42, 3, 42, 3, 42, 3, 42, 7, 42, 1028, 10, 42, 12, 42, 14, 42,
	1031, 11, 42, 7, 42, 1033, 10, 42, 12, 42, 14, 42, 1036, 11, 42, 3, 42,
	3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 7, 42, 1045, 10, 42, 12, 42,
	14, 42, 1048, 11, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 5, 42,
	1056, 10, 42, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 7, 43, 1063, 10, 43, 12,
	43, 14, 43, 1066, 11, 43, 3, 43, 3, 43, 3, 43, 3, 44, 7, 44, 1072, 10,
	44, 12, 44, 14, 44, 1075, 11, 44, 3, 44, 7, 44, 1078, 10, 44, 12, 44, 14,
	44, 1081, 11, 44, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45,
	3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3,
	45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45,
	3, 45, 3, 45, 7, 45, 1114, 10, 45, 12, 45, 14, 45, 1117, 11, 45, 3, 45,
	3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 7, 45, 1126, 10, 45, 12, 45,
	14, 45, 1129, 11, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45,
	7, 45, 1138, 10, 45, 12, 45, 14, 45, 1141, 11, 45, 3, 45, 3, 45, 3, 45,
	3, 45, 3, 45, 3, 45, 3, 45, 7, 45, 1150, 10, 45, 12, 45, 14, 45, 1153,
	11, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 7, 45, 1162, 10,
	45, 12, 45, 14, 45, 1165, 11, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3,
	45, 3, 45, 7, 45, 1174, 10, 45, 12, 45, 14, 45, 1177, 11, 45, 3, 45, 3,
	45, 3, 45, 3, 45, 3, 45, 3, 45, 7, 45, 1185, 10, 45, 12, 45, 14, 45, 1188,
	11, 45, 5, 45, 1190, 10, 45, 3, 45, 5, 45, 1193, 10, 45, 3, 45, 5, 45,
	1196, 10, 45, 3, 45, 3, 45, 3, 45, 3, 45, 7, 45, 1202, 10, 45, 12, 45,
	14, 45, 1205, 11, 45, 5, 45, 1207, 10, 45, 3, 45, 5, 45, 1210, 10, 45,
	3, 45, 5, 45, 1213, 10, 45, 3, 45, 3, 45, 3, 45, 3, 45, 7, 45, 1219, 10,
	45, 12, 45, 14, 45, 1222, 11, 45, 5, 45, 1224, 10, 45, 3, 45, 5, 45, 1227,
	10, 45, 3, 45, 5, 45, 1230, 10, 45, 3, 45, 3, 45, 3, 45, 3, 45, 7, 45,
	1236, 10, 45, 12, 45, 14, 45, 1239, 11, 45, 5, 45, 1241, 10, 45, 3, 45,
	5, 45, 1244, 10, 45, 3, 45, 5, 45, 1247, 10, 45, 3, 45, 3, 45, 3, 45, 3,
	45, 3, 45, 3, 45, 5, 45, 1255, 10, 45, 3, 46, 3, 46, 3, 46, 7, 46, 1260,
	10, 46, 12, 46, 14, 46, 1263, 11, 46, 3, 46, 3, 46, 3, 46, 3, 47, 3, 47,
	3, 47, 3, 47, 3, 47, 3, 47, 7, 47, 1274, 10, 47, 12, 47, 14, 47, 1277,
	11, 47, 5, 47, 1279, 10, 47, 5, 47, 1281, 10, 47, 3, 47, 3, 47, 3, 47,
	7, 47, 1286, 10, 47, 12, 47, 14, 47, 1289, 11, 47, 3, 48, 3, 48, 5, 48,
	1293, 10, 48, 3, 49, 3, 49, 3, 49, 3, 49, 3, 49, 7, 49, 1300, 10, 49, 12,
	49, 14, 49, 1303, 11, 49, 5, 49, 1305, 10, 49, 5, 49, 1307, 10, 49, 3,
	50, 3, 50, 3, 50, 7, 50, 1312, 10, 50, 12, 50, 14, 50, 1315, 11, 50, 3,
	50, 3, 50, 3, 50, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51,
	3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 5, 51, 1334, 10, 51, 3, 51, 3,
	51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51,
	3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3,
	51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51,
	3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3,
	51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51,
	3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 7, 51, 1399,
	10, 51, 12, 51, 14, 51, 1402, 11, 51, 3, 52, 3, 52, 3, 52, 3, 52, 3, 52,
	3, 52, 7, 52, 1410, 10, 52, 12, 52, 14, 52, 1413, 11, 52, 7, 52, 1415,
	10, 52, 12, 52, 14, 52, 1418, 11, 52, 3, 53, 3, 53, 3, 54, 3, 54, 3, 54,
	3, 54, 3, 54, 7, 54, 1427, 10, 54, 12, 54, 14, 54, 1430, 11, 54, 5, 54,
	1432, 10, 54, 3, 54, 3, 54, 3, 55, 3, 55, 3, 55, 3, 55, 7, 55, 1440, 10,
	55, 12, 55, 14, 55, 1443, 11, 55, 3, 56, 3, 56, 3, 56, 3, 56, 3, 56, 3,
	56, 3, 56, 3, 56, 3, 56, 3, 56, 3, 56, 3, 56, 3, 56, 3, 56, 7, 56, 1459,
	10, 56, 12, 56, 14, 56, 1462, 11, 56, 5, 56, 1464, 10, 56, 3, 56, 3, 56,
	3, 56, 3, 56, 3, 56, 7, 56, 1471, 10, 56, 12, 56, 14, 56, 1474, 11, 56,
	7, 56, 1476, 10, 56, 12, 56, 14, 56, 1479, 11, 56, 3, 56, 3, 56, 3, 56,
	3, 56, 3, 56, 5, 56, 1486, 10, 56, 3, 56, 3, 56, 3, 56, 7, 56, 1491, 10,
	56, 12, 56, 14, 56, 1494, 11, 56, 5, 56, 1496, 10, 56, 3, 56, 3, 56, 3,
	56, 3, 56, 3, 56, 3, 56, 7, 56, 1504, 10, 56, 12, 56, 14, 56, 1507, 11,
	56, 5, 56, 1509, 10, 56, 3, 56, 3, 56, 3, 56, 3, 56, 3, 56, 3, 56, 3, 56,
	3, 56, 3, 56, 3, 56, 5, 56, 1521, 10, 56, 3, 57, 3, 57, 3, 57, 7, 57, 1526,
	10, 57, 12, 57, 14, 57, 1529, 11, 57, 3, 57, 3, 57, 3, 57, 3, 58, 3, 58,
	5, 58, 1536, 10, 58, 3, 59, 3, 59, 3, 60, 3, 60, 3, 60, 3, 256, 5, 58,
	92, 100, 61, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32,
	34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68,
	70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104,
	106, 108, 110, 112, 114, 116, 118, 2, 4, 4, 2, 54, 55, 57, 57, 3, 2, 67,
	68, 2, 1762, 2, 155, 3, 2, 2, 2, 4, 157, 3, 2, 2, 2, 6, 175, 3, 2, 2, 2,
	8, 244, 3, 2, 2, 2, 10, 296, 3, 2, 2, 2, 12, 300, 3, 2, 2, 2, 14, 302,
	3, 2, 2, 2, 16, 322, 3, 2, 2, 2, 18, 342, 3, 2, 2, 2, 20, 356, 3, 2, 2,
	2, 22, 373, 3, 2, 2, 2, 24, 388, 3, 2, 2, 2, 26, 418, 3, 2, 2, 2, 28, 420,
	3, 2, 2, 2, 30, 436, 3, 2, 2, 2, 32, 447, 3, 2, 2, 2, 34, 459, 3, 2, 2,
	2, 36, 471, 3, 2, 2, 2, 38, 483, 3, 2, 2, 2, 40, 496, 3, 2, 2, 2, 42, 498,
	3, 2, 2, 2, 44, 521, 3, 2, 2, 2, 46, 550, 3, 2, 2, 2, 48, 564, 3, 2, 2,
	2, 50, 568, 3, 2, 2, 2, 52, 597, 3, 2, 2, 2, 54, 611, 3, 2, 2, 2, 56, 637,
	3, 2, 2, 2, 58, 813, 3, 2, 2, 2, 60, 855, 3, 2, 2, 2, 62, 857, 3, 2, 2,
	2, 64, 877, 3, 2, 2, 2, 66, 909, 3, 2, 2, 2, 68, 911, 3, 2, 2, 2, 70, 931,
	3, 2, 2, 2, 72, 947, 3, 2, 2, 2, 74, 963, 3, 2, 2, 2, 76, 974, 3, 2, 2,
	2, 78, 992, 3, 2, 2, 2, 80, 1013, 3, 2, 2, 2, 82, 1055, 3, 2, 2, 2, 84,
	1057, 3, 2, 2, 2, 86, 1073, 3, 2, 2, 2, 88, 1254, 3, 2, 2, 2, 90, 1256,
	3, 2, 2, 2, 92, 1280, 3, 2, 2, 2, 94, 1292, 3, 2, 2, 2, 96, 1294, 3, 2,
	2, 2, 98, 1308, 3, 2, 2, 2, 100, 1333, 3, 2, 2, 2, 102, 1403, 3, 2, 2,
	2, 104, 1419, 3, 2, 2, 2, 106, 1421, 3, 2, 2, 2, 108, 1435, 3, 2, 2, 2,
	110, 1520, 3, 2, 2, 2, 112, 1522, 3, 2, 2, 2, 114, 1535, 3, 2, 2, 2, 116,
	1537, 3, 2, 2, 2, 118, 1539, 3, 2, 2, 2, 120, 122, 5, 54, 28, 2, 121, 120,
	3, 2, 2, 2, 122, 125, 3, 2, 2, 2, 123, 121, 3, 2, 2, 2, 123, 124, 3, 2,
	2, 2, 124, 126, 3, 2, 2, 2, 125, 123, 3, 2, 2, 2, 126, 156, 5, 4, 3, 2,
	127, 129, 5, 54, 28, 2, 128, 127, 3, 2, 2, 2, 129, 132, 3, 2, 2, 2, 130,
	128, 3, 2, 2, 2, 130, 131, 3, 2, 2, 2, 131, 133, 3, 2, 2, 2, 132, 130,
	3, 2, 2, 2, 133, 156, 5, 6, 4, 2, 134, 136, 5, 54, 28, 2, 135, 134, 3,
	2, 2, 2, 136, 139, 3, 2, 2, 2, 137, 135, 3, 2, 2, 2, 137, 138, 3, 2, 2,
	2, 138, 140, 3, 2, 2, 2, 139, 137, 3, 2, 2, 2, 140, 156, 5, 14, 8, 2, 141,
	143, 5, 54, 28, 2, 142, 141, 3, 2, 2, 2, 143, 146, 3, 2, 2, 2, 144, 142,
	3, 2, 2, 2, 144, 145, 3, 2, 2, 2, 145, 147, 3, 2, 2, 2, 146, 144, 3, 2,
	2, 2, 147, 156, 5, 16, 9, 2, 148, 150, 5, 54, 28, 2, 149, 148, 3, 2, 2,
	2, 150, 153, 3, 2, 2, 2, 151, 149, 3, 2, 2, 2, 151, 152, 3, 2, 2, 2, 152,
	154, 3, 2, 2, 2, 153, 151, 3, 2, 2, 2, 154, 156, 5, 8, 5, 2, 155, 123,
	3, 2, 2, 2, 155, 130, 3, 2, 2, 2, 155, 137, 3, 2, 2, 2, 155, 144, 3, 2,
	2, 2, 155, 151, 3, 2, 2, 2, 156, 3, 3, 2, 2, 2, 157, 158, 5, 118, 60, 2,
	158, 159, 7, 3, 2, 2, 159, 164, 7, 4, 2, 2, 160, 162, 5, 24, 13, 2, 161,
	163, 5, 42, 22, 2, 162, 161, 3, 2, 2, 2, 162, 163, 3, 2, 2, 2, 163, 165,
	3, 2, 2, 2, 164, 160, 3, 2, 2, 2, 164, 165, 3, 2, 2, 2, 165, 169, 3, 2,
	2, 2, 166, 168, 5, 54, 28, 2, 167, 166, 3, 2, 2, 2, 168, 171, 3, 2, 2,
	2, 169, 167, 3, 2, 2, 2, 169, 170, 3, 2, 2, 2, 170, 172, 3, 2, 2, 2, 171,
	169, 3, 2, 2, 2, 172, 173, 7, 5, 2, 2, 173, 174, 5, 118, 60, 2, 174, 5,
	3, 2, 2, 2, 175, 176, 5, 118, 60, 2, 176, 177, 7, 3, 2, 2, 177, 179, 7,
	6, 2, 2, 178, 180, 5, 24, 13, 2, 179, 178, 3, 2, 2, 2, 179, 180, 3, 2,
	2, 2, 180, 181, 3, 2, 2, 2, 181, 182, 7, 7, 2, 2, 182, 187, 5, 118, 60,
	2, 183, 184, 7, 8, 2, 2, 184, 186, 5, 118, 60, 2, 185, 183, 3, 2, 2, 2,
	186, 189, 3, 2, 2, 2, 187, 185, 3, 2, 2, 2, 187, 188, 3, 2, 2, 2, 188,
	199, 3, 2, 2, 2, 189, 187, 3, 2, 2, 2, 190, 191, 7, 9, 2, 2, 191, 196,
	5, 118, 60, 2, 192, 193, 7, 8, 2, 2, 193, 195, 5, 118, 60, 2, 194, 192,
	3, 2, 2, 2, 195, 198, 3, 2, 2, 2, 196, 194, 3, 2, 2, 2, 196, 197, 3, 2,
	2, 2, 197, 200, 3, 2, 2, 2, 198, 196, 3, 2, 2, 2, 199, 190, 3, 2, 2, 2,
	199, 200, 3, 2, 2, 2, 200, 202, 3, 2, 2, 2, 201, 203, 5, 42, 22, 2, 202,
	201, 3, 2, 2, 2, 202, 203, 3, 2, 2, 2, 203, 207, 3, 2, 2, 2, 204, 206,
	5, 54, 28, 2, 205, 204, 3, 2, 2, 2, 206, 209, 3, 2, 2, 2, 207, 205, 3,
	2, 2, 2, 207, 208, 3, 2, 2, 2, 208, 213, 3, 2, 2, 2, 209, 207, 3, 2, 2,
	2, 210, 212, 5, 52, 27, 2, 211, 210, 3, 2, 2, 2, 212, 215, 3, 2, 2, 2,
	213, 211, 3, 2, 2, 2, 213, 214, 3, 2, 2, 2, 214, 220, 3, 2, 2, 2, 215,
	213, 3, 2, 2, 2, 216, 217, 7, 10, 2, 2, 217, 218, 5, 86, 44, 2, 218, 219,
	7, 5, 2, 2, 219, 221, 3, 2, 2, 2, 220, 216, 3, 2, 2, 2, 220, 221, 3, 2,
	2, 2, 221, 226, 3, 2, 2, 2, 222, 223, 7, 11, 2, 2, 223, 224, 5, 86, 44,
	2, 224, 225, 7, 5, 2, 2, 225, 227, 3, 2, 2, 2, 226, 222, 3, 2, 2, 2, 226,
	227, 3, 2, 2, 2, 227, 231, 3, 2, 2, 2, 228, 230, 5, 10, 6, 2, 229, 228,
	3, 2, 2, 2, 230, 233, 3, 2, 2, 2, 231, 229, 3, 2, 2, 2, 231, 232, 3, 2,
	2, 2, 232, 234, 3, 2, 2, 2, 233, 231, 3, 2, 2, 2, 234, 238, 5, 18, 10,
	2, 235, 237, 5, 10, 6, 2, 236, 235, 3, 2, 2, 2, 237, 240, 3, 2, 2, 2, 238,
	236, 3, 2, 2, 2, 238, 239, 3, 2, 2, 2, 239, 241, 3, 2, 2, 2, 240, 238,
	3, 2, 2, 2, 241, 242, 7, 5, 2, 2, 242, 243, 5, 118, 60, 2, 243, 7, 3, 2,
	2, 2, 244, 245, 5, 118, 60, 2, 245, 246, 7, 3, 2, 2, 246, 248, 7, 12, 2,
	2, 247, 249, 5, 24, 13, 2, 248, 247, 3, 2, 2, 2, 248, 249, 3, 2, 2, 2,
	249, 250, 3, 2, 2, 2, 250, 251, 7, 7, 2, 2, 251, 256, 5, 40, 21, 2, 252,
	253, 7, 8, 2, 2, 253, 255, 5, 40, 21, 2, 254, 252, 3, 2, 2, 2, 255, 258,
	3, 2, 2, 2, 256, 257, 3, 2, 2, 2, 256, 254, 3, 2, 2, 2, 257, 260, 3, 2,
	2, 2, 258, 256, 3, 2, 2, 2, 259, 261, 5, 42, 22, 2, 260, 259, 3, 2, 2,
	2, 260, 261, 3, 2, 2, 2, 261, 265, 3, 2, 2, 2, 262, 264, 5, 54, 28, 2,
	263, 262, 3, 2, 2, 2, 264, 267, 3, 2, 2, 2, 265, 263, 3, 2, 2, 2, 265,
	266, 3, 2, 2, 2, 266, 268, 3, 2, 2, 2, 267, 265, 3, 2, 2, 2, 268, 269,
	7, 13, 2, 2, 269, 270, 7, 3, 2, 2, 270, 274, 5, 88, 45, 2, 271, 273, 5,
	54, 28, 2, 272, 271, 3, 2, 2, 2, 273, 276, 3, 2, 2, 2, 274, 272, 3, 2,
	2, 2, 274, 275, 3, 2, 2, 2, 275, 280, 3, 2, 2, 2, 276, 274, 3, 2, 2, 2,
	277, 279, 5, 56, 29, 2, 278, 277, 3, 2, 2, 2, 279, 282, 3, 2, 2, 2, 280,
	278, 3, 2, 2, 2, 280, 281, 3, 2, 2, 2, 281, 283, 3, 2, 2, 2, 282, 280,
	3, 2, 2, 2, 283, 287, 5, 12, 7, 2, 284, 286, 5, 12, 7, 2, 285, 284, 3,
	2, 2, 2, 286, 289, 3, 2, 2, 2, 287, 285, 3, 2, 2, 2, 287, 288, 3, 2, 2,
	2, 288, 290, 3, 2, 2, 2, 289, 287, 3, 2, 2, 2, 290, 291, 7, 5, 2, 2, 291,
	292, 5, 118, 60, 2, 292, 9, 3, 2, 2, 2, 293, 297, 5, 18, 10, 2, 294, 297,
	5, 20, 11, 2, 295, 297, 5, 12, 7, 2, 296, 293, 3, 2, 2, 2, 296, 294, 3,
	2, 2, 2, 296, 295, 3, 2, 2, 2, 297, 11, 3, 2, 2, 2, 298, 301, 5, 14, 8,
	2, 299, 301, 5, 16, 9, 2, 300, 298, 3, 2, 2, 2, 300, 299, 3, 2, 2, 2, 301,
	13, 3, 2, 2, 2, 302, 303, 5, 118, 60, 2, 303, 304, 7, 3, 2, 2, 304, 306,
	7, 14, 2, 2, 305, 307, 5, 24, 13, 2, 306, 305, 3, 2, 2, 2, 306, 307, 3,
	2, 2, 2, 307, 308, 3, 2, 2, 2, 308, 310, 5, 28, 15, 2, 309, 311, 5, 32,
	17, 2, 310, 309, 3, 2, 2, 2, 310, 311, 3, 2, 2, 2, 311, 313, 3, 2, 2, 2,
	312, 314, 5, 36, 19, 2, 313, 312, 3, 2, 2, 2, 313, 314, 3, 2, 2, 2, 314,
	316, 3, 2, 2, 2, 315, 317, 5, 42, 22, 2, 316, 315, 3, 2, 2, 2, 316, 317,
	3, 2, 2, 2, 317, 318, 3, 2, 2, 2, 318, 319, 5, 22, 12, 2, 319, 320, 7,
	5, 2, 2, 320, 321, 5, 118, 60, 2, 321, 15, 3, 2, 2, 2, 322, 323, 5, 118,
	60, 2, 323, 324, 7, 3, 2, 2, 324, 326, 7, 15, 2, 2, 325, 327, 5, 24, 13,
	2, 326, 325, 3, 2, 2, 2, 326, 327, 3, 2, 2, 2, 327, 328, 3, 2, 2, 2, 328,
	330, 5, 28, 15, 2, 329, 331, 5, 34, 18, 2, 330, 329, 3, 2, 2, 2, 330, 331,
	3, 2, 2, 2, 331, 333, 3, 2, 2, 2, 332, 334, 5, 36, 19, 2, 333, 332, 3,
	2, 2, 2, 333, 334, 3, 2, 2, 2, 334, 336, 3, 2, 2, 2, 335, 337, 5, 42, 22,
	2, 336, 335, 3, 2, 2, 2, 336, 337, 3, 2, 2, 2, 337, 338, 3, 2, 2, 2, 338,
	339, 5, 22, 12, 2, 339, 340, 7, 5, 2, 2, 340, 341, 5, 118, 60, 2, 341,
	17, 3, 2, 2, 2, 342, 343, 5, 118, 60, 2, 343, 344, 7, 3, 2, 2, 344, 345,
	7, 16, 2, 2, 345, 347, 5, 28, 15, 2, 346, 348, 5, 32, 17, 2, 347, 346,
	3, 2, 2, 2, 347, 348, 3, 2, 2, 2, 348, 350, 3, 2, 2, 2, 349, 351, 5, 36,
	19, 2, 350, 349, 3, 2, 2, 2, 350, 351, 3, 2, 2, 2, 351, 352, 3, 2, 2, 2,
	352, 353, 5, 22, 12, 2, 353, 354, 7, 5, 2, 2, 354, 355, 5, 118, 60, 2,
	355, 19, 3, 2, 2, 2, 356, 357, 5, 118, 60, 2, 357, 358, 7, 3, 2, 2, 358,
	359, 7, 17, 2, 2, 359, 361, 5, 28, 15, 2, 360, 362, 5, 32, 17, 2, 361,
	360, 3, 2, 2, 2, 361, 362, 3, 2, 2, 2, 362, 364, 3, 2, 2, 2, 363, 365,
	5, 36, 19, 2, 364, 363, 3, 2, 2, 2, 364, 365, 3, 2, 2, 2, 365, 366, 3,
	2, 2, 2, 366, 367, 5, 22, 12, 2, 367, 368, 7, 5, 2, 2, 368, 369, 5, 118,
	60, 2, 369, 21, 3, 2, 2, 2, 370, 372, 5, 54, 28, 2, 371, 370, 3, 2, 2,
	2, 372, 375, 3, 2, 2, 2, 373, 371, 3, 2, 2, 2, 373, 374, 3, 2, 2, 2, 374,
	379, 3, 2, 2, 2, 375, 373, 3, 2, 2, 2, 376, 378, 5, 56, 29, 2, 377, 376,
	3, 2, 2, 2, 378, 381, 3, 2, 2, 2, 379, 377, 3, 2, 2, 2, 379, 380, 3, 2,
	2, 2, 380, 385, 3, 2, 2, 2, 381, 379, 3, 2, 2, 2, 382, 384, 5, 58, 30,
	2, 383, 382, 3, 2, 2, 2, 384, 387, 3, 2, 2, 2, 385, 383, 3, 2, 2, 2, 385,
	386, 3, 2, 2, 2, 386, 23, 3, 2, 2, 2, 387, 385, 3, 2, 2, 2, 388, 393, 5,
	26, 14, 2, 389, 390, 7, 8, 2, 2, 390, 392, 5, 26, 14, 2, 391, 389, 3, 2,
	2, 2, 392, 395, 3, 2, 2, 2, 393, 391, 3, 2, 2, 2, 393, 394, 3, 2, 2, 2,
	394, 25, 3, 2, 2, 2, 395, 393, 3, 2, 2, 2, 396, 401, 5, 118, 60, 2, 397,
	398, 7, 8, 2, 2, 398, 400, 5, 118, 60, 2, 399, 397, 3, 2, 2, 2, 400, 403,
	3, 2, 2, 2, 401, 399, 3, 2, 2, 2, 401, 402, 3, 2, 2, 2, 402, 404, 3, 2,
	2, 2, 403, 401, 3, 2, 2, 2, 404, 405, 7, 18, 2, 2, 405, 406, 7, 19, 2,
	2, 406, 419, 3, 2, 2, 2, 407, 412, 5, 118, 60, 2, 408, 409, 7, 8, 2, 2,
	409, 411, 5, 118, 60, 2, 410, 408, 3, 2, 2, 2, 411, 414, 3, 2, 2, 2, 412,
	410, 3, 2, 2, 2, 412, 413, 3, 2, 2, 2, 413, 415, 3, 2, 2, 2, 414, 412,
	3, 2, 2, 2, 415, 416, 7, 18, 2, 2, 416, 417, 5, 88, 45, 2, 417, 419, 3,
	2, 2, 2, 418, 396, 3, 2, 2, 2, 418, 407, 3, 2, 2, 2, 419, 27, 3, 2, 2,
	2, 420, 431, 7, 20, 2, 2, 421, 426, 5, 30, 16, 2, 422, 423, 7, 8, 2, 2,
	423, 425, 5, 30, 16, 2, 424, 422, 3, 2, 2, 2, 425, 428, 3, 2, 2, 2, 426,
	424, 3, 2, 2, 2, 426, 427, 3, 2, 2, 2, 427, 430, 3, 2, 2, 2, 428, 426,
	3, 2, 2, 2, 429, 421, 3, 2, 2, 2, 430, 433, 3, 2, 2, 2, 431, 429, 3, 2,
	2, 2, 431, 432, 3, 2, 2, 2, 432, 434, 3, 2, 2, 2, 433, 431, 3, 2, 2, 2,
	434, 435, 7, 21, 2, 2, 435, 29, 3, 2, 2, 2, 436, 441, 5, 118, 60, 2, 437,
	438, 7, 8, 2, 2, 438, 440, 5, 118, 60, 2, 439, 437, 3, 2, 2, 2, 440, 443,
	3, 2, 2, 2, 441, 439, 3, 2, 2, 2, 441, 442, 3, 2, 2, 2, 442, 444, 3, 2,
	2, 2, 443, 441, 3, 2, 2, 2, 444, 445, 7, 18, 2, 2, 445, 446, 5, 88, 45,
	2, 446, 31, 3, 2, 2, 2, 447, 448, 7, 22, 2, 2, 448, 449, 7, 20, 2, 2, 449,
	454, 5, 88, 45, 2, 450, 451, 7, 8, 2, 2, 451, 453, 5, 88, 45, 2, 452, 450,
	3, 2, 2, 2, 453, 456, 3, 2, 2, 2, 454, 452, 3, 2, 2, 2, 454, 455, 3, 2,
	2, 2, 455, 457, 3, 2, 2, 2, 456, 454, 3, 2, 2, 2, 457, 458, 7, 21, 2, 2,
	458, 33, 3, 2, 2, 2, 459, 460, 7, 23, 2, 2, 460, 461, 7, 20, 2, 2, 461,
	466, 5, 88, 45, 2, 462, 463, 7, 8, 2, 2, 463, 465, 5, 88, 45, 2, 464, 462,
	3, 2, 2, 2, 465, 468, 3, 2, 2, 2, 466, 464, 3, 2, 2, 2, 466, 467, 3, 2,
	2, 2, 467, 469, 3, 2, 2, 2, 468, 466, 3, 2, 2, 2, 469, 470, 7, 21, 2, 2,
	470, 35, 3, 2, 2, 2, 471, 472, 7, 24, 2, 2, 472, 473, 7, 20, 2, 2, 473,
	478, 5, 38, 20, 2, 474, 475, 7, 8, 2, 2, 475, 477, 5, 38, 20, 2, 476, 474,
	3, 2, 2, 2, 477, 480, 3, 2, 2, 2, 478, 476, 3, 2, 2, 2, 478, 479, 3, 2,
	2, 2, 479, 481, 3, 2, 2, 2, 480, 478, 3, 2, 2, 2, 481, 482, 7, 21, 2, 2,
	482, 37, 3, 2, 2, 2, 483, 492, 5, 116, 59, 2, 484, 489, 5, 88, 45, 2, 485,
	486, 7, 8, 2, 2, 486, 488, 5, 88, 45, 2, 487, 485, 3, 2, 2, 2, 488, 491,
	3, 2, 2, 2, 489, 487, 3, 2, 2, 2, 489, 490, 3, 2, 2, 2, 490, 493, 3, 2,
	2, 2, 491, 489, 3, 2, 2, 2, 492, 484, 3, 2, 2, 2, 492, 493, 3, 2, 2, 2,
	493, 39, 3, 2, 2, 2, 494, 497, 5, 118, 60, 2, 495, 497, 7, 25, 2, 2, 496,
	494, 3, 2, 2, 2, 496, 495, 3, 2, 2, 2, 497, 41, 3, 2, 2, 2, 498, 499, 7,
	26, 2, 2, 499, 504, 5, 44, 23, 2, 500, 501, 7, 8, 2, 2, 501, 503, 5, 44,
	23, 2, 502, 500, 3, 2, 2, 2, 503, 506, 3, 2, 2, 2, 504, 502, 3, 2, 2, 2,
	504, 505, 3, 2, 2, 2, 505, 43, 3, 2, 2, 2, 506, 504, 3, 2, 2, 2, 507, 508,
	5, 118, 60, 2, 508, 509, 7, 27, 2, 2, 509, 514, 5, 48, 25, 2, 510, 511,
	7, 8, 2, 2, 511, 513, 5, 48, 25, 2, 512, 510, 3, 2, 2, 2, 513, 516, 3,
	2, 2, 2, 514, 512, 3, 2, 2, 2, 514, 515, 3, 2, 2, 2, 515, 522, 3, 2, 2,
	2, 516, 514, 3, 2, 2, 2, 517, 518, 5, 118, 60, 2, 518, 519, 7, 28, 2, 2,
	519, 520, 5, 46, 24, 2, 520, 522, 3, 2, 2, 2, 521, 507, 3, 2, 2, 2, 521,
	517, 3, 2, 2, 2, 522, 45, 3, 2, 2, 2, 523, 541, 5, 118, 60, 2, 524, 525,
	5, 118, 60, 2, 525, 526, 7, 27, 2, 2, 526, 531, 5, 48, 25, 2, 527, 528,
	7, 8, 2, 2, 528, 530, 5, 48, 25, 2, 529, 527, 3, 2, 2, 2, 530, 533, 3,
	2, 2, 2, 531, 529, 3, 2, 2, 2, 531, 532, 3, 2, 2, 2, 532, 537, 3, 2, 2,
	2, 533, 531, 3, 2, 2, 2, 534, 536, 5, 54, 28, 2, 535, 534, 3, 2, 2, 2,
	536, 539, 3, 2, 2, 2, 537, 535, 3, 2, 2, 2, 537, 538, 3, 2, 2, 2, 538,
	541, 3, 2, 2, 2, 539, 537, 3, 2, 2, 2, 540, 523, 3, 2, 2, 2, 540, 524,
	3, 2, 2, 2, 541, 544, 3, 2, 2, 2, 542, 540, 3, 2, 2, 2, 542, 543, 3, 2,
	2, 2, 543, 551, 3, 2, 2, 2, 544, 542, 3, 2, 2, 2, 545, 551, 5, 118, 60,
	2, 546, 547, 5, 92, 47, 2, 547, 548, 7, 29, 2, 2, 548, 549, 5, 116, 59,
	2, 549, 551, 3, 2, 2, 2, 550, 542, 3, 2, 2, 2, 550, 545, 3, 2, 2, 2, 550,
	546, 3, 2, 2, 2, 551, 47, 3, 2, 2, 2, 552, 557, 5, 116, 59, 2, 553, 554,
	7, 8, 2, 2, 554, 556, 5, 116, 59, 2, 555, 553, 3, 2, 2, 2, 556, 559, 3,
	2, 2, 2, 557, 555, 3, 2, 2, 2, 557, 558, 3, 2, 2, 2, 558, 560, 3, 2, 2,
	2, 559, 557, 3, 2, 2, 2, 560, 561, 7, 18, 2, 2, 561, 562, 5, 88, 45, 2,
	562, 565, 3, 2, 2, 2, 563, 565, 7, 25, 2, 2, 564, 552, 3, 2, 2, 2, 564,
	563, 3, 2, 2, 2, 565, 49, 3, 2, 2, 2, 566, 569, 5, 100, 51, 2, 567, 569,
	5, 88, 45, 2, 568, 566, 3, 2, 2, 2, 568, 567, 3, 2, 2, 2, 569, 51, 3, 2,
	2, 2, 570, 572, 7, 30, 2, 2, 571, 570, 3, 2, 2, 2, 571, 572, 3, 2, 2, 2,
	572, 573, 3, 2, 2, 2, 573, 598, 5, 30, 16, 2, 574, 576, 7, 30, 2, 2, 575,
	574, 3, 2, 2, 2, 575, 576, 3, 2, 2, 2, 576, 577, 3, 2, 2, 2, 577, 578,
	5, 118, 60, 2, 578, 579, 7, 18, 2, 2, 579, 580, 5, 88, 45, 2, 580, 581,
	7, 31, 2, 2, 581, 582, 5, 100, 51, 2, 582, 598, 3, 2, 2, 2, 583, 585, 7,
	30, 2, 2, 584, 583, 3, 2, 2, 2, 584, 585, 3, 2, 2, 2, 585, 586, 3, 2, 2,
	2, 586, 591, 5, 30, 16, 2, 587, 588, 7, 8, 2, 2, 588, 590, 5, 30, 16, 2,
	589, 587, 3, 2, 2, 2, 590, 593, 3, 2, 2, 2, 591, 589, 3, 2, 2, 2, 591,
	592, 3, 2, 2, 2, 592, 594, 3, 2, 2, 2, 593, 591, 3, 2, 2, 2, 594, 595,
	7, 31, 2, 2, 595, 596, 5, 106, 54, 2, 596, 598, 3, 2, 2, 2, 597, 571, 3,
	2, 2, 2, 597, 575, 3, 2, 2, 2, 597, 584, 3, 2, 2, 2, 598, 53, 3, 2, 2,
	2, 599, 600, 5, 118, 60, 2, 600, 601, 7, 3, 2, 2, 601, 602, 5, 50, 26,
	2, 602, 612, 3, 2, 2, 2, 603, 604, 5, 118, 60, 2, 604, 605, 7, 3, 2, 2,
	605, 606, 5, 46, 24, 2, 606, 612, 3, 2, 2, 2, 607, 608, 5, 118, 60, 2,
	608, 609, 7, 3, 2, 2, 609, 610, 5, 92, 47, 2, 610, 612, 3, 2, 2, 2, 611,
	599, 3, 2, 2, 2, 611, 603, 3, 2, 2, 2, 611, 607, 3, 2, 2, 2, 612, 55, 3,
	2, 2, 2, 613, 614, 7, 32, 2, 2, 614, 638, 5, 30, 16, 2, 615, 616, 7, 32,
	2, 2, 616, 617, 5, 118, 60, 2, 617, 618, 7, 18, 2, 2, 618, 619, 5, 88,
	45, 2, 619, 620, 7, 31, 2, 2, 620, 621, 5, 100, 51, 2, 621, 638, 3, 2,
	2, 2, 622, 623, 7, 32, 2, 2, 623, 628, 5, 30, 16, 2, 624, 625, 7, 8, 2,
	2, 625, 627, 5, 30, 16, 2, 626, 624, 3, 2, 2, 2, 627, 630, 3, 2, 2, 2,
	628, 626, 3, 2, 2, 2, 628, 629, 3, 2, 2, 2, 629, 631, 3, 2, 2, 2, 630,
	628, 3, 2, 2, 2, 631, 632, 7, 31, 2, 2, 632, 635, 5, 106, 54, 2, 633, 634,
	7, 33, 2, 2, 634, 636, 5, 102, 52, 2, 635, 633, 3, 2, 2, 2, 635, 636, 3,
	2, 2, 2, 636, 638, 3, 2, 2, 2, 637, 613, 3, 2, 2, 2, 637, 615, 3, 2, 2,
	2, 637, 622, 3, 2, 2, 2, 638, 57, 3, 2, 2, 2, 639, 640, 8, 30, 1, 2, 640,
	814, 5, 30, 16, 2, 641, 642, 5, 118, 60, 2, 642, 643, 7, 18, 2, 2, 643,
	644, 5, 88, 45, 2, 644, 645, 7, 31, 2, 2, 645, 646, 5, 100, 51, 2, 646,
	814, 3, 2, 2, 2, 647, 652, 5, 30, 16, 2, 648, 649, 7, 8, 2, 2, 649, 651,
	5, 30, 16, 2, 650, 648, 3, 2, 2, 2, 651, 654, 3, 2, 2, 2, 652, 650, 3,
	2, 2, 2, 652, 653, 3, 2, 2, 2, 653, 655, 3, 2, 2, 2, 654, 652, 3, 2, 2,
	2, 655, 656, 7, 31, 2, 2, 656, 659, 5, 106, 54, 2, 657, 658, 7, 33, 2,
	2, 658, 660, 5, 102, 52, 2, 659, 657, 3, 2, 2, 2, 659, 660, 3, 2, 2, 2,
	660, 814, 3, 2, 2, 2, 661, 666, 5, 118, 60, 2, 662, 663, 7, 8, 2, 2, 663,
	665, 5, 118, 60, 2, 664, 662, 3, 2, 2, 2, 665, 668, 3, 2, 2, 2, 666, 664,
	3, 2, 2, 2, 666, 667, 3, 2, 2, 2, 667, 669, 3, 2, 2, 2, 668, 666, 3, 2,
	2, 2, 669, 670, 7, 31, 2, 2, 670, 673, 5, 106, 54, 2, 671, 672, 7, 33,
	2, 2, 672, 674, 5, 102, 52, 2, 673, 671, 3, 2, 2, 2, 673, 674, 3, 2, 2,
	2, 674, 814, 3, 2, 2, 2, 675, 680, 5, 118, 60, 2, 676, 677, 7, 8, 2, 2,
	677, 679, 5, 118, 60, 2, 678, 676, 3, 2, 2, 2, 679, 682, 3, 2, 2, 2, 680,
	678, 3, 2, 2, 2, 680, 681, 3, 2, 2, 2, 681, 683, 3, 2, 2, 2, 682, 680,
	3, 2, 2, 2, 683, 684, 7, 31, 2, 2, 684, 689, 5, 100, 51, 2, 685, 686, 7,
	8, 2, 2, 686, 688, 5, 100, 51, 2, 687, 685, 3, 2, 2, 2, 688, 691, 3, 2,
	2, 2, 689, 687, 3, 2, 2, 2, 689, 690, 3, 2, 2, 2, 690, 814, 3, 2, 2, 2,
	691, 689, 3, 2, 2, 2, 692, 693, 5, 102, 52, 2, 693, 694, 7, 34, 2, 2, 694,
	695, 5, 116, 59, 2, 695, 696, 7, 31, 2, 2, 696, 697, 5, 100, 51, 2, 697,
	814, 3, 2, 2, 2, 698, 700, 5, 102, 52, 2, 699, 701, 5, 100, 51, 2, 700,
	699, 3, 2, 2, 2, 700, 701, 3, 2, 2, 2, 701, 702, 3, 2, 2, 2, 702, 703,
	7, 31, 2, 2, 703, 704, 5, 100, 51, 2, 704, 814, 3, 2, 2, 2, 705, 708, 5,
	106, 54, 2, 706, 707, 7, 33, 2, 2, 707, 709, 5, 102, 52, 2, 708, 706, 3,
	2, 2, 2, 708, 709, 3, 2, 2, 2, 709, 814, 3, 2, 2, 2, 710, 711, 7, 35, 2,
	2, 711, 814, 5, 106, 54, 2, 712, 713, 7, 36, 2, 2, 713, 714, 5, 100, 51,
	2, 714, 715, 7, 37, 2, 2, 715, 716, 5, 86, 44, 2, 716, 717, 7, 5, 2, 2,
	717, 814, 3, 2, 2, 2, 718, 814, 7, 38, 2, 2, 719, 814, 7, 39, 2, 2, 720,
	814, 5, 60, 31, 2, 721, 722, 7, 40, 2, 2, 722, 726, 5, 62, 32, 2, 723,
	725, 5, 62, 32, 2, 724, 723, 3, 2, 2, 2, 725, 728, 3, 2, 2, 2, 726, 724,
	3, 2, 2, 2, 726, 727, 3, 2, 2, 2, 727, 729, 3, 2, 2, 2, 728, 726, 3, 2,
	2, 2, 729, 730, 7, 5, 2, 2, 730, 814, 3, 2, 2, 2, 731, 733, 7, 41, 2, 2,
	732, 731, 3, 2, 2, 2, 732, 733, 3, 2, 2, 2, 733, 734, 3, 2, 2, 2, 734,
	814, 7, 42, 2, 2, 735, 736, 7, 43, 2, 2, 736, 737, 5, 100, 51, 2, 737,
	738, 7, 37, 2, 2, 738, 739, 5, 86, 44, 2, 739, 740, 7, 5, 2, 2, 740, 814,
	3, 2, 2, 2, 741, 814, 5, 66, 34, 2, 742, 814, 5, 68, 35, 2, 743, 814, 5,
	70, 36, 2, 744, 814, 5, 72, 37, 2, 745, 814, 5, 74, 38, 2, 746, 748, 7,
	41, 2, 2, 747, 746, 3, 2, 2, 2, 747, 748, 3, 2, 2, 2, 748, 749, 3, 2, 2,
	2, 749, 758, 7, 44, 2, 2, 750, 755, 5, 100, 51, 2, 751, 752, 7, 8, 2, 2,
	752, 754, 5, 100, 51, 2, 753, 751, 3, 2, 2, 2, 754, 757, 3, 2, 2, 2, 755,
	753, 3, 2, 2, 2, 755, 756, 3, 2, 2, 2, 756, 759, 3, 2, 2, 2, 757, 755,
	3, 2, 2, 2, 758, 750, 3, 2, 2, 2, 758, 759, 3, 2, 2, 2, 759, 814, 3, 2,
	2, 2, 760, 769, 7, 45, 2, 2, 761, 766, 5, 100, 51, 2, 762, 763, 7, 8, 2,
	2, 763, 765, 5, 100, 51, 2, 764, 762, 3, 2, 2, 2, 765, 768, 3, 2, 2, 2,
	766, 764, 3, 2, 2, 2, 766, 767, 3, 2, 2, 2, 767, 770, 3, 2, 2, 2, 768,
	766, 3, 2, 2, 2, 769, 761, 3, 2, 2, 2, 769, 770, 3, 2, 2, 2, 770, 814,
	3, 2, 2, 2, 771, 773, 7, 41, 2, 2, 772, 771, 3, 2, 2, 2, 772, 773, 3, 2,
	2, 2, 773, 774, 3, 2, 2, 2, 774, 775, 7, 46, 2, 2, 775, 784, 5, 116, 59,
	2, 776, 781, 5, 100, 51, 2, 777, 778, 7, 8, 2, 2, 778, 780, 5, 100, 51,
	2, 779, 777, 3, 2, 2, 2, 780, 783, 3, 2, 2, 2, 781, 779, 3, 2, 2, 2, 781,
	782, 3, 2, 2, 2, 782, 785, 3, 2, 2, 2, 783, 781, 3, 2, 2, 2, 784, 776,
	3, 2, 2, 2, 784, 785, 3, 2, 2, 2, 785, 814, 3, 2, 2, 2, 786, 788, 7, 41,
	2, 2, 787, 786, 3, 2, 2, 2, 787, 788, 3, 2, 2, 2, 788, 789, 3, 2, 2, 2,
	789, 790, 7, 47, 2, 2, 790, 799, 5, 116, 59, 2, 791, 796, 5, 100, 51, 2,
	792, 793, 7, 8, 2, 2, 793, 795, 5, 100, 51, 2, 794, 792, 3, 2, 2, 2, 795,
	798, 3, 2, 2, 2, 796, 794, 3, 2, 2, 2, 796, 797, 3, 2, 2, 2, 797, 800,
	3, 2, 2, 2, 798, 796, 3, 2, 2, 2, 799, 791, 3, 2, 2, 2, 799, 800, 3, 2,
	2, 2, 800, 814, 3, 2, 2, 2, 801, 803, 7, 41, 2, 2, 802, 801, 3, 2, 2, 2,
	802, 803, 3, 2, 2, 2, 803, 804, 3, 2, 2, 2, 804, 814, 7, 48, 2, 2, 805,
	807, 7, 41, 2, 2, 806, 805, 3, 2, 2, 2, 806, 807, 3, 2, 2, 2, 807, 808,
	3, 2, 2, 2, 808, 814, 7, 49, 2, 2, 809, 810, 7, 50, 2, 2, 810, 811, 5,
	86, 44, 2, 811, 812, 7, 5, 2, 2, 812, 814, 3, 2, 2, 2, 813, 639, 3, 2,
	2, 2, 813, 641, 3, 2, 2, 2, 813, 647, 3, 2, 2, 2, 813, 661, 3, 2, 2, 2,
	813, 675, 3, 2, 2, 2, 813, 692, 3, 2, 2, 2, 813, 698, 3, 2, 2, 2, 813,
	705, 3, 2, 2, 2, 813, 710, 3, 2, 2, 2, 813, 712, 3, 2, 2, 2, 813, 718,
	3, 2, 2, 2, 813, 719, 3, 2, 2, 2, 813, 720, 3, 2, 2, 2, 813, 721, 3, 2,
	2, 2, 813, 732, 3, 2, 2, 2, 813, 735, 3, 2, 2, 2, 813, 741, 3, 2, 2, 2,
	813, 742, 3, 2, 2, 2, 813, 743, 3, 2, 2, 2, 813, 744, 3, 2, 2, 2, 813,
	745, 3, 2, 2, 2, 813, 747, 3, 2, 2, 2, 813, 760, 3, 2, 2, 2, 813, 772,
	3, 2, 2, 2, 813, 787, 3, 2, 2, 2, 813, 802, 3, 2, 2, 2, 813, 806, 3, 2,
	2, 2, 813, 809, 3, 2, 2, 2, 814, 842, 3, 2, 2, 2, 815, 817, 12, 4, 2, 2,
	816, 818, 7, 41, 2, 2, 817, 816, 3, 2, 2, 2, 817, 818, 3, 2, 2, 2, 818,
	819, 3, 2, 2, 2, 819, 820, 7, 51, 2, 2, 820, 825, 5, 116, 59, 2, 821, 822,
	7, 8, 2, 2, 822, 824, 5, 116, 59, 2, 823, 821, 3, 2, 2, 2, 824, 827, 3,
	2, 2, 2, 825, 823, 3, 2, 2, 2, 825, 826, 3, 2, 2, 2, 826, 841, 3, 2, 2,
	2, 827, 825, 3, 2, 2, 2, 828, 829, 12, 3, 2, 2, 829, 833, 7, 52, 2, 2,
	830, 832, 5, 82, 42, 2, 831, 830, 3, 2, 2, 2, 832, 835, 3, 2, 2, 2, 833,
	831, 3, 2, 2, 2, 833, 834, 3, 2, 2, 2, 834, 837, 3, 2, 2, 2, 835, 833,
	3, 2, 2, 2, 836, 838, 5, 84, 43, 2, 837, 836, 3, 2, 2, 2, 837, 838, 3,
	2, 2, 2, 838, 839, 3, 2, 2, 2, 839, 841, 7, 5, 2, 2, 840, 815, 3, 2, 2,
	2, 840, 828, 3, 2, 2, 2, 841, 844, 3, 2, 2, 2, 842, 840, 3, 2, 2, 2, 842,
	843, 3, 2, 2, 2, 843, 59, 3, 2, 2, 2, 844, 842, 3, 2, 2, 2, 845, 846, 7,
	53, 2, 2, 846, 847, 7, 54, 2, 2, 847, 848, 5, 86, 44, 2, 848, 849, 7, 5,
	2, 2, 849, 856, 3, 2, 2, 2, 850, 851, 7, 53, 2, 2, 851, 852, 7, 55, 2,
	2, 852, 853, 5, 86, 44, 2, 853, 854, 7, 5, 2, 2, 854, 856, 3, 2, 2, 2,
	855, 845, 3, 2, 2, 2, 855, 850, 3, 2, 2, 2, 856, 61, 3, 2, 2, 2, 857, 872,
	5, 64, 33, 2, 858, 859, 7, 56, 2, 2, 859, 864, 5, 30, 16, 2, 860, 861,
	7, 8, 2, 2, 861, 863, 5, 30, 16, 2, 862, 860, 3, 2, 2, 2, 863, 866, 3,
	2, 2, 2, 864, 862, 3, 2, 2, 2, 864, 865, 3, 2, 2, 2, 865, 867, 3, 2, 2,
	2, 866, 864, 3, 2, 2, 2, 867, 868, 7, 28, 2, 2, 868, 869, 5, 106, 54, 2,
	869, 871, 3, 2, 2, 2, 870, 858, 3, 2, 2, 2, 871, 874, 3, 2, 2, 2, 872,
	870, 3, 2, 2, 2, 872, 873, 3, 2, 2, 2, 873, 875, 3, 2, 2, 2, 874, 872,
	3, 2, 2, 2, 875, 876, 5, 86, 44, 2, 876, 63, 3, 2, 2, 2, 877, 878, 9, 2,
	2, 2, 878, 65, 3, 2, 2, 2, 879, 880, 7, 58, 2, 2, 880, 885, 5, 30, 16,
	2, 881, 882, 7, 8, 2, 2, 882, 884, 5, 30, 16, 2, 883, 881, 3, 2, 2, 2,
	884, 887, 3, 2, 2, 2, 885, 883, 3, 2, 2, 2, 885, 886, 3, 2, 2, 2, 886,
	888, 3, 2, 2, 2, 887, 885, 3, 2, 2, 2, 888, 889, 7, 28, 2, 2, 889, 890,
	5, 106, 54, 2, 890, 891, 7, 37, 2, 2, 891, 892, 5, 86, 44, 2, 892, 893,
	7, 5, 2, 2, 893, 910, 3, 2, 2, 2, 894, 895, 7, 58, 2, 2, 895, 900, 5, 118,
	60, 2, 896, 897, 7, 8, 2, 2, 897, 899, 5, 118, 60, 2, 898, 896, 3, 2, 2,
	2, 899, 902, 3, 2, 2, 2, 900, 898, 3, 2, 2, 2, 900, 901, 3, 2, 2, 2, 901,
	903, 3, 2, 2, 2, 902, 900, 3, 2, 2, 2, 903, 904, 7, 28, 2, 2, 904, 905,
	5, 106, 54, 2, 905, 906, 7, 37, 2, 2, 906, 907, 5, 86, 44, 2, 907, 908,
	7, 5, 2, 2, 908, 910, 3, 2, 2, 2, 909, 879, 3, 2, 2, 2, 909, 894, 3, 2,
	2, 2, 910, 67, 3, 2, 2, 2, 911, 912, 7, 59, 2, 2, 912, 913, 5, 100, 51,
	2, 913, 914, 7, 60, 2, 2, 914, 922, 5, 86, 44, 2, 915, 916, 7, 61, 2, 2,
	916, 917, 5, 100, 51, 2, 917, 918, 7, 60, 2, 2, 918, 919, 5, 86, 44, 2,
	919, 921, 3, 2, 2, 2, 920, 915, 3, 2, 2, 2, 921, 924, 3, 2, 2, 2, 922,
	920, 3, 2, 2, 2, 922, 923, 3, 2, 2, 2, 923, 927, 3, 2, 2, 2, 924, 922,
	3, 2, 2, 2, 925, 926, 7, 62, 2, 2, 926, 928, 5, 86, 44, 2, 927, 925, 3,
	2, 2, 2, 927, 928, 3, 2, 2, 2, 928, 929, 3, 2, 2, 2, 929, 930, 7, 5, 2,
	2, 930, 69, 3, 2, 2, 2, 931, 932, 7, 63, 2, 2, 932, 933, 5, 100, 51, 2,
	933, 937, 5, 76, 39, 2, 934, 936, 5, 76, 39, 2, 935, 934, 3, 2, 2, 2, 936,
	939, 3, 2, 2, 2, 937, 935, 3, 2, 2, 2, 937, 938, 3, 2, 2, 2, 938, 943,
	3, 2, 2, 2, 939, 937, 3, 2, 2, 2, 940, 941, 7, 64, 2, 2, 941, 942, 7, 18,
	2, 2, 942, 944, 5, 86, 44, 2, 943, 940, 3, 2, 2, 2, 943, 944, 3, 2, 2,
	2, 944, 945, 3, 2, 2, 2, 945, 946, 7, 5, 2, 2, 946, 71, 3, 2, 2, 2, 947,
	948, 7, 65, 2, 2, 948, 949, 5, 100, 51, 2, 949, 953, 5, 78, 40, 2, 950,
	952, 5, 78, 40, 2, 951, 950, 3, 2, 2, 2, 952, 955, 3, 2, 2, 2, 953, 951,
	3, 2, 2, 2, 953, 954, 3, 2, 2, 2, 954, 959, 3, 2, 2, 2, 955, 953, 3, 2,
	2, 2, 956, 957, 7, 64, 2, 2, 957, 958, 7, 18, 2, 2, 958, 960, 5, 86, 44,
	2, 959, 956, 3, 2, 2, 2, 959, 960, 3, 2, 2, 2, 960, 961, 3, 2, 2, 2, 961,
	962, 7, 5, 2, 2, 962, 73, 3, 2, 2, 2, 963, 964, 7, 66, 2, 2, 964, 965,
	5, 100, 51, 2, 965, 969, 5, 78, 40, 2, 966, 968, 5, 78, 40, 2, 967, 966,
	3, 2, 2, 2, 968, 971, 3, 2, 2, 2, 969, 967, 3, 2, 2, 2, 969, 970, 3, 2,
	2, 2, 970, 972, 3, 2, 2, 2, 971, 969, 3, 2, 2, 2, 972, 973, 7, 5, 2, 2,
	973, 75, 3, 2, 2, 2, 974, 975, 7, 67, 2, 2, 975, 980, 5, 116, 59, 2, 976,
	977, 7, 8, 2, 2, 977, 979, 5, 116, 59, 2, 978, 976, 3, 2, 2, 2, 979, 982,
	3, 2, 2, 2, 980, 978, 3, 2, 2, 2, 980, 981, 3, 2, 2, 2, 981, 987, 3, 2,
	2, 2, 982, 980, 3, 2, 2, 2, 983, 984, 5, 118, 60, 2, 984, 985, 7, 18, 2,
	2, 985, 986, 5, 88, 45, 2, 986, 988, 3, 2, 2, 2, 987, 983, 3, 2, 2, 2,
	987, 988, 3, 2, 2, 2, 988, 989, 3, 2, 2, 2, 989, 990, 7, 18, 2, 2, 990,
	991, 5, 86, 44, 2, 991, 77, 3, 2, 2, 2, 992, 993, 5, 80, 41, 2, 993, 998,
	5, 116, 59, 2, 994, 995, 7, 8, 2, 2, 995, 997, 5, 116, 59, 2, 996, 994,
	3, 2, 2, 2, 997, 1000, 3, 2, 2, 2, 998, 996, 3, 2, 2, 2, 998, 999, 3, 2,
	2, 2, 999, 1007, 3, 2, 2, 2, 1000, 998, 3, 2, 2, 2, 1001, 1002, 5, 118,
	60, 2, 1002, 1003, 7, 18, 2, 2, 1003, 1004, 5, 88, 45, 2, 1004, 1006, 3,
	2, 2, 2, 1005, 1001, 3, 2, 2, 2, 1006, 1009, 3, 2, 2, 2, 1007, 1005, 3,
	2, 2, 2, 1007, 1008, 3, 2, 2, 2, 1008, 1010, 3, 2, 2, 2, 1009, 1007, 3,
	2, 2, 2, 1010, 1011, 7, 18, 2, 2, 1011, 1012, 5, 86, 44, 2, 1012, 79, 3,
	2, 2, 2, 1013, 1014, 9, 3, 2, 2, 1014, 81, 3, 2, 2, 2, 1015, 1016, 7, 69,
	2, 2, 1016, 1021, 5, 116, 59, 2, 1017, 1018, 7, 8, 2, 2, 1018, 1020, 5,
	116, 59, 2, 1019, 1017, 3, 2, 2, 2, 1020, 1023, 3, 2, 2, 2, 1021, 1019,
	3, 2, 2, 2, 1021, 1022, 3, 2, 2, 2, 1022, 1034, 3, 2, 2, 2, 1023, 1021,
	3, 2, 2, 2, 1024, 1029, 5, 30, 16, 2, 1025, 1026, 7, 8, 2, 2, 1026, 1028,
	5, 30, 16, 2, 1027, 1025, 3, 2, 2, 2, 1028, 1031, 3, 2, 2, 2, 1029, 1027,
	3, 2, 2, 2, 1029, 1030, 3, 2, 2, 2, 1030, 1033, 3, 2, 2, 2, 1031, 1029,
	3, 2, 2, 2, 1032, 1024, 3, 2, 2, 2, 1033, 1036, 3, 2, 2, 2, 1034, 1032,
	3, 2, 2, 2, 1034, 1035, 3, 2, 2, 2, 1035, 1037, 3, 2, 2, 2, 1036, 1034,
	3, 2, 2, 2, 1037, 1038, 7, 18, 2, 2, 1038, 1039, 5, 86, 44, 2, 1039, 1056,
	3, 2, 2, 2, 1040, 1041, 7, 69, 2, 2, 1041, 1046, 5, 116, 59, 2, 1042, 1043,
	7, 8, 2, 2, 1043, 1045, 5, 116, 59, 2, 1044, 1042, 3, 2, 2, 2, 1045, 1048,
	3, 2, 2, 2, 1046, 1044, 3, 2, 2, 2, 1046, 1047, 3, 2, 2, 2, 1047, 1049,
	3, 2, 2, 2, 1048, 1046, 3, 2, 2, 2, 1049, 1050, 7, 20, 2, 2, 1050, 1051,
	7, 70, 2, 2, 1051, 1052, 7, 21, 2, 2, 1052, 1053, 7, 18, 2, 2, 1053, 1054,
	5, 86, 44, 2, 1054, 1056, 3, 2, 2, 2, 1055, 1015, 3, 2, 2, 2, 1055, 1040,
	3, 2, 2, 2, 1056, 83, 3, 2, 2, 2, 1057, 1064, 7, 64, 2, 2, 1058, 1059,
	5, 118, 60, 2, 1059, 1060, 7, 18, 2, 2, 1060, 1061, 5, 88, 45, 2, 1061,
	1063, 3, 2, 2, 2, 1062, 1058, 3, 2, 2, 2, 1063, 1066, 3, 2, 2, 2, 1064,
	1062, 3, 2, 2, 2, 1064, 1065, 3, 2, 2, 2, 1065, 1067, 3, 2, 2, 2, 1066,
	1064, 3, 2, 2, 2, 1067, 1068, 7, 18, 2, 2, 1068, 1069, 5, 86, 44, 2, 1069,
	85, 3, 2, 2, 2, 1070, 1072, 5, 54, 28, 2, 1071, 1070, 3, 2, 2, 2, 1072,
	1075, 3, 2, 2, 2, 1073, 1071, 3, 2, 2, 2, 1073, 1074, 3, 2, 2, 2, 1074,
	1079, 3, 2, 2, 2, 1075, 1073, 3, 2, 2, 2, 1076, 1078, 5, 58, 30, 2, 1077,
	1076, 3, 2, 2, 2, 1078, 1081, 3, 2, 2, 2, 1079, 1077, 3, 2, 2, 2, 1079,
	1080, 3, 2, 2, 2, 1080, 87, 3, 2, 2, 2, 1081, 1079, 3, 2, 2, 2, 1082, 1255,
	7, 71, 2, 2, 1083, 1255, 7, 72, 2, 2, 1084, 1255, 7, 73, 2, 2, 1085, 1255,
	7, 74, 2, 2, 1086, 1255, 7, 75, 2, 2, 1087, 1255, 7, 76, 2, 2, 1088, 1255,
	7, 77, 2, 2, 1089, 1255, 7, 78, 2, 2, 1090, 1255, 7, 79, 2, 2, 1091, 1255,
	7, 13, 2, 2, 1092, 1255, 7, 80, 2, 2, 1093, 1094, 7, 81, 2, 2, 1094, 1095,
	7, 82, 2, 2, 1095, 1096, 5, 96, 49, 2, 1096, 1097, 7, 83, 2, 2, 1097, 1255,
	3, 2, 2, 2, 1098, 1099, 7, 84, 2, 2, 1099, 1100, 7, 82, 2, 2, 1100, 1101,
	5, 96, 49, 2, 1101, 1102, 7, 83, 2, 2, 1102, 1255, 3, 2, 2, 2, 1103, 1104,
	7, 85, 2, 2, 1104, 1105, 7, 82, 2, 2, 1105, 1106, 5, 96, 49, 2, 1106, 1107,
	7, 83, 2, 2, 1107, 1255, 3, 2, 2, 2, 1108, 1109, 7, 86, 2, 2, 1109, 1110,
	7, 82, 2, 2, 1110, 1115, 5, 90, 46, 2, 1111, 1112, 7, 8, 2, 2, 1112, 1114,
	5, 90, 46, 2, 1113, 1111, 3, 2, 2, 2, 1114, 1117, 3, 2, 2, 2, 1115, 1113,
	3, 2, 2, 2, 1115, 1116, 3, 2, 2, 2, 1116, 1118, 3, 2, 2, 2, 1117, 1115,
	3, 2, 2, 2, 1118, 1119, 7, 83, 2, 2, 1119, 1255, 3, 2, 2, 2, 1120, 1121,
	7, 87, 2, 2, 1121, 1122, 7, 82, 2, 2, 1122, 1127, 5, 90, 46, 2, 1123, 1124,
	7, 8, 2, 2, 1124, 1126, 5, 90, 46, 2, 1125, 1123, 3, 2, 2, 2, 1126, 1129,
	3, 2, 2, 2, 1127, 1125, 3, 2, 2, 2, 1127, 1128, 3, 2, 2, 2, 1128, 1130,
	3, 2, 2, 2, 1129, 1127, 3, 2, 2, 2, 1130, 1131, 7, 83, 2, 2, 1131, 1255,
	3, 2, 2, 2, 1132, 1133, 7, 88, 2, 2, 1133, 1134, 7, 82, 2, 2, 1134, 1139,
	5, 90, 46, 2, 1135, 1136, 7, 8, 2, 2, 1136, 1138, 5, 90, 46, 2, 1137, 1135,
	3, 2, 2, 2, 1138, 1141, 3, 2, 2, 2, 1139, 1137, 3, 2, 2, 2, 1139, 1140,
	3, 2, 2, 2, 1140, 1142, 3, 2, 2, 2, 1141, 1139, 3, 2, 2, 2, 1142, 1143,
	7, 83, 2, 2, 1143, 1255, 3, 2, 2, 2, 1144, 1145, 7, 89, 2, 2, 1145, 1146,
	7, 82, 2, 2, 1146, 1151, 5, 90, 46, 2, 1147, 1148, 7, 8, 2, 2, 1148, 1150,
	5, 90, 46, 2, 1149, 1147, 3, 2, 2, 2, 1150, 1153, 3, 2, 2, 2, 1151, 1149,
	3, 2, 2, 2, 1151, 1152, 3, 2, 2, 2, 1152, 1154, 3, 2, 2, 2, 1153, 1151,
	3, 2, 2, 2, 1154, 1155, 7, 83, 2, 2, 1155, 1255, 3, 2, 2, 2, 1156, 1157,
	7, 90, 2, 2, 1157, 1158, 7, 82, 2, 2, 1158, 1163, 5, 90, 46, 2, 1159, 1160,
	7, 8, 2, 2, 1160, 1162, 5, 90, 46, 2, 1161, 1159, 3, 2, 2, 2, 1162, 1165,
	3, 2, 2, 2, 1163, 1161, 3, 2, 2, 2, 1163, 1164, 3, 2, 2, 2, 1164, 1166,
	3, 2, 2, 2, 1165, 1163, 3, 2, 2, 2, 1166, 1167, 7, 83, 2, 2, 1167, 1255,
	3, 2, 2, 2, 1168, 1169, 7, 91, 2, 2, 1169, 1170, 7, 82, 2, 2, 1170, 1175,
	5, 90, 46, 2, 1171, 1172, 7, 8, 2, 2, 1172, 1174, 5, 90, 46, 2, 1173, 1171,
	3, 2, 2, 2, 1174, 1177, 3, 2, 2, 2, 1175, 1173, 3, 2, 2, 2, 1175, 1176,
	3, 2, 2, 2, 1176, 1178, 3, 2, 2, 2, 1177, 1175, 3, 2, 2, 2, 1178, 1179,
	7, 83, 2, 2, 1179, 1255, 3, 2, 2, 2, 1180, 1189, 7, 92, 2, 2, 1181, 1186,
	5, 88, 45, 2, 1182, 1183, 7, 8, 2, 2, 1183, 1185, 5, 88, 45, 2, 1184, 1182,
	3, 2, 2, 2, 1185, 1188, 3, 2, 2, 2, 1186, 1184, 3, 2, 2, 2, 1186, 1187,
	3, 2, 2, 2, 1187, 1190, 3, 2, 2, 2, 1188, 1186, 3, 2, 2, 2, 1189, 1181,
	3, 2, 2, 2, 1189, 1190, 3, 2, 2, 2, 1190, 1192, 3, 2, 2, 2, 1191, 1193,
	5, 32, 17, 2, 1192, 1191, 3, 2, 2, 2, 1192, 1193, 3, 2, 2, 2, 1193, 1195,
	3, 2, 2, 2, 1194, 1196, 5, 36, 19, 2, 1195, 1194, 3, 2, 2, 2, 1195, 1196,
	3, 2, 2, 2, 1196, 1255, 3, 2, 2, 2, 1197, 1206, 7, 93, 2, 2, 1198, 1203,
	5, 88, 45, 2, 1199, 1200, 7, 8, 2, 2, 1200, 1202, 5, 88, 45, 2, 1201, 1199,
	3, 2, 2, 2, 1202, 1205, 3, 2, 2, 2, 1203, 1201, 3, 2, 2, 2, 1203, 1204,
	3, 2, 2, 2, 1204, 1207, 3, 2, 2, 2, 1205, 1203, 3, 2, 2, 2, 1206, 1198,
	3, 2, 2, 2, 1206, 1207, 3, 2, 2, 2, 1207, 1209, 3, 2, 2, 2, 1208, 1210,
	5, 34, 18, 2, 1209, 1208, 3, 2, 2, 2, 1209, 1210, 3, 2, 2, 2, 1210, 1212,
	3, 2, 2, 2, 1211, 1213, 5, 36, 19, 2, 1212, 1211, 3, 2, 2, 2, 1212, 1213,
	3, 2, 2, 2, 1213, 1255, 3, 2, 2, 2, 1214, 1223, 7, 94, 2, 2, 1215, 1220,
	5, 88, 45, 2, 1216, 1217, 7, 8, 2, 2, 1217, 1219, 5, 88, 45, 2, 1218, 1216,
	3, 2, 2, 2, 1219, 1222, 3, 2, 2, 2, 1220, 1218, 3, 2, 2, 2, 1220, 1221,
	3, 2, 2, 2, 1221, 1224, 3, 2, 2, 2, 1222, 1220, 3, 2, 2, 2, 1223, 1215,
	3, 2, 2, 2, 1223, 1224, 3, 2, 2, 2, 1224, 1226, 3, 2, 2, 2, 1225, 1227,
	5, 32, 17, 2, 1226, 1225, 3, 2, 2, 2, 1226, 1227, 3, 2, 2, 2, 1227, 1229,
	3, 2, 2, 2, 1228, 1230, 5, 36, 19, 2, 1229, 1228, 3, 2, 2, 2, 1229, 1230,
	3, 2, 2, 2, 1230, 1255, 3, 2, 2, 2, 1231, 1240, 7, 95, 2, 2, 1232, 1237,
	5, 88, 45, 2, 1233, 1234, 7, 8, 2, 2, 1234, 1236, 5, 88, 45, 2, 1235, 1233,
	3, 2, 2, 2, 1236, 1239, 3, 2, 2, 2, 1237, 1235, 3, 2, 2, 2, 1237, 1238,
	3, 2, 2, 2, 1238, 1241, 3, 2, 2, 2, 1239, 1237, 3, 2, 2, 2, 1240, 1232,
	3, 2, 2, 2, 1240, 1241, 3, 2, 2, 2, 1241, 1243, 3, 2, 2, 2, 1242, 1244,
	5, 32, 17, 2, 1243, 1242, 3, 2, 2, 2, 1243, 1244, 3, 2, 2, 2, 1244, 1246,
	3, 2, 2, 2, 1245, 1247, 5, 36, 19, 2, 1246, 1245, 3, 2, 2, 2, 1246, 1247,
	3, 2, 2, 2, 1247, 1255, 3, 2, 2, 2, 1248, 1249, 7, 96, 2, 2, 1249, 1250,
	7, 82, 2, 2, 1250, 1251, 5, 96, 49, 2, 1251, 1252, 7, 83, 2, 2, 1252, 1255,
	3, 2, 2, 2, 1253, 1255, 5, 92, 47, 2, 1254, 1082, 3, 2, 2, 2, 1254, 1083,
	3, 2, 2, 2, 1254, 1084, 3, 2, 2, 2, 1254, 1085, 3, 2, 2, 2, 1254, 1086,
	3, 2, 2, 2, 1254, 1087, 3, 2, 2, 2, 1254, 1088, 3, 2, 2, 2, 1254, 1089,
	3, 2, 2, 2, 1254, 1090, 3, 2, 2, 2, 1254, 1091, 3, 2, 2, 2, 1254, 1092,
	3, 2, 2, 2, 1254, 1093, 3, 2, 2, 2, 1254, 1098, 3, 2, 2, 2, 1254, 1103,
	3, 2, 2, 2, 1254, 1108, 3, 2, 2, 2, 1254, 1120, 3, 2, 2, 2, 1254, 1132,
	3, 2, 2, 2, 1254, 1144, 3, 2, 2, 2, 1254, 1156, 3, 2, 2, 2, 1254, 1168,
	3, 2, 2, 2, 1254, 1180, 3, 2, 2, 2, 1254, 1197, 3, 2, 2, 2, 1254, 1214,
	3, 2, 2, 2, 1254, 1231, 3, 2, 2, 2, 1254, 1248, 3, 2, 2, 2, 1254, 1253,
	3, 2, 2, 2, 1255, 89, 3, 2, 2, 2, 1256, 1261, 5, 116, 59, 2, 1257, 1258,
	7, 8, 2, 2, 1258, 1260, 5, 116, 59, 2, 1259, 1257, 3, 2, 2, 2, 1260, 1263,
	3, 2, 2, 2, 1261, 1259, 3, 2, 2, 2, 1261, 1262, 3, 2, 2, 2, 1262, 1264,
	3, 2, 2, 2, 1263, 1261, 3, 2, 2, 2, 1264, 1265, 7, 18, 2, 2, 1265, 1266,
	5, 96, 49, 2, 1266, 91, 3, 2, 2, 2, 1267, 1268, 8, 47, 1, 2, 1268, 1281,
	5, 118, 60, 2, 1269, 1278, 5, 118, 60, 2, 1270, 1275, 5, 94, 48, 2, 1271,
	1272, 7, 8, 2, 2, 1272, 1274, 5, 94, 48, 2, 1273, 1271, 3, 2, 2, 2, 1274,
	1277, 3, 2, 2, 2, 1275, 1273, 3, 2, 2, 2, 1275, 1276, 3, 2, 2, 2, 1276,
	1279, 3, 2, 2, 2, 1277, 1275, 3, 2, 2, 2, 1278, 1270, 3, 2, 2, 2, 1278,
	1279, 3, 2, 2, 2, 1279, 1281, 3, 2, 2, 2, 1280, 1267, 3, 2, 2, 2, 1280,
	1269, 3, 2, 2, 2, 1281, 1287, 3, 2, 2, 2, 1282, 1283, 12, 3, 2, 2, 1283,
	1284, 7, 29, 2, 2, 1284, 1286, 5, 116, 59, 2, 1285, 1282, 3, 2, 2, 2, 1286,
	1289, 3, 2, 2, 2, 1287, 1285, 3, 2, 2, 2, 1287, 1288, 3, 2, 2, 2, 1288,
	93, 3, 2, 2, 2, 1289, 1287, 3, 2, 2, 2, 1290, 1293, 5, 50, 26, 2, 1291,
	1293, 5, 96, 49, 2, 1292, 1290, 3, 2, 2, 2, 1292, 1291, 3, 2, 2, 2, 1293,
	95, 3, 2, 2, 2, 1294, 1306, 5, 88, 45, 2, 1295, 1304, 7, 97, 2, 2, 1296,
	1301, 5, 98, 50, 2, 1297, 1298, 7, 8, 2, 2, 1298, 1300, 5, 98, 50, 2, 1299,
	1297, 3, 2, 2, 2, 1300, 1303, 3, 2, 2, 2, 1301, 1299, 3, 2, 2, 2, 1301,
	1302, 3, 2, 2, 2, 1302, 1305, 3, 2, 2, 2, 1303, 1301, 3, 2, 2, 2, 1304,
	1296, 3, 2, 2, 2, 1304, 1305, 3, 2, 2, 2, 1305, 1307, 3, 2, 2, 2, 1306,
	1295, 3, 2, 2, 2, 1306, 1307, 3, 2, 2, 2, 1307, 97, 3, 2, 2, 2, 1308, 1313,
	5, 116, 59, 2, 1309, 1310, 7, 8, 2, 2, 1310, 1312, 5, 116, 59, 2, 1311,
	1309, 3, 2, 2, 2, 1312, 1315, 3, 2, 2, 2, 1313, 1311, 3, 2, 2, 2, 1313,
	1314, 3, 2, 2, 2, 1314, 1316, 3, 2, 2, 2, 1315, 1313, 3, 2, 2, 2, 1316,
	1317, 7, 18, 2, 2, 1317, 1318, 5, 102, 52, 2, 1318, 99, 3, 2, 2, 2, 1319,
	1320, 8, 51, 1, 2, 1320, 1334, 5, 102, 52, 2, 1321, 1322, 5, 106, 54, 2,
	1322, 1323, 7, 33, 2, 2, 1323, 1324, 5, 102, 52, 2, 1324, 1334, 3, 2, 2,
	2, 1325, 1326, 7, 20, 2, 2, 1326, 1327, 5, 100, 51, 2, 1327, 1328, 7, 21,
	2, 2, 1328, 1334, 3, 2, 2, 2, 1329, 1330, 7, 98, 2, 2, 1330, 1334, 5, 100,
	51, 25, 1331, 1332, 7, 99, 2, 2, 1332, 1334, 5, 100, 51, 24, 1333, 1319,
	3, 2, 2, 2, 1333, 1321, 3, 2, 2, 2, 1333, 1325, 3, 2, 2, 2, 1333, 1329,
	3, 2, 2, 2, 1333, 1331, 3, 2, 2, 2, 1334, 1400, 3, 2, 2, 2, 1335, 1336,
	12, 23, 2, 2, 1336, 1337, 7, 100, 2, 2, 1337, 1399, 5, 100, 51, 24, 1338,
	1339, 12, 22, 2, 2, 1339, 1340, 7, 101, 2, 2, 1340, 1399, 5, 100, 51, 23,
	1341, 1342, 12, 21, 2, 2, 1342, 1343, 7, 102, 2, 2, 1343, 1399, 5, 100,
	51, 22, 1344, 1345, 12, 20, 2, 2, 1345, 1346, 7, 70, 2, 2, 1346, 1399,
	5, 100, 51, 21, 1347, 1348, 12, 19, 2, 2, 1348, 1349, 7, 103, 2, 2, 1349,
	1399, 5, 100, 51, 20, 1350, 1351, 12, 18, 2, 2, 1351, 1352, 7, 104, 2,
	2, 1352, 1399, 5, 100, 51, 19, 1353, 1354, 12, 17, 2, 2, 1354, 1355, 7,
	99, 2, 2, 1355, 1399, 5, 100, 51, 18, 1356, 1357, 12, 16, 2, 2, 1357, 1358,
	7, 105, 2, 2, 1358, 1399, 5, 100, 51, 17, 1359, 1360, 12, 15, 2, 2, 1360,
	1361, 7, 106, 2, 2, 1361, 1399, 5, 100, 51, 16, 1362, 1363, 12, 14, 2,
	2, 1363, 1364, 7, 3, 2, 2, 1364, 1399, 5, 100, 51, 15, 1365, 1366, 12,
	13, 2, 2, 1366, 1367, 7, 107, 2, 2, 1367, 1399, 5, 100, 51, 14, 1368, 1369,
	12, 12, 2, 2, 1369, 1370, 7, 108, 2, 2, 1370, 1399, 5, 100, 51, 13, 1371,
	1372, 12, 11, 2, 2, 1372, 1373, 7, 109, 2, 2, 1373, 1399, 5, 100, 51, 12,
	1374, 1375, 12, 10, 2, 2, 1375, 1376, 7, 110, 2, 2, 1376, 1399, 5, 100,
	51, 11, 1377, 1378, 12, 9, 2, 2, 1378, 1379, 7, 111, 2, 2, 1379, 1399,
	5, 100, 51, 10, 1380, 1381, 12, 8, 2, 2, 1381, 1382, 7, 112, 2, 2, 1382,
	1399, 5, 100, 51, 9, 1383, 1384, 12, 7, 2, 2, 1384, 1385, 7, 113, 2, 2,
	1385, 1399, 5, 100, 51, 8, 1386, 1387, 12, 6, 2, 2, 1387, 1388, 7, 114,
	2, 2, 1388, 1399, 5, 100, 51, 7, 1389, 1390, 12, 5, 2, 2, 1390, 1391, 7,
	115, 2, 2, 1391, 1399, 5, 100, 51, 6, 1392, 1393, 12, 4, 2, 2, 1393, 1394,
	7, 116, 2, 2, 1394, 1399, 5, 100, 51, 5, 1395, 1396, 12, 3, 2, 2, 1396,
	1397, 7, 117, 2, 2, 1397, 1399, 5, 100, 51, 4, 1398, 1335, 3, 2, 2, 2,
	1398, 1338, 3, 2, 2, 2, 1398, 1341, 3, 2, 2, 2, 1398, 1344, 3, 2, 2, 2,
	1398, 1347, 3, 2, 2, 2, 1398, 1350, 3, 2, 2, 2, 1398, 1353, 3, 2, 2, 2,
	1398, 1356, 3, 2, 2, 2, 1398, 1359, 3, 2, 2, 2, 1398, 1362, 3, 2, 2, 2,
	1398, 1365, 3, 2, 2, 2, 1398, 1368, 3, 2, 2, 2, 1398, 1371, 3, 2, 2, 2,
	1398, 1374, 3, 2, 2, 2, 1398, 1377, 3, 2, 2, 2, 1398, 1380, 3, 2, 2, 2,
	1398, 1383, 3, 2, 2, 2, 1398, 1386, 3, 2, 2, 2, 1398, 1389, 3, 2, 2, 2,
	1398, 1392, 3, 2, 2, 2, 1398, 1395, 3, 2, 2, 2, 1399, 1402, 3, 2, 2, 2,
	1400, 1398, 3, 2, 2, 2, 1400, 1401, 3, 2, 2, 2, 1401, 101, 3, 2, 2, 2,
	1402, 1400, 3, 2, 2, 2, 1403, 1416, 5, 104, 53, 2, 1404, 1405, 7, 34, 2,
	2, 1405, 1415, 5, 116, 59, 2, 1406, 1411, 5, 100, 51, 2, 1407, 1408, 7,
	8, 2, 2, 1408, 1410, 5, 100, 51, 2, 1409, 1407, 3, 2, 2, 2, 1410, 1413,
	3, 2, 2, 2, 1411, 1409, 3, 2, 2, 2, 1411, 1412, 3, 2, 2, 2, 1412, 1415,
	3, 2, 2, 2, 1413, 1411, 3, 2, 2, 2, 1414, 1404, 3, 2, 2, 2, 1414, 1406,
	3, 2, 2, 2, 1415, 1418, 3, 2, 2, 2, 1416, 1414, 3, 2, 2, 2, 1416, 1417,
	3, 2, 2, 2, 1417, 103, 3, 2, 2, 2, 1418, 1416, 3, 2, 2, 2, 1419, 1420,
	5, 108, 55, 2, 1420, 105, 3, 2, 2, 2, 1421, 1422, 5, 102, 52, 2, 1422,
	1431, 7, 20, 2, 2, 1423, 1428, 5, 100, 51, 2, 1424, 1425, 7, 8, 2, 2, 1425,
	1427, 5, 100, 51, 2, 1426, 1424, 3, 2, 2, 2, 1427, 1430, 3, 2, 2, 2, 1428,
	1426, 3, 2, 2, 2, 1428, 1429, 3, 2, 2, 2, 1429, 1432, 3, 2, 2, 2, 1430,
	1428, 3, 2, 2, 2, 1431, 1423, 3, 2, 2, 2, 1431, 1432, 3, 2, 2, 2, 1432,
	1433, 3, 2, 2, 2, 1433, 1434, 7, 21, 2, 2, 1434, 107, 3, 2, 2, 2, 1435,
	1441, 5, 110, 56, 2, 1436, 1437, 7, 34, 2, 2, 1437, 1440, 5, 116, 59, 2,
	1438, 1440, 5, 100, 51, 2, 1439, 1436, 3, 2, 2, 2, 1439, 1438, 3, 2, 2,
	2, 1440, 1443, 3, 2, 2, 2, 1441, 1439, 3, 2, 2, 2, 1441, 1442, 3, 2, 2,
	2, 1442, 109, 3, 2, 2, 2, 1443, 1441, 3, 2, 2, 2, 1444, 1521, 7, 118, 2,
	2, 1445, 1521, 7, 119, 2, 2, 1446, 1521, 7, 120, 2, 2, 1447, 1521, 7, 125,
	2, 2, 1448, 1521, 7, 126, 2, 2, 1449, 1521, 7, 127, 2, 2, 1450, 1521, 7,
	128, 2, 2, 1451, 1521, 7, 121, 2, 2, 1452, 1521, 5, 92, 47, 2, 1453, 1454,
	7, 122, 2, 2, 1454, 1463, 5, 108, 55, 2, 1455, 1460, 5, 114, 58, 2, 1456,
	1457, 7, 8, 2, 2, 1457, 1459, 5, 114, 58, 2, 1458, 1456, 3, 2, 2, 2, 1459,
	1462, 3, 2, 2, 2, 1460, 1458, 3, 2, 2, 2, 1460, 1461, 3, 2, 2, 2, 1461,
	1464, 3, 2, 2, 2, 1462, 1460, 3, 2, 2, 2, 1463, 1455, 3, 2, 2, 2, 1463,
	1464, 3, 2, 2, 2, 1464, 1521, 3, 2, 2, 2, 1465, 1466, 5, 88, 45, 2, 1466,
	1477, 7, 29, 2, 2, 1467, 1472, 5, 112, 57, 2, 1468, 1469, 7, 8, 2, 2, 1469,
	1471, 5, 112, 57, 2, 1470, 1468, 3, 2, 2, 2, 1471, 1474, 3, 2, 2, 2, 1472,
	1470, 3, 2, 2, 2, 1472, 1473, 3, 2, 2, 2, 1473, 1476, 3, 2, 2, 2, 1474,
	1472, 3, 2, 2, 2, 1475, 1467, 3, 2, 2, 2, 1476, 1479, 3, 2, 2, 2, 1477,
	1475, 3, 2, 2, 2, 1477, 1478, 3, 2, 2, 2, 1478, 1521, 3, 2, 2, 2, 1479,
	1477, 3, 2, 2, 2, 1480, 1481, 5, 88, 45, 2, 1481, 1485, 7, 29, 2, 2, 1482,
	1483, 5, 100, 51, 2, 1483, 1484, 7, 18, 2, 2, 1484, 1486, 3, 2, 2, 2, 1485,
	1482, 3, 2, 2, 2, 1485, 1486, 3, 2, 2, 2, 1486, 1495, 3, 2, 2, 2, 1487,
	1492, 5, 100, 51, 2, 1488, 1489, 7, 8, 2, 2, 1489, 1491, 5, 100, 51, 2,
	1490, 1488, 3, 2, 2, 2, 1491, 1494, 3, 2, 2, 2, 1492, 1490, 3, 2, 2, 2,
	1492, 1493, 3, 2, 2, 2, 1493, 1496, 3, 2, 2, 2, 1494, 1492, 3, 2, 2, 2,
	1495, 1487, 3, 2, 2, 2, 1495, 1496, 3, 2, 2, 2, 1496, 1521, 3, 2, 2, 2,
	1497, 1498, 5, 88, 45, 2, 1498, 1499, 7, 29, 2, 2, 1499, 1508, 5, 116,
	59, 2, 1500, 1505, 5, 94, 48, 2, 1501, 1502, 7, 8, 2, 2, 1502, 1504, 5,
	94, 48, 2, 1503, 1501, 3, 2, 2, 2, 1504, 1507, 3, 2, 2, 2, 1505, 1503,
	3, 2, 2, 2, 1505, 1506, 3, 2, 2, 2, 1506, 1509, 3, 2, 2, 2, 1507, 1505,
	3, 2, 2, 2, 1508, 1500, 3, 2, 2, 2, 1508, 1509, 3, 2, 2, 2, 1509, 1521,
	3, 2, 2, 2, 1510, 1511, 7, 123, 2, 2, 1511, 1512, 7, 20, 2, 2, 1512, 1513,
	5, 100, 51, 2, 1513, 1514, 7, 21, 2, 2, 1514, 1521, 3, 2, 2, 2, 1515, 1516,
	7, 124, 2, 2, 1516, 1517, 7, 20, 2, 2, 1517, 1518, 5, 100, 51, 2, 1518,
	1519, 7, 21, 2, 2, 1519, 1521, 3, 2, 2, 2, 1520, 1444, 3, 2, 2, 2, 1520,
	1445, 3, 2, 2, 2, 1520, 1446, 3, 2, 2, 2, 1520, 1447, 3, 2, 2, 2, 1520,
	1448, 3, 2, 2, 2, 1520, 1449, 3, 2, 2, 2, 1520, 1450, 3, 2, 2, 2, 1520,
	1451, 3, 2, 2, 2, 1520, 1452, 3, 2, 2, 2, 1520, 1453, 3, 2, 2, 2, 1520,
	1465, 3, 2, 2, 2, 1520, 1480, 3, 2, 2, 2, 1520, 1497, 3, 2, 2, 2, 1520,
	1510, 3, 2, 2, 2, 1520, 1515, 3, 2, 2, 2, 1521, 111, 3, 2, 2, 2, 1522,
	1527, 5, 116, 59, 2, 1523, 1524, 7, 8, 2, 2, 1524, 1526, 5, 116, 59, 2,
	1525, 1523, 3, 2, 2, 2, 1526, 1529, 3, 2, 2, 2, 1527, 1525, 3, 2, 2, 2,
	1527, 1528, 3, 2, 2, 2, 1528, 1530, 3, 2, 2, 2, 1529, 1527, 3, 2, 2, 2,
	1530, 1531, 7, 18, 2, 2, 1531, 1532, 5, 100, 51, 2, 1532, 113, 3, 2, 2,
	2, 1533, 1536, 7, 70, 2, 2, 1534, 1536, 5, 100, 51, 2, 1535, 1533, 3, 2,
	2, 2, 1535, 1534, 3, 2, 2, 2, 1536, 115, 3, 2, 2, 2, 1537, 1538, 7, 129,
	2, 2, 1538, 117, 3, 2, 2, 2, 1539, 1540, 7, 129, 2, 2, 1540, 119, 3, 2,
	2, 2, 189, 123, 130, 137, 144, 151, 155, 162, 164, 169, 179, 187, 196,
	199, 202, 207, 213, 220, 226, 231, 238, 248, 256, 260, 265, 274, 280, 287,
	296, 300, 306, 310, 313, 316, 326, 330, 333, 336, 347, 350, 361, 364, 373,
	379, 385, 393, 401, 412, 418, 426, 431, 441, 454, 466, 478, 489, 492, 496,
	504, 514, 521, 531, 537, 540, 542, 550, 557, 564, 568, 571, 575, 584, 591,
	597, 611, 628, 635, 637, 652, 659, 666, 673, 680, 689, 700, 708, 726, 732,
	747, 755, 758, 766, 769, 772, 781, 784, 787, 796, 799, 802, 806, 813, 817,
	825, 833, 837, 840, 842, 855, 864, 872, 885, 900, 909, 922, 927, 937, 943,
	953, 959, 969, 980, 987, 998, 1007, 1021, 1029, 1034, 1046, 1055, 1064,
	1073, 1079, 1115, 1127, 1139, 1151, 1163, 1175, 1186, 1189, 1192, 1195,
	1203, 1206, 1209, 1212, 1220, 1223, 1226, 1229, 1237, 1240, 1243, 1246,
	1254, 1261, 1275, 1278, 1280, 1287, 1292, 1301, 1304, 1306, 1313, 1333,
	1398, 1400, 1411, 1414, 1416, 1428, 1431, 1439, 1441, 1460, 1463, 1472,
	1477, 1485, 1492, 1495, 1505, 1508, 1520, 1527, 1535,
}
var literalNames = []string{
	"", "'='", "'equates'", "'end'", "'guardian'", "'is'", "','", "'handles'",
	"'recover'", "'background'", "'cluster'", "'rep'", "'proc'", "'iter'",
	"'creator'", "'handler'", "':'", "'type'", "'('", "')'", "'returns'", "'yields'",
	"'signals'", "'transmit'", "'where'", "'has'", "'in'", "'$'", "'stable'",
	"':='", "'own'", "'@'", "'.'", "'fork'", "'seize'", "'do'", "'pause'",
	"'terminate'", "'coenter'", "'abort'", "'leave'", "'while'", "'return'",
	"'yield'", "'signal'", "'exit'", "'break'", "'continue'", "'begin'", "'resignal'",
	"'except'", "'enter'", "'topaction'", "'action'", "'foreach'", "'process'",
	"'for'", "'if'", "'then'", "'elseif'", "'else'", "'tagcase'", "'others'",
	"'tagtest'", "'tagwait'", "'tag'", "'wtag'", "'when'", "'*'", "'null'",
	"'node'", "'bool'", "'int'", "'real'", "'char'", "'string'", "'any'", "'image'",
	"'cvt'", "'sequence'", "'['", "']'", "'array'", "'atomic_array'", "'struct'",
	"'record'", "'atomic_record'", "'oneof'", "'variant'", "'atomic_variant'",
	"'proctype'", "'itertype'", "'creatortype'", "'handlertype'", "'mutex'",
	"'with'", "'~'", "'\u2212'", "'**'", "'//'", "'/'", "'||'", "'+'", "'<'",
	"'<='", "'>='", "'>'", "'~<'", "'~<='", "'~='", "'~>='", "'~>'", "'&'",
	"'cand'", "'|'", "'cor'", "'nil'", "'true'", "'false'", "'self'", "'bind'",
	"'up'", "'down'",
}
var symbolicNames = []string{
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "INT_LITERAL",
	"REAL_LITERAL", "CHAR_LITERAL", "STRING_LITERAL", "IDENTIFIER", "COMMENT",
	"WS",
}

var ruleNames = []string{
	"module", "equates_", "guardian", "cluster", "operation", "routine", "procedure",
	"iterator", "creator", "handler", "routine_body", "parms", "parm", "args",
	"decl", "returnz", "yields", "signals", "exception_", "opidn", "where",
	"restriction", "type_set", "oper_decl", "constant", "state_decl", "equate",
	"own_var", "statement", "enter_stmt", "coarm", "armtag", "for_stmt", "if_stmt",
	"tagcase_stmt", "tagtest_stmt", "tagwait_stmt", "tag_arm", "atag_arm",
	"tag_kind", "when_handler", "others_handler", "body", "type_spec", "field_spec",
	"reference", "actual_parm", "type_actual", "opbinding", "expression", "primaries",
	"primary", "call", "entities", "entity", "field", "bind_arg", "name", "idn",
}

type argusParser struct {
	*antlr.BaseParser
}

// NewargusParser produces a new parser instance for the optional input antlr.TokenStream.
//
// The *argusParser instance produced may be reused by calling the SetInputStream method.
// The initial parser configuration is expensive to construct, and the object is not thread-safe;
// however, if used within a Golang sync.Pool, the construction cost amortizes well and the
// objects can be used in a thread-safe manner.
func NewargusParser(input antlr.TokenStream) *argusParser {
	this := new(argusParser)
	deserializer := antlr.NewATNDeserializer(nil)
	deserializedATN := deserializer.DeserializeFromUInt16(parserATN)
	decisionToDFA := make([]*antlr.DFA, len(deserializedATN.DecisionToState))
	for index, ds := range deserializedATN.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(ds, index)
	}
	this.BaseParser = antlr.NewBaseParser(input)

	this.Interpreter = antlr.NewParserATNSimulator(this, deserializedATN, decisionToDFA, antlr.NewPredictionContextCache())
	this.RuleNames = ruleNames
	this.LiteralNames = literalNames
	this.SymbolicNames = symbolicNames
	this.GrammarFileName = "argus.g4"

	return this
}

// argusParser tokens.
const (
	argusParserEOF            = antlr.TokenEOF
	argusParserT__0           = 1
	argusParserT__1           = 2
	argusParserT__2           = 3
	argusParserT__3           = 4
	argusParserT__4           = 5
	argusParserT__5           = 6
	argusParserT__6           = 7
	argusParserT__7           = 8
	argusParserT__8           = 9
	argusParserT__9           = 10
	argusParserT__10          = 11
	argusParserT__11          = 12
	argusParserT__12          = 13
	argusParserT__13          = 14
	argusParserT__14          = 15
	argusParserT__15          = 16
	argusParserT__16          = 17
	argusParserT__17          = 18
	argusParserT__18          = 19
	argusParserT__19          = 20
	argusParserT__20          = 21
	argusParserT__21          = 22
	argusParserT__22          = 23
	argusParserT__23          = 24
	argusParserT__24          = 25
	argusParserT__25          = 26
	argusParserT__26          = 27
	argusParserT__27          = 28
	argusParserT__28          = 29
	argusParserT__29          = 30
	argusParserT__30          = 31
	argusParserT__31          = 32
	argusParserT__32          = 33
	argusParserT__33          = 34
	argusParserT__34          = 35
	argusParserT__35          = 36
	argusParserT__36          = 37
	argusParserT__37          = 38
	argusParserT__38          = 39
	argusParserT__39          = 40
	argusParserT__40          = 41
	argusParserT__41          = 42
	argusParserT__42          = 43
	argusParserT__43          = 44
	argusParserT__44          = 45
	argusParserT__45          = 46
	argusParserT__46          = 47
	argusParserT__47          = 48
	argusParserT__48          = 49
	argusParserT__49          = 50
	argusParserT__50          = 51
	argusParserT__51          = 52
	argusParserT__52          = 53
	argusParserT__53          = 54
	argusParserT__54          = 55
	argusParserT__55          = 56
	argusParserT__56          = 57
	argusParserT__57          = 58
	argusParserT__58          = 59
	argusParserT__59          = 60
	argusParserT__60          = 61
	argusParserT__61          = 62
	argusParserT__62          = 63
	argusParserT__63          = 64
	argusParserT__64          = 65
	argusParserT__65          = 66
	argusParserT__66          = 67
	argusParserT__67          = 68
	argusParserT__68          = 69
	argusParserT__69          = 70
	argusParserT__70          = 71
	argusParserT__71          = 72
	argusParserT__72          = 73
	argusParserT__73          = 74
	argusParserT__74          = 75
	argusParserT__75          = 76
	argusParserT__76          = 77
	argusParserT__77          = 78
	argusParserT__78          = 79
	argusParserT__79          = 80
	argusParserT__80          = 81
	argusParserT__81          = 82
	argusParserT__82          = 83
	argusParserT__83          = 84
	argusParserT__84          = 85
	argusParserT__85          = 86
	argusParserT__86          = 87
	argusParserT__87          = 88
	argusParserT__88          = 89
	argusParserT__89          = 90
	argusParserT__90          = 91
	argusParserT__91          = 92
	argusParserT__92          = 93
	argusParserT__93          = 94
	argusParserT__94          = 95
	argusParserT__95          = 96
	argusParserT__96          = 97
	argusParserT__97          = 98
	argusParserT__98          = 99
	argusParserT__99          = 100
	argusParserT__100         = 101
	argusParserT__101         = 102
	argusParserT__102         = 103
	argusParserT__103         = 104
	argusParserT__104         = 105
	argusParserT__105         = 106
	argusParserT__106         = 107
	argusParserT__107         = 108
	argusParserT__108         = 109
	argusParserT__109         = 110
	argusParserT__110         = 111
	argusParserT__111         = 112
	argusParserT__112         = 113
	argusParserT__113         = 114
	argusParserT__114         = 115
	argusParserT__115         = 116
	argusParserT__116         = 117
	argusParserT__117         = 118
	argusParserT__118         = 119
	argusParserT__119         = 120
	argusParserT__120         = 121
	argusParserT__121         = 122
	argusParserINT_LITERAL    = 123
	argusParserREAL_LITERAL   = 124
	argusParserCHAR_LITERAL   = 125
	argusParserSTRING_LITERAL = 126
	argusParserIDENTIFIER     = 127
	argusParserCOMMENT        = 128
	argusParserWS             = 129
)

// argusParser rules.
const (
	argusParserRULE_module         = 0
	argusParserRULE_equates_       = 1
	argusParserRULE_guardian       = 2
	argusParserRULE_cluster        = 3
	argusParserRULE_operation      = 4
	argusParserRULE_routine        = 5
	argusParserRULE_procedure      = 6
	argusParserRULE_iterator       = 7
	argusParserRULE_creator        = 8
	argusParserRULE_handler        = 9
	argusParserRULE_routine_body   = 10
	argusParserRULE_parms          = 11
	argusParserRULE_parm           = 12
	argusParserRULE_args           = 13
	argusParserRULE_decl           = 14
	argusParserRULE_returnz        = 15
	argusParserRULE_yields         = 16
	argusParserRULE_signals        = 17
	argusParserRULE_exception_     = 18
	argusParserRULE_opidn          = 19
	argusParserRULE_where          = 20
	argusParserRULE_restriction    = 21
	argusParserRULE_type_set       = 22
	argusParserRULE_oper_decl      = 23
	argusParserRULE_constant       = 24
	argusParserRULE_state_decl     = 25
	argusParserRULE_equate         = 26
	argusParserRULE_own_var        = 27
	argusParserRULE_statement      = 28
	argusParserRULE_enter_stmt     = 29
	argusParserRULE_coarm          = 30
	argusParserRULE_armtag         = 31
	argusParserRULE_for_stmt       = 32
	argusParserRULE_if_stmt        = 33
	argusParserRULE_tagcase_stmt   = 34
	argusParserRULE_tagtest_stmt   = 35
	argusParserRULE_tagwait_stmt   = 36
	argusParserRULE_tag_arm        = 37
	argusParserRULE_atag_arm       = 38
	argusParserRULE_tag_kind       = 39
	argusParserRULE_when_handler   = 40
	argusParserRULE_others_handler = 41
	argusParserRULE_body           = 42
	argusParserRULE_type_spec      = 43
	argusParserRULE_field_spec     = 44
	argusParserRULE_reference      = 45
	argusParserRULE_actual_parm    = 46
	argusParserRULE_type_actual    = 47
	argusParserRULE_opbinding      = 48
	argusParserRULE_expression     = 49
	argusParserRULE_primaries      = 50
	argusParserRULE_primary        = 51
	argusParserRULE_call           = 52
	argusParserRULE_entities       = 53
	argusParserRULE_entity         = 54
	argusParserRULE_field          = 55
	argusParserRULE_bind_arg       = 56
	argusParserRULE_name           = 57
	argusParserRULE_idn            = 58
)

// IModuleContext is an interface to support dynamic dispatch.
type IModuleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsModuleContext differentiates from other interfaces.
	IsModuleContext()
}

type ModuleContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyModuleContext() *ModuleContext {
	var p = new(ModuleContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = argusParserRULE_module
	return p
}

func (*ModuleContext) IsModuleContext() {}

func NewModuleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ModuleContext {
	var p = new(ModuleContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = argusParserRULE_module

	return p
}

func (s *ModuleContext) GetParser() antlr.Parser { return s.parser }

func (s *ModuleContext) Equates_() IEquates_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEquates_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEquates_Context)
}

func (s *ModuleContext) AllEquate() []IEquateContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEquateContext)(nil)).Elem())
	var tst = make([]IEquateContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEquateContext)
		}
	}

	return tst
}

func (s *ModuleContext) Equate(i int) IEquateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEquateContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEquateContext)
}

func (s *ModuleContext) Guardian() IGuardianContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGuardianContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGuardianContext)
}

func (s *ModuleContext) Procedure() IProcedureContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProcedureContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IProcedureContext)
}

func (s *ModuleContext) Iterator() IIteratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIteratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIteratorContext)
}

func (s *ModuleContext) Cluster() IClusterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClusterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClusterContext)
}

func (s *ModuleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ModuleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ModuleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.EnterModule(s)
	}
}

func (s *ModuleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.ExitModule(s)
	}
}

func (p *argusParser) Module() (localctx IModuleContext) {
	this := p
	_ = this

	localctx = NewModuleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, argusParserRULE_module)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(153)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 5, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(121)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 0, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(118)
					p.Equate()
				}

			}
			p.SetState(123)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 0, p.GetParserRuleContext())
		}
		{
			p.SetState(124)
			p.Equates_()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(128)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(125)
					p.Equate()
				}

			}
			p.SetState(130)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1, p.GetParserRuleContext())
		}
		{
			p.SetState(131)
			p.Guardian()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		p.SetState(135)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 2, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(132)
					p.Equate()
				}

			}
			p.SetState(137)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 2, p.GetParserRuleContext())
		}
		{
			p.SetState(138)
			p.Procedure()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		p.SetState(142)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 3, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(139)
					p.Equate()
				}

			}
			p.SetState(144)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 3, p.GetParserRuleContext())
		}
		{
			p.SetState(145)
			p.Iterator()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		p.SetState(149)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 4, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(146)
					p.Equate()
				}

			}
			p.SetState(151)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 4, p.GetParserRuleContext())
		}
		{
			p.SetState(152)
			p.Cluster()
		}

	}

	return localctx
}

// IEquates_Context is an interface to support dynamic dispatch.
type IEquates_Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEquates_Context differentiates from other interfaces.
	IsEquates_Context()
}

type Equates_Context struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEquates_Context() *Equates_Context {
	var p = new(Equates_Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = argusParserRULE_equates_
	return p
}

func (*Equates_Context) IsEquates_Context() {}

func NewEquates_Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Equates_Context {
	var p = new(Equates_Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = argusParserRULE_equates_

	return p
}

func (s *Equates_Context) GetParser() antlr.Parser { return s.parser }

func (s *Equates_Context) AllIdn() []IIdnContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdnContext)(nil)).Elem())
	var tst = make([]IIdnContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdnContext)
		}
	}

	return tst
}

func (s *Equates_Context) Idn(i int) IIdnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdnContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdnContext)
}

func (s *Equates_Context) Parms() IParmsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParmsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParmsContext)
}

func (s *Equates_Context) AllEquate() []IEquateContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEquateContext)(nil)).Elem())
	var tst = make([]IEquateContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEquateContext)
		}
	}

	return tst
}

func (s *Equates_Context) Equate(i int) IEquateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEquateContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEquateContext)
}

func (s *Equates_Context) Where() IWhereContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhereContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWhereContext)
}

func (s *Equates_Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Equates_Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Equates_Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.EnterEquates_(s)
	}
}

func (s *Equates_Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.ExitEquates_(s)
	}
}

func (p *argusParser) Equates_() (localctx IEquates_Context) {
	this := p
	_ = this

	localctx = NewEquates_Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, argusParserRULE_equates_)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(155)
		p.Idn()
	}
	{
		p.SetState(156)
		p.Match(argusParserT__0)
	}
	{
		p.SetState(157)
		p.Match(argusParserT__1)
	}
	p.SetState(162)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 7, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(158)
			p.Parms()
		}
		p.SetState(160)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == argusParserT__23 {
			{
				p.SetState(159)
				p.Where()
			}

		}

	}
	p.SetState(167)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == argusParserIDENTIFIER {
		{
			p.SetState(164)
			p.Equate()
		}

		p.SetState(169)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(170)
		p.Match(argusParserT__2)
	}
	{
		p.SetState(171)
		p.Idn()
	}

	return localctx
}

// IGuardianContext is an interface to support dynamic dispatch.
type IGuardianContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGuardianContext differentiates from other interfaces.
	IsGuardianContext()
}

type GuardianContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGuardianContext() *GuardianContext {
	var p = new(GuardianContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = argusParserRULE_guardian
	return p
}

func (*GuardianContext) IsGuardianContext() {}

func NewGuardianContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GuardianContext {
	var p = new(GuardianContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = argusParserRULE_guardian

	return p
}

func (s *GuardianContext) GetParser() antlr.Parser { return s.parser }

func (s *GuardianContext) AllIdn() []IIdnContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdnContext)(nil)).Elem())
	var tst = make([]IIdnContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdnContext)
		}
	}

	return tst
}

func (s *GuardianContext) Idn(i int) IIdnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdnContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdnContext)
}

func (s *GuardianContext) Creator() ICreatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreatorContext)
}

func (s *GuardianContext) Parms() IParmsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParmsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParmsContext)
}

func (s *GuardianContext) Where() IWhereContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhereContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWhereContext)
}

func (s *GuardianContext) AllEquate() []IEquateContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEquateContext)(nil)).Elem())
	var tst = make([]IEquateContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEquateContext)
		}
	}

	return tst
}

func (s *GuardianContext) Equate(i int) IEquateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEquateContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEquateContext)
}

func (s *GuardianContext) AllState_decl() []IState_declContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IState_declContext)(nil)).Elem())
	var tst = make([]IState_declContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IState_declContext)
		}
	}

	return tst
}

func (s *GuardianContext) State_decl(i int) IState_declContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IState_declContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IState_declContext)
}

func (s *GuardianContext) AllBody() []IBodyContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBodyContext)(nil)).Elem())
	var tst = make([]IBodyContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBodyContext)
		}
	}

	return tst
}

func (s *GuardianContext) Body(i int) IBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBodyContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBodyContext)
}

func (s *GuardianContext) AllOperation() []IOperationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOperationContext)(nil)).Elem())
	var tst = make([]IOperationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOperationContext)
		}
	}

	return tst
}

func (s *GuardianContext) Operation(i int) IOperationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOperationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOperationContext)
}

func (s *GuardianContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GuardianContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GuardianContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.EnterGuardian(s)
	}
}

func (s *GuardianContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.ExitGuardian(s)
	}
}

func (p *argusParser) Guardian() (localctx IGuardianContext) {
	this := p
	_ = this

	localctx = NewGuardianContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, argusParserRULE_guardian)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(173)
		p.Idn()
	}
	{
		p.SetState(174)
		p.Match(argusParserT__0)
	}
	{
		p.SetState(175)
		p.Match(argusParserT__3)
	}
	p.SetState(177)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == argusParserIDENTIFIER {
		{
			p.SetState(176)
			p.Parms()
		}

	}
	{
		p.SetState(179)
		p.Match(argusParserT__4)
	}
	{
		p.SetState(180)
		p.Idn()
	}
	p.SetState(185)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == argusParserT__5 {
		{
			p.SetState(181)
			p.Match(argusParserT__5)
		}
		{
			p.SetState(182)
			p.Idn()
		}

		p.SetState(187)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(197)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == argusParserT__6 {
		{
			p.SetState(188)
			p.Match(argusParserT__6)
		}
		{
			p.SetState(189)
			p.Idn()
		}
		p.SetState(194)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == argusParserT__5 {
			{
				p.SetState(190)
				p.Match(argusParserT__5)
			}
			{
				p.SetState(191)
				p.Idn()
			}

			p.SetState(196)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(200)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == argusParserT__23 {
		{
			p.SetState(199)
			p.Where()
		}

	}
	p.SetState(205)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 14, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(202)
				p.Equate()
			}

		}
		p.SetState(207)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 14, p.GetParserRuleContext())
	}
	p.SetState(211)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 15, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(208)
				p.State_decl()
			}

		}
		p.SetState(213)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 15, p.GetParserRuleContext())
	}
	p.SetState(218)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == argusParserT__7 {
		{
			p.SetState(214)
			p.Match(argusParserT__7)
		}
		{
			p.SetState(215)
			p.Body()
		}
		{
			p.SetState(216)
			p.Match(argusParserT__2)
		}

	}
	p.SetState(224)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == argusParserT__8 {
		{
			p.SetState(220)
			p.Match(argusParserT__8)
		}
		{
			p.SetState(221)
			p.Body()
		}
		{
			p.SetState(222)
			p.Match(argusParserT__2)
		}

	}
	p.SetState(229)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 18, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(226)
				p.Operation()
			}

		}
		p.SetState(231)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 18, p.GetParserRuleContext())
	}
	{
		p.SetState(232)
		p.Creator()
	}
	p.SetState(236)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == argusParserIDENTIFIER {
		{
			p.SetState(233)
			p.Operation()
		}

		p.SetState(238)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(239)
		p.Match(argusParserT__2)
	}
	{
		p.SetState(240)
		p.Idn()
	}

	return localctx
}

// IClusterContext is an interface to support dynamic dispatch.
type IClusterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClusterContext differentiates from other interfaces.
	IsClusterContext()
}

type ClusterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClusterContext() *ClusterContext {
	var p = new(ClusterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = argusParserRULE_cluster
	return p
}

func (*ClusterContext) IsClusterContext() {}

func NewClusterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClusterContext {
	var p = new(ClusterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = argusParserRULE_cluster

	return p
}

func (s *ClusterContext) GetParser() antlr.Parser { return s.parser }

func (s *ClusterContext) AllIdn() []IIdnContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdnContext)(nil)).Elem())
	var tst = make([]IIdnContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdnContext)
		}
	}

	return tst
}

func (s *ClusterContext) Idn(i int) IIdnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdnContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdnContext)
}

func (s *ClusterContext) AllOpidn() []IOpidnContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOpidnContext)(nil)).Elem())
	var tst = make([]IOpidnContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOpidnContext)
		}
	}

	return tst
}

func (s *ClusterContext) Opidn(i int) IOpidnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOpidnContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOpidnContext)
}

func (s *ClusterContext) Type_spec() IType_specContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_specContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_specContext)
}

func (s *ClusterContext) AllRoutine() []IRoutineContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IRoutineContext)(nil)).Elem())
	var tst = make([]IRoutineContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IRoutineContext)
		}
	}

	return tst
}

func (s *ClusterContext) Routine(i int) IRoutineContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRoutineContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IRoutineContext)
}

func (s *ClusterContext) Parms() IParmsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParmsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParmsContext)
}

func (s *ClusterContext) Where() IWhereContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhereContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWhereContext)
}

func (s *ClusterContext) AllEquate() []IEquateContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEquateContext)(nil)).Elem())
	var tst = make([]IEquateContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEquateContext)
		}
	}

	return tst
}

func (s *ClusterContext) Equate(i int) IEquateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEquateContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEquateContext)
}

func (s *ClusterContext) AllOwn_var() []IOwn_varContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOwn_varContext)(nil)).Elem())
	var tst = make([]IOwn_varContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOwn_varContext)
		}
	}

	return tst
}

func (s *ClusterContext) Own_var(i int) IOwn_varContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOwn_varContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOwn_varContext)
}

func (s *ClusterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClusterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClusterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.EnterCluster(s)
	}
}

func (s *ClusterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.ExitCluster(s)
	}
}

func (p *argusParser) Cluster() (localctx IClusterContext) {
	this := p
	_ = this

	localctx = NewClusterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, argusParserRULE_cluster)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(242)
		p.Idn()
	}
	{
		p.SetState(243)
		p.Match(argusParserT__0)
	}
	{
		p.SetState(244)
		p.Match(argusParserT__9)
	}
	p.SetState(246)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == argusParserIDENTIFIER {
		{
			p.SetState(245)
			p.Parms()
		}

	}
	{
		p.SetState(248)
		p.Match(argusParserT__4)
	}
	{
		p.SetState(249)
		p.Opidn()
	}
	p.SetState(254)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 21, p.GetParserRuleContext())

	for _alt != 1 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1+1 {
			{
				p.SetState(250)
				p.Match(argusParserT__5)
			}
			{
				p.SetState(251)
				p.Opidn()
			}

		}
		p.SetState(256)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 21, p.GetParserRuleContext())
	}
	p.SetState(258)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == argusParserT__23 {
		{
			p.SetState(257)
			p.Where()
		}

	}
	p.SetState(263)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == argusParserIDENTIFIER {
		{
			p.SetState(260)
			p.Equate()
		}

		p.SetState(265)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(266)
		p.Match(argusParserT__10)
	}
	{
		p.SetState(267)
		p.Match(argusParserT__0)
	}
	{
		p.SetState(268)
		p.Type_spec()
	}
	p.SetState(272)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 24, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(269)
				p.Equate()
			}

		}
		p.SetState(274)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 24, p.GetParserRuleContext())
	}
	p.SetState(278)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == argusParserT__29 {
		{
			p.SetState(275)
			p.Own_var()
		}

		p.SetState(280)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(281)
		p.Routine()
	}
	p.SetState(285)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == argusParserIDENTIFIER {
		{
			p.SetState(282)
			p.Routine()
		}

		p.SetState(287)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(288)
		p.Match(argusParserT__2)
	}
	{
		p.SetState(289)
		p.Idn()
	}

	return localctx
}

// IOperationContext is an interface to support dynamic dispatch.
type IOperationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOperationContext differentiates from other interfaces.
	IsOperationContext()
}

type OperationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOperationContext() *OperationContext {
	var p = new(OperationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = argusParserRULE_operation
	return p
}

func (*OperationContext) IsOperationContext() {}

func NewOperationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OperationContext {
	var p = new(OperationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = argusParserRULE_operation

	return p
}

func (s *OperationContext) GetParser() antlr.Parser { return s.parser }

func (s *OperationContext) Creator() ICreatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreatorContext)
}

func (s *OperationContext) Handler() IHandlerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHandlerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHandlerContext)
}

func (s *OperationContext) Routine() IRoutineContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRoutineContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRoutineContext)
}

func (s *OperationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OperationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OperationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.EnterOperation(s)
	}
}

func (s *OperationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.ExitOperation(s)
	}
}

func (p *argusParser) Operation() (localctx IOperationContext) {
	this := p
	_ = this

	localctx = NewOperationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, argusParserRULE_operation)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(294)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 27, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(291)
			p.Creator()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(292)
			p.Handler()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(293)
			p.Routine()
		}

	}

	return localctx
}

// IRoutineContext is an interface to support dynamic dispatch.
type IRoutineContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRoutineContext differentiates from other interfaces.
	IsRoutineContext()
}

type RoutineContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRoutineContext() *RoutineContext {
	var p = new(RoutineContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = argusParserRULE_routine
	return p
}

func (*RoutineContext) IsRoutineContext() {}

func NewRoutineContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RoutineContext {
	var p = new(RoutineContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = argusParserRULE_routine

	return p
}

func (s *RoutineContext) GetParser() antlr.Parser { return s.parser }

func (s *RoutineContext) Procedure() IProcedureContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProcedureContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IProcedureContext)
}

func (s *RoutineContext) Iterator() IIteratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIteratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIteratorContext)
}

func (s *RoutineContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RoutineContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RoutineContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.EnterRoutine(s)
	}
}

func (s *RoutineContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.ExitRoutine(s)
	}
}

func (p *argusParser) Routine() (localctx IRoutineContext) {
	this := p
	_ = this

	localctx = NewRoutineContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, argusParserRULE_routine)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(298)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 28, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(296)
			p.Procedure()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(297)
			p.Iterator()
		}

	}

	return localctx
}

// IProcedureContext is an interface to support dynamic dispatch.
type IProcedureContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsProcedureContext differentiates from other interfaces.
	IsProcedureContext()
}

type ProcedureContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProcedureContext() *ProcedureContext {
	var p = new(ProcedureContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = argusParserRULE_procedure
	return p
}

func (*ProcedureContext) IsProcedureContext() {}

func NewProcedureContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ProcedureContext {
	var p = new(ProcedureContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = argusParserRULE_procedure

	return p
}

func (s *ProcedureContext) GetParser() antlr.Parser { return s.parser }

func (s *ProcedureContext) AllIdn() []IIdnContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdnContext)(nil)).Elem())
	var tst = make([]IIdnContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdnContext)
		}
	}

	return tst
}

func (s *ProcedureContext) Idn(i int) IIdnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdnContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdnContext)
}

func (s *ProcedureContext) Args() IArgsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArgsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArgsContext)
}

func (s *ProcedureContext) Routine_body() IRoutine_bodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRoutine_bodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRoutine_bodyContext)
}

func (s *ProcedureContext) Parms() IParmsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParmsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParmsContext)
}

func (s *ProcedureContext) Returnz() IReturnzContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReturnzContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReturnzContext)
}

func (s *ProcedureContext) Signals() ISignalsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISignalsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISignalsContext)
}

func (s *ProcedureContext) Where() IWhereContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhereContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWhereContext)
}

func (s *ProcedureContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ProcedureContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ProcedureContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.EnterProcedure(s)
	}
}

func (s *ProcedureContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.ExitProcedure(s)
	}
}

func (p *argusParser) Procedure() (localctx IProcedureContext) {
	this := p
	_ = this

	localctx = NewProcedureContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, argusParserRULE_procedure)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(300)
		p.Idn()
	}
	{
		p.SetState(301)
		p.Match(argusParserT__0)
	}
	{
		p.SetState(302)
		p.Match(argusParserT__11)
	}
	p.SetState(304)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == argusParserIDENTIFIER {
		{
			p.SetState(303)
			p.Parms()
		}

	}
	{
		p.SetState(306)
		p.Args()
	}
	p.SetState(308)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == argusParserT__19 {
		{
			p.SetState(307)
			p.Returnz()
		}

	}
	p.SetState(311)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == argusParserT__21 {
		{
			p.SetState(310)
			p.Signals()
		}

	}
	p.SetState(314)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == argusParserT__23 {
		{
			p.SetState(313)
			p.Where()
		}

	}
	{
		p.SetState(316)
		p.Routine_body()
	}
	{
		p.SetState(317)
		p.Match(argusParserT__2)
	}
	{
		p.SetState(318)
		p.Idn()
	}

	return localctx
}

// IIteratorContext is an interface to support dynamic dispatch.
type IIteratorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIteratorContext differentiates from other interfaces.
	IsIteratorContext()
}

type IteratorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIteratorContext() *IteratorContext {
	var p = new(IteratorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = argusParserRULE_iterator
	return p
}

func (*IteratorContext) IsIteratorContext() {}

func NewIteratorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IteratorContext {
	var p = new(IteratorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = argusParserRULE_iterator

	return p
}

func (s *IteratorContext) GetParser() antlr.Parser { return s.parser }

func (s *IteratorContext) AllIdn() []IIdnContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdnContext)(nil)).Elem())
	var tst = make([]IIdnContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdnContext)
		}
	}

	return tst
}

func (s *IteratorContext) Idn(i int) IIdnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdnContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdnContext)
}

func (s *IteratorContext) Args() IArgsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArgsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArgsContext)
}

func (s *IteratorContext) Routine_body() IRoutine_bodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRoutine_bodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRoutine_bodyContext)
}

func (s *IteratorContext) Parms() IParmsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParmsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParmsContext)
}

func (s *IteratorContext) Yields() IYieldsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IYieldsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IYieldsContext)
}

func (s *IteratorContext) Signals() ISignalsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISignalsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISignalsContext)
}

func (s *IteratorContext) Where() IWhereContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhereContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWhereContext)
}

func (s *IteratorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IteratorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IteratorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.EnterIterator(s)
	}
}

func (s *IteratorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.ExitIterator(s)
	}
}

func (p *argusParser) Iterator() (localctx IIteratorContext) {
	this := p
	_ = this

	localctx = NewIteratorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, argusParserRULE_iterator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(320)
		p.Idn()
	}
	{
		p.SetState(321)
		p.Match(argusParserT__0)
	}
	{
		p.SetState(322)
		p.Match(argusParserT__12)
	}
	p.SetState(324)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == argusParserIDENTIFIER {
		{
			p.SetState(323)
			p.Parms()
		}

	}
	{
		p.SetState(326)
		p.Args()
	}
	p.SetState(328)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == argusParserT__20 {
		{
			p.SetState(327)
			p.Yields()
		}

	}
	p.SetState(331)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == argusParserT__21 {
		{
			p.SetState(330)
			p.Signals()
		}

	}
	p.SetState(334)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == argusParserT__23 {
		{
			p.SetState(333)
			p.Where()
		}

	}
	{
		p.SetState(336)
		p.Routine_body()
	}
	{
		p.SetState(337)
		p.Match(argusParserT__2)
	}
	{
		p.SetState(338)
		p.Idn()
	}

	return localctx
}

// ICreatorContext is an interface to support dynamic dispatch.
type ICreatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreatorContext differentiates from other interfaces.
	IsCreatorContext()
}

type CreatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreatorContext() *CreatorContext {
	var p = new(CreatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = argusParserRULE_creator
	return p
}

func (*CreatorContext) IsCreatorContext() {}

func NewCreatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreatorContext {
	var p = new(CreatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = argusParserRULE_creator

	return p
}

func (s *CreatorContext) GetParser() antlr.Parser { return s.parser }

func (s *CreatorContext) AllIdn() []IIdnContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdnContext)(nil)).Elem())
	var tst = make([]IIdnContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdnContext)
		}
	}

	return tst
}

func (s *CreatorContext) Idn(i int) IIdnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdnContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdnContext)
}

func (s *CreatorContext) Args() IArgsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArgsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArgsContext)
}

func (s *CreatorContext) Routine_body() IRoutine_bodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRoutine_bodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRoutine_bodyContext)
}

func (s *CreatorContext) Returnz() IReturnzContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReturnzContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReturnzContext)
}

func (s *CreatorContext) Signals() ISignalsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISignalsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISignalsContext)
}

func (s *CreatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CreatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.EnterCreator(s)
	}
}

func (s *CreatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.ExitCreator(s)
	}
}

func (p *argusParser) Creator() (localctx ICreatorContext) {
	this := p
	_ = this

	localctx = NewCreatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, argusParserRULE_creator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(340)
		p.Idn()
	}
	{
		p.SetState(341)
		p.Match(argusParserT__0)
	}
	{
		p.SetState(342)
		p.Match(argusParserT__13)
	}
	{
		p.SetState(343)
		p.Args()
	}
	p.SetState(345)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == argusParserT__19 {
		{
			p.SetState(344)
			p.Returnz()
		}

	}
	p.SetState(348)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == argusParserT__21 {
		{
			p.SetState(347)
			p.Signals()
		}

	}
	{
		p.SetState(350)
		p.Routine_body()
	}
	{
		p.SetState(351)
		p.Match(argusParserT__2)
	}
	{
		p.SetState(352)
		p.Idn()
	}

	return localctx
}

// IHandlerContext is an interface to support dynamic dispatch.
type IHandlerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsHandlerContext differentiates from other interfaces.
	IsHandlerContext()
}

type HandlerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHandlerContext() *HandlerContext {
	var p = new(HandlerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = argusParserRULE_handler
	return p
}

func (*HandlerContext) IsHandlerContext() {}

func NewHandlerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *HandlerContext {
	var p = new(HandlerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = argusParserRULE_handler

	return p
}

func (s *HandlerContext) GetParser() antlr.Parser { return s.parser }

func (s *HandlerContext) AllIdn() []IIdnContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdnContext)(nil)).Elem())
	var tst = make([]IIdnContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdnContext)
		}
	}

	return tst
}

func (s *HandlerContext) Idn(i int) IIdnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdnContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdnContext)
}

func (s *HandlerContext) Args() IArgsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArgsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArgsContext)
}

func (s *HandlerContext) Routine_body() IRoutine_bodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRoutine_bodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRoutine_bodyContext)
}

func (s *HandlerContext) Returnz() IReturnzContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReturnzContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReturnzContext)
}

func (s *HandlerContext) Signals() ISignalsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISignalsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISignalsContext)
}

func (s *HandlerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HandlerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *HandlerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.EnterHandler(s)
	}
}

func (s *HandlerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.ExitHandler(s)
	}
}

func (p *argusParser) Handler() (localctx IHandlerContext) {
	this := p
	_ = this

	localctx = NewHandlerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, argusParserRULE_handler)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(354)
		p.Idn()
	}
	{
		p.SetState(355)
		p.Match(argusParserT__0)
	}
	{
		p.SetState(356)
		p.Match(argusParserT__14)
	}
	{
		p.SetState(357)
		p.Args()
	}
	p.SetState(359)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == argusParserT__19 {
		{
			p.SetState(358)
			p.Returnz()
		}

	}
	p.SetState(362)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == argusParserT__21 {
		{
			p.SetState(361)
			p.Signals()
		}

	}
	{
		p.SetState(364)
		p.Routine_body()
	}
	{
		p.SetState(365)
		p.Match(argusParserT__2)
	}
	{
		p.SetState(366)
		p.Idn()
	}

	return localctx
}

// IRoutine_bodyContext is an interface to support dynamic dispatch.
type IRoutine_bodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRoutine_bodyContext differentiates from other interfaces.
	IsRoutine_bodyContext()
}

type Routine_bodyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRoutine_bodyContext() *Routine_bodyContext {
	var p = new(Routine_bodyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = argusParserRULE_routine_body
	return p
}

func (*Routine_bodyContext) IsRoutine_bodyContext() {}

func NewRoutine_bodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Routine_bodyContext {
	var p = new(Routine_bodyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = argusParserRULE_routine_body

	return p
}

func (s *Routine_bodyContext) GetParser() antlr.Parser { return s.parser }

func (s *Routine_bodyContext) AllEquate() []IEquateContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEquateContext)(nil)).Elem())
	var tst = make([]IEquateContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEquateContext)
		}
	}

	return tst
}

func (s *Routine_bodyContext) Equate(i int) IEquateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEquateContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEquateContext)
}

func (s *Routine_bodyContext) AllOwn_var() []IOwn_varContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOwn_varContext)(nil)).Elem())
	var tst = make([]IOwn_varContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOwn_varContext)
		}
	}

	return tst
}

func (s *Routine_bodyContext) Own_var(i int) IOwn_varContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOwn_varContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOwn_varContext)
}

func (s *Routine_bodyContext) AllStatement() []IStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatementContext)(nil)).Elem())
	var tst = make([]IStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatementContext)
		}
	}

	return tst
}

func (s *Routine_bodyContext) Statement(i int) IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *Routine_bodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Routine_bodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Routine_bodyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.EnterRoutine_body(s)
	}
}

func (s *Routine_bodyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.ExitRoutine_body(s)
	}
}

func (p *argusParser) Routine_body() (localctx IRoutine_bodyContext) {
	this := p
	_ = this

	localctx = NewRoutine_bodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, argusParserRULE_routine_body)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(371)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 41, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(368)
				p.Equate()
			}

		}
		p.SetState(373)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 41, p.GetParserRuleContext())
	}
	p.SetState(377)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == argusParserT__29 {
		{
			p.SetState(374)
			p.Own_var()
		}

		p.SetState(379)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(383)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == argusParserT__10 || (((_la-33)&-(0x1f+1)) == 0 && ((1<<uint((_la-33)))&((1<<(argusParserT__32-33))|(1<<(argusParserT__33-33))|(1<<(argusParserT__35-33))|(1<<(argusParserT__36-33))|(1<<(argusParserT__37-33))|(1<<(argusParserT__38-33))|(1<<(argusParserT__39-33))|(1<<(argusParserT__40-33))|(1<<(argusParserT__41-33))|(1<<(argusParserT__42-33))|(1<<(argusParserT__43-33))|(1<<(argusParserT__44-33))|(1<<(argusParserT__45-33))|(1<<(argusParserT__46-33))|(1<<(argusParserT__47-33))|(1<<(argusParserT__50-33))|(1<<(argusParserT__55-33))|(1<<(argusParserT__56-33))|(1<<(argusParserT__60-33))|(1<<(argusParserT__62-33))|(1<<(argusParserT__63-33)))) != 0) || (((_la-69)&-(0x1f+1)) == 0 && ((1<<uint((_la-69)))&((1<<(argusParserT__68-69))|(1<<(argusParserT__69-69))|(1<<(argusParserT__70-69))|(1<<(argusParserT__71-69))|(1<<(argusParserT__72-69))|(1<<(argusParserT__73-69))|(1<<(argusParserT__74-69))|(1<<(argusParserT__75-69))|(1<<(argusParserT__76-69))|(1<<(argusParserT__77-69))|(1<<(argusParserT__78-69))|(1<<(argusParserT__81-69))|(1<<(argusParserT__82-69))|(1<<(argusParserT__83-69))|(1<<(argusParserT__84-69))|(1<<(argusParserT__85-69))|(1<<(argusParserT__86-69))|(1<<(argusParserT__87-69))|(1<<(argusParserT__88-69))|(1<<(argusParserT__89-69))|(1<<(argusParserT__90-69))|(1<<(argusParserT__91-69))|(1<<(argusParserT__92-69))|(1<<(argusParserT__93-69)))) != 0) || (((_la-116)&-(0x1f+1)) == 0 && ((1<<uint((_la-116)))&((1<<(argusParserT__115-116))|(1<<(argusParserT__116-116))|(1<<(argusParserT__117-116))|(1<<(argusParserT__118-116))|(1<<(argusParserT__119-116))|(1<<(argusParserT__120-116))|(1<<(argusParserT__121-116))|(1<<(argusParserINT_LITERAL-116))|(1<<(argusParserREAL_LITERAL-116))|(1<<(argusParserCHAR_LITERAL-116))|(1<<(argusParserSTRING_LITERAL-116))|(1<<(argusParserIDENTIFIER-116)))) != 0) {
		{
			p.SetState(380)
			p.statement(0)
		}

		p.SetState(385)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IParmsContext is an interface to support dynamic dispatch.
type IParmsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParmsContext differentiates from other interfaces.
	IsParmsContext()
}

type ParmsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParmsContext() *ParmsContext {
	var p = new(ParmsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = argusParserRULE_parms
	return p
}

func (*ParmsContext) IsParmsContext() {}

func NewParmsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParmsContext {
	var p = new(ParmsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = argusParserRULE_parms

	return p
}

func (s *ParmsContext) GetParser() antlr.Parser { return s.parser }

func (s *ParmsContext) AllParm() []IParmContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IParmContext)(nil)).Elem())
	var tst = make([]IParmContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IParmContext)
		}
	}

	return tst
}

func (s *ParmsContext) Parm(i int) IParmContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParmContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IParmContext)
}

func (s *ParmsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParmsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ParmsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.EnterParms(s)
	}
}

func (s *ParmsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.ExitParms(s)
	}
}

func (p *argusParser) Parms() (localctx IParmsContext) {
	this := p
	_ = this

	localctx = NewParmsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, argusParserRULE_parms)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(386)
		p.Parm()
	}
	p.SetState(391)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == argusParserT__5 {
		{
			p.SetState(387)
			p.Match(argusParserT__5)
		}
		{
			p.SetState(388)
			p.Parm()
		}

		p.SetState(393)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IParmContext is an interface to support dynamic dispatch.
type IParmContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParmContext differentiates from other interfaces.
	IsParmContext()
}

type ParmContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParmContext() *ParmContext {
	var p = new(ParmContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = argusParserRULE_parm
	return p
}

func (*ParmContext) IsParmContext() {}

func NewParmContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParmContext {
	var p = new(ParmContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = argusParserRULE_parm

	return p
}

func (s *ParmContext) GetParser() antlr.Parser { return s.parser }

func (s *ParmContext) AllIdn() []IIdnContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdnContext)(nil)).Elem())
	var tst = make([]IIdnContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdnContext)
		}
	}

	return tst
}

func (s *ParmContext) Idn(i int) IIdnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdnContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdnContext)
}

func (s *ParmContext) Type_spec() IType_specContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_specContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_specContext)
}

func (s *ParmContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParmContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ParmContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.EnterParm(s)
	}
}

func (s *ParmContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.ExitParm(s)
	}
}

func (p *argusParser) Parm() (localctx IParmContext) {
	this := p
	_ = this

	localctx = NewParmContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, argusParserRULE_parm)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(416)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 47, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(394)
			p.Idn()
		}
		p.SetState(399)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == argusParserT__5 {
			{
				p.SetState(395)
				p.Match(argusParserT__5)
			}
			{
				p.SetState(396)
				p.Idn()
			}

			p.SetState(401)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(402)
			p.Match(argusParserT__15)
		}
		{
			p.SetState(403)
			p.Match(argusParserT__16)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(405)
			p.Idn()
		}
		p.SetState(410)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == argusParserT__5 {
			{
				p.SetState(406)
				p.Match(argusParserT__5)
			}
			{
				p.SetState(407)
				p.Idn()
			}

			p.SetState(412)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(413)
			p.Match(argusParserT__15)
		}
		{
			p.SetState(414)
			p.Type_spec()
		}

	}

	return localctx
}

// IArgsContext is an interface to support dynamic dispatch.
type IArgsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArgsContext differentiates from other interfaces.
	IsArgsContext()
}

type ArgsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArgsContext() *ArgsContext {
	var p = new(ArgsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = argusParserRULE_args
	return p
}

func (*ArgsContext) IsArgsContext() {}

func NewArgsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArgsContext {
	var p = new(ArgsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = argusParserRULE_args

	return p
}

func (s *ArgsContext) GetParser() antlr.Parser { return s.parser }

func (s *ArgsContext) AllDecl() []IDeclContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDeclContext)(nil)).Elem())
	var tst = make([]IDeclContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDeclContext)
		}
	}

	return tst
}

func (s *ArgsContext) Decl(i int) IDeclContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDeclContext)
}

func (s *ArgsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArgsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArgsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.EnterArgs(s)
	}
}

func (s *ArgsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.ExitArgs(s)
	}
}

func (p *argusParser) Args() (localctx IArgsContext) {
	this := p
	_ = this

	localctx = NewArgsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, argusParserRULE_args)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(418)
		p.Match(argusParserT__17)
	}
	p.SetState(429)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == argusParserIDENTIFIER {
		{
			p.SetState(419)
			p.Decl()
		}
		p.SetState(424)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == argusParserT__5 {
			{
				p.SetState(420)
				p.Match(argusParserT__5)
			}
			{
				p.SetState(421)
				p.Decl()
			}

			p.SetState(426)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

		p.SetState(431)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(432)
		p.Match(argusParserT__18)
	}

	return localctx
}

// IDeclContext is an interface to support dynamic dispatch.
type IDeclContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclContext differentiates from other interfaces.
	IsDeclContext()
}

type DeclContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclContext() *DeclContext {
	var p = new(DeclContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = argusParserRULE_decl
	return p
}

func (*DeclContext) IsDeclContext() {}

func NewDeclContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclContext {
	var p = new(DeclContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = argusParserRULE_decl

	return p
}

func (s *DeclContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclContext) AllIdn() []IIdnContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdnContext)(nil)).Elem())
	var tst = make([]IIdnContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdnContext)
		}
	}

	return tst
}

func (s *DeclContext) Idn(i int) IIdnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdnContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdnContext)
}

func (s *DeclContext) Type_spec() IType_specContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_specContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_specContext)
}

func (s *DeclContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeclContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.EnterDecl(s)
	}
}

func (s *DeclContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.ExitDecl(s)
	}
}

func (p *argusParser) Decl() (localctx IDeclContext) {
	this := p
	_ = this

	localctx = NewDeclContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, argusParserRULE_decl)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(434)
		p.Idn()
	}
	p.SetState(439)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == argusParserT__5 {
		{
			p.SetState(435)
			p.Match(argusParserT__5)
		}
		{
			p.SetState(436)
			p.Idn()
		}

		p.SetState(441)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(442)
		p.Match(argusParserT__15)
	}
	{
		p.SetState(443)
		p.Type_spec()
	}

	return localctx
}

// IReturnzContext is an interface to support dynamic dispatch.
type IReturnzContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReturnzContext differentiates from other interfaces.
	IsReturnzContext()
}

type ReturnzContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReturnzContext() *ReturnzContext {
	var p = new(ReturnzContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = argusParserRULE_returnz
	return p
}

func (*ReturnzContext) IsReturnzContext() {}

func NewReturnzContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReturnzContext {
	var p = new(ReturnzContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = argusParserRULE_returnz

	return p
}

func (s *ReturnzContext) GetParser() antlr.Parser { return s.parser }

func (s *ReturnzContext) AllType_spec() []IType_specContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IType_specContext)(nil)).Elem())
	var tst = make([]IType_specContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IType_specContext)
		}
	}

	return tst
}

func (s *ReturnzContext) Type_spec(i int) IType_specContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_specContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IType_specContext)
}

func (s *ReturnzContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReturnzContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReturnzContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.EnterReturnz(s)
	}
}

func (s *ReturnzContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.ExitReturnz(s)
	}
}

func (p *argusParser) Returnz() (localctx IReturnzContext) {
	this := p
	_ = this

	localctx = NewReturnzContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, argusParserRULE_returnz)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(445)
		p.Match(argusParserT__19)
	}
	{
		p.SetState(446)
		p.Match(argusParserT__17)
	}
	{
		p.SetState(447)
		p.Type_spec()
	}
	p.SetState(452)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == argusParserT__5 {
		{
			p.SetState(448)
			p.Match(argusParserT__5)
		}
		{
			p.SetState(449)
			p.Type_spec()
		}

		p.SetState(454)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(455)
		p.Match(argusParserT__18)
	}

	return localctx
}

// IYieldsContext is an interface to support dynamic dispatch.
type IYieldsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsYieldsContext differentiates from other interfaces.
	IsYieldsContext()
}

type YieldsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyYieldsContext() *YieldsContext {
	var p = new(YieldsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = argusParserRULE_yields
	return p
}

func (*YieldsContext) IsYieldsContext() {}

func NewYieldsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *YieldsContext {
	var p = new(YieldsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = argusParserRULE_yields

	return p
}

func (s *YieldsContext) GetParser() antlr.Parser { return s.parser }

func (s *YieldsContext) AllType_spec() []IType_specContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IType_specContext)(nil)).Elem())
	var tst = make([]IType_specContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IType_specContext)
		}
	}

	return tst
}

func (s *YieldsContext) Type_spec(i int) IType_specContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_specContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IType_specContext)
}

func (s *YieldsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *YieldsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *YieldsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.EnterYields(s)
	}
}

func (s *YieldsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.ExitYields(s)
	}
}

func (p *argusParser) Yields() (localctx IYieldsContext) {
	this := p
	_ = this

	localctx = NewYieldsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, argusParserRULE_yields)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(457)
		p.Match(argusParserT__20)
	}
	{
		p.SetState(458)
		p.Match(argusParserT__17)
	}
	{
		p.SetState(459)
		p.Type_spec()
	}
	p.SetState(464)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == argusParserT__5 {
		{
			p.SetState(460)
			p.Match(argusParserT__5)
		}
		{
			p.SetState(461)
			p.Type_spec()
		}

		p.SetState(466)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(467)
		p.Match(argusParserT__18)
	}

	return localctx
}

// ISignalsContext is an interface to support dynamic dispatch.
type ISignalsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSignalsContext differentiates from other interfaces.
	IsSignalsContext()
}

type SignalsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySignalsContext() *SignalsContext {
	var p = new(SignalsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = argusParserRULE_signals
	return p
}

func (*SignalsContext) IsSignalsContext() {}

func NewSignalsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SignalsContext {
	var p = new(SignalsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = argusParserRULE_signals

	return p
}

func (s *SignalsContext) GetParser() antlr.Parser { return s.parser }

func (s *SignalsContext) AllException_() []IException_Context {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IException_Context)(nil)).Elem())
	var tst = make([]IException_Context, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IException_Context)
		}
	}

	return tst
}

func (s *SignalsContext) Exception_(i int) IException_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IException_Context)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IException_Context)
}

func (s *SignalsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SignalsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SignalsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.EnterSignals(s)
	}
}

func (s *SignalsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.ExitSignals(s)
	}
}

func (p *argusParser) Signals() (localctx ISignalsContext) {
	this := p
	_ = this

	localctx = NewSignalsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, argusParserRULE_signals)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(469)
		p.Match(argusParserT__21)
	}
	{
		p.SetState(470)
		p.Match(argusParserT__17)
	}
	{
		p.SetState(471)
		p.Exception_()
	}
	p.SetState(476)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == argusParserT__5 {
		{
			p.SetState(472)
			p.Match(argusParserT__5)
		}
		{
			p.SetState(473)
			p.Exception_()
		}

		p.SetState(478)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(479)
		p.Match(argusParserT__18)
	}

	return localctx
}

// IException_Context is an interface to support dynamic dispatch.
type IException_Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsException_Context differentiates from other interfaces.
	IsException_Context()
}

type Exception_Context struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyException_Context() *Exception_Context {
	var p = new(Exception_Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = argusParserRULE_exception_
	return p
}

func (*Exception_Context) IsException_Context() {}

func NewException_Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Exception_Context {
	var p = new(Exception_Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = argusParserRULE_exception_

	return p
}

func (s *Exception_Context) GetParser() antlr.Parser { return s.parser }

func (s *Exception_Context) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *Exception_Context) AllType_spec() []IType_specContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IType_specContext)(nil)).Elem())
	var tst = make([]IType_specContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IType_specContext)
		}
	}

	return tst
}

func (s *Exception_Context) Type_spec(i int) IType_specContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_specContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IType_specContext)
}

func (s *Exception_Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Exception_Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Exception_Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.EnterException_(s)
	}
}

func (s *Exception_Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.ExitException_(s)
	}
}

func (p *argusParser) Exception_() (localctx IException_Context) {
	this := p
	_ = this

	localctx = NewException_Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, argusParserRULE_exception_)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(481)
		p.Name()
	}
	p.SetState(490)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == argusParserT__10 || (((_la-69)&-(0x1f+1)) == 0 && ((1<<uint((_la-69)))&((1<<(argusParserT__68-69))|(1<<(argusParserT__69-69))|(1<<(argusParserT__70-69))|(1<<(argusParserT__71-69))|(1<<(argusParserT__72-69))|(1<<(argusParserT__73-69))|(1<<(argusParserT__74-69))|(1<<(argusParserT__75-69))|(1<<(argusParserT__76-69))|(1<<(argusParserT__77-69))|(1<<(argusParserT__78-69))|(1<<(argusParserT__81-69))|(1<<(argusParserT__82-69))|(1<<(argusParserT__83-69))|(1<<(argusParserT__84-69))|(1<<(argusParserT__85-69))|(1<<(argusParserT__86-69))|(1<<(argusParserT__87-69))|(1<<(argusParserT__88-69))|(1<<(argusParserT__89-69))|(1<<(argusParserT__90-69))|(1<<(argusParserT__91-69))|(1<<(argusParserT__92-69))|(1<<(argusParserT__93-69)))) != 0) || _la == argusParserIDENTIFIER {
		{
			p.SetState(482)
			p.Type_spec()
		}
		p.SetState(487)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 54, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(483)
					p.Match(argusParserT__5)
				}
				{
					p.SetState(484)
					p.Type_spec()
				}

			}
			p.SetState(489)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 54, p.GetParserRuleContext())
		}

	}

	return localctx
}

// IOpidnContext is an interface to support dynamic dispatch.
type IOpidnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOpidnContext differentiates from other interfaces.
	IsOpidnContext()
}

type OpidnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpidnContext() *OpidnContext {
	var p = new(OpidnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = argusParserRULE_opidn
	return p
}

func (*OpidnContext) IsOpidnContext() {}

func NewOpidnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OpidnContext {
	var p = new(OpidnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = argusParserRULE_opidn

	return p
}

func (s *OpidnContext) GetParser() antlr.Parser { return s.parser }

func (s *OpidnContext) Idn() IIdnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdnContext)
}

func (s *OpidnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OpidnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OpidnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.EnterOpidn(s)
	}
}

func (s *OpidnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.ExitOpidn(s)
	}
}

func (p *argusParser) Opidn() (localctx IOpidnContext) {
	this := p
	_ = this

	localctx = NewOpidnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, argusParserRULE_opidn)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(494)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case argusParserIDENTIFIER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(492)
			p.Idn()
		}

	case argusParserT__22:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(493)
			p.Match(argusParserT__22)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IWhereContext is an interface to support dynamic dispatch.
type IWhereContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWhereContext differentiates from other interfaces.
	IsWhereContext()
}

type WhereContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWhereContext() *WhereContext {
	var p = new(WhereContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = argusParserRULE_where
	return p
}

func (*WhereContext) IsWhereContext() {}

func NewWhereContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WhereContext {
	var p = new(WhereContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = argusParserRULE_where

	return p
}

func (s *WhereContext) GetParser() antlr.Parser { return s.parser }

func (s *WhereContext) AllRestriction() []IRestrictionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IRestrictionContext)(nil)).Elem())
	var tst = make([]IRestrictionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IRestrictionContext)
		}
	}

	return tst
}

func (s *WhereContext) Restriction(i int) IRestrictionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRestrictionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IRestrictionContext)
}

func (s *WhereContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WhereContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WhereContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.EnterWhere(s)
	}
}

func (s *WhereContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.ExitWhere(s)
	}
}

func (p *argusParser) Where() (localctx IWhereContext) {
	this := p
	_ = this

	localctx = NewWhereContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, argusParserRULE_where)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(496)
		p.Match(argusParserT__23)
	}
	{
		p.SetState(497)
		p.Restriction()
	}
	p.SetState(502)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == argusParserT__5 {
		{
			p.SetState(498)
			p.Match(argusParserT__5)
		}
		{
			p.SetState(499)
			p.Restriction()
		}

		p.SetState(504)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IRestrictionContext is an interface to support dynamic dispatch.
type IRestrictionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRestrictionContext differentiates from other interfaces.
	IsRestrictionContext()
}

type RestrictionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRestrictionContext() *RestrictionContext {
	var p = new(RestrictionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = argusParserRULE_restriction
	return p
}

func (*RestrictionContext) IsRestrictionContext() {}

func NewRestrictionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RestrictionContext {
	var p = new(RestrictionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = argusParserRULE_restriction

	return p
}

func (s *RestrictionContext) GetParser() antlr.Parser { return s.parser }

func (s *RestrictionContext) Idn() IIdnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdnContext)
}

func (s *RestrictionContext) AllOper_decl() []IOper_declContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOper_declContext)(nil)).Elem())
	var tst = make([]IOper_declContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOper_declContext)
		}
	}

	return tst
}

func (s *RestrictionContext) Oper_decl(i int) IOper_declContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOper_declContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOper_declContext)
}

func (s *RestrictionContext) Type_set() IType_setContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_setContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_setContext)
}

func (s *RestrictionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RestrictionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RestrictionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.EnterRestriction(s)
	}
}

func (s *RestrictionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.ExitRestriction(s)
	}
}

func (p *argusParser) Restriction() (localctx IRestrictionContext) {
	this := p
	_ = this

	localctx = NewRestrictionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, argusParserRULE_restriction)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(519)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 59, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(505)
			p.Idn()
		}
		{
			p.SetState(506)
			p.Match(argusParserT__24)
		}
		{
			p.SetState(507)
			p.Oper_decl()
		}
		p.SetState(512)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 58, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(508)
					p.Match(argusParserT__5)
				}
				{
					p.SetState(509)
					p.Oper_decl()
				}

			}
			p.SetState(514)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 58, p.GetParserRuleContext())
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(515)
			p.Idn()
		}
		{
			p.SetState(516)
			p.Match(argusParserT__25)
		}
		{
			p.SetState(517)
			p.Type_set()
		}

	}

	return localctx
}

// IType_setContext is an interface to support dynamic dispatch.
type IType_setContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsType_setContext differentiates from other interfaces.
	IsType_setContext()
}

type Type_setContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyType_setContext() *Type_setContext {
	var p = new(Type_setContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = argusParserRULE_type_set
	return p
}

func (*Type_setContext) IsType_setContext() {}

func NewType_setContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Type_setContext {
	var p = new(Type_setContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = argusParserRULE_type_set

	return p
}

func (s *Type_setContext) GetParser() antlr.Parser { return s.parser }

func (s *Type_setContext) AllIdn() []IIdnContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdnContext)(nil)).Elem())
	var tst = make([]IIdnContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdnContext)
		}
	}

	return tst
}

func (s *Type_setContext) Idn(i int) IIdnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdnContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdnContext)
}

func (s *Type_setContext) AllOper_decl() []IOper_declContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOper_declContext)(nil)).Elem())
	var tst = make([]IOper_declContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOper_declContext)
		}
	}

	return tst
}

func (s *Type_setContext) Oper_decl(i int) IOper_declContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOper_declContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOper_declContext)
}

func (s *Type_setContext) AllEquate() []IEquateContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEquateContext)(nil)).Elem())
	var tst = make([]IEquateContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEquateContext)
		}
	}

	return tst
}

func (s *Type_setContext) Equate(i int) IEquateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEquateContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEquateContext)
}

func (s *Type_setContext) Reference() IReferenceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReferenceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReferenceContext)
}

func (s *Type_setContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *Type_setContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Type_setContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Type_setContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.EnterType_set(s)
	}
}

func (s *Type_setContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.ExitType_set(s)
	}
}

func (p *argusParser) Type_set() (localctx IType_setContext) {
	this := p
	_ = this

	localctx = NewType_setContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, argusParserRULE_type_set)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(548)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 64, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(540)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 63, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				p.SetState(538)
				p.GetErrorHandler().Sync(p)
				switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 62, p.GetParserRuleContext()) {
				case 1:
					{
						p.SetState(521)
						p.Idn()
					}

				case 2:
					{
						p.SetState(522)
						p.Idn()
					}
					{
						p.SetState(523)
						p.Match(argusParserT__24)
					}
					{
						p.SetState(524)
						p.Oper_decl()
					}
					p.SetState(529)
					p.GetErrorHandler().Sync(p)
					_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 60, p.GetParserRuleContext())

					for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
						if _alt == 1 {
							{
								p.SetState(525)
								p.Match(argusParserT__5)
							}
							{
								p.SetState(526)
								p.Oper_decl()
							}

						}
						p.SetState(531)
						p.GetErrorHandler().Sync(p)
						_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 60, p.GetParserRuleContext())
					}
					p.SetState(535)
					p.GetErrorHandler().Sync(p)
					_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 61, p.GetParserRuleContext())

					for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
						if _alt == 1 {
							{
								p.SetState(532)
								p.Equate()
							}

						}
						p.SetState(537)
						p.GetErrorHandler().Sync(p)
						_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 61, p.GetParserRuleContext())
					}

				}

			}
			p.SetState(542)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 63, p.GetParserRuleContext())
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(543)
			p.Idn()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(544)
			p.reference(0)
		}
		{
			p.SetState(545)
			p.Match(argusParserT__26)
		}
		{
			p.SetState(546)
			p.Name()
		}

	}

	return localctx
}

// IOper_declContext is an interface to support dynamic dispatch.
type IOper_declContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOper_declContext differentiates from other interfaces.
	IsOper_declContext()
}

type Oper_declContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOper_declContext() *Oper_declContext {
	var p = new(Oper_declContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = argusParserRULE_oper_decl
	return p
}

func (*Oper_declContext) IsOper_declContext() {}

func NewOper_declContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Oper_declContext {
	var p = new(Oper_declContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = argusParserRULE_oper_decl

	return p
}

func (s *Oper_declContext) GetParser() antlr.Parser { return s.parser }

func (s *Oper_declContext) AllName() []INameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*INameContext)(nil)).Elem())
	var tst = make([]INameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(INameContext)
		}
	}

	return tst
}

func (s *Oper_declContext) Name(i int) INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *Oper_declContext) Type_spec() IType_specContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_specContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_specContext)
}

func (s *Oper_declContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Oper_declContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Oper_declContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.EnterOper_decl(s)
	}
}

func (s *Oper_declContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.ExitOper_decl(s)
	}
}

func (p *argusParser) Oper_decl() (localctx IOper_declContext) {
	this := p
	_ = this

	localctx = NewOper_declContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, argusParserRULE_oper_decl)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(562)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case argusParserIDENTIFIER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(550)
			p.Name()
		}
		p.SetState(555)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == argusParserT__5 {
			{
				p.SetState(551)
				p.Match(argusParserT__5)
			}
			{
				p.SetState(552)
				p.Name()
			}

			p.SetState(557)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(558)
			p.Match(argusParserT__15)
		}
		{
			p.SetState(559)
			p.Type_spec()
		}

	case argusParserT__22:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(561)
			p.Match(argusParserT__22)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IConstantContext is an interface to support dynamic dispatch.
type IConstantContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConstantContext differentiates from other interfaces.
	IsConstantContext()
}

type ConstantContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstantContext() *ConstantContext {
	var p = new(ConstantContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = argusParserRULE_constant
	return p
}

func (*ConstantContext) IsConstantContext() {}

func NewConstantContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConstantContext {
	var p = new(ConstantContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = argusParserRULE_constant

	return p
}

func (s *ConstantContext) GetParser() antlr.Parser { return s.parser }

func (s *ConstantContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ConstantContext) Type_spec() IType_specContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_specContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_specContext)
}

func (s *ConstantContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstantContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConstantContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.EnterConstant(s)
	}
}

func (s *ConstantContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.ExitConstant(s)
	}
}

func (p *argusParser) Constant() (localctx IConstantContext) {
	this := p
	_ = this

	localctx = NewConstantContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, argusParserRULE_constant)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(566)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 67, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(564)
			p.expression(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(565)
			p.Type_spec()
		}

	}

	return localctx
}

// IState_declContext is an interface to support dynamic dispatch.
type IState_declContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsState_declContext differentiates from other interfaces.
	IsState_declContext()
}

type State_declContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyState_declContext() *State_declContext {
	var p = new(State_declContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = argusParserRULE_state_decl
	return p
}

func (*State_declContext) IsState_declContext() {}

func NewState_declContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *State_declContext {
	var p = new(State_declContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = argusParserRULE_state_decl

	return p
}

func (s *State_declContext) GetParser() antlr.Parser { return s.parser }

func (s *State_declContext) AllDecl() []IDeclContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDeclContext)(nil)).Elem())
	var tst = make([]IDeclContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDeclContext)
		}
	}

	return tst
}

func (s *State_declContext) Decl(i int) IDeclContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDeclContext)
}

func (s *State_declContext) Idn() IIdnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdnContext)
}

func (s *State_declContext) Type_spec() IType_specContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_specContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_specContext)
}

func (s *State_declContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *State_declContext) Call() ICallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallContext)
}

func (s *State_declContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *State_declContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *State_declContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.EnterState_decl(s)
	}
}

func (s *State_declContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.ExitState_decl(s)
	}
}

func (p *argusParser) State_decl() (localctx IState_declContext) {
	this := p
	_ = this

	localctx = NewState_declContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, argusParserRULE_state_decl)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(595)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 72, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(569)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == argusParserT__27 {
			{
				p.SetState(568)
				p.Match(argusParserT__27)
			}

		}
		{
			p.SetState(571)
			p.Decl()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(573)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == argusParserT__27 {
			{
				p.SetState(572)
				p.Match(argusParserT__27)
			}

		}
		{
			p.SetState(575)
			p.Idn()
		}
		{
			p.SetState(576)
			p.Match(argusParserT__15)
		}
		{
			p.SetState(577)
			p.Type_spec()
		}
		{
			p.SetState(578)
			p.Match(argusParserT__28)
		}
		{
			p.SetState(579)
			p.expression(0)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		p.SetState(582)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == argusParserT__27 {
			{
				p.SetState(581)
				p.Match(argusParserT__27)
			}

		}
		{
			p.SetState(584)
			p.Decl()
		}
		p.SetState(589)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == argusParserT__5 {
			{
				p.SetState(585)
				p.Match(argusParserT__5)
			}
			{
				p.SetState(586)
				p.Decl()
			}

			p.SetState(591)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(592)
			p.Match(argusParserT__28)
		}
		{
			p.SetState(593)
			p.Call()
		}

	}

	return localctx
}

// IEquateContext is an interface to support dynamic dispatch.
type IEquateContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEquateContext differentiates from other interfaces.
	IsEquateContext()
}

type EquateContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEquateContext() *EquateContext {
	var p = new(EquateContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = argusParserRULE_equate
	return p
}

func (*EquateContext) IsEquateContext() {}

func NewEquateContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EquateContext {
	var p = new(EquateContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = argusParserRULE_equate

	return p
}

func (s *EquateContext) GetParser() antlr.Parser { return s.parser }

func (s *EquateContext) Idn() IIdnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdnContext)
}

func (s *EquateContext) Constant() IConstantContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantContext)
}

func (s *EquateContext) Type_set() IType_setContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_setContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_setContext)
}

func (s *EquateContext) Reference() IReferenceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReferenceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReferenceContext)
}

func (s *EquateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EquateContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EquateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.EnterEquate(s)
	}
}

func (s *EquateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.ExitEquate(s)
	}
}

func (p *argusParser) Equate() (localctx IEquateContext) {
	this := p
	_ = this

	localctx = NewEquateContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, argusParserRULE_equate)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(609)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 73, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(597)
			p.Idn()
		}
		{
			p.SetState(598)
			p.Match(argusParserT__0)
		}
		{
			p.SetState(599)
			p.Constant()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(601)
			p.Idn()
		}
		{
			p.SetState(602)
			p.Match(argusParserT__0)
		}
		{
			p.SetState(603)
			p.Type_set()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(605)
			p.Idn()
		}
		{
			p.SetState(606)
			p.Match(argusParserT__0)
		}
		{
			p.SetState(607)
			p.reference(0)
		}

	}

	return localctx
}

// IOwn_varContext is an interface to support dynamic dispatch.
type IOwn_varContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOwn_varContext differentiates from other interfaces.
	IsOwn_varContext()
}

type Own_varContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOwn_varContext() *Own_varContext {
	var p = new(Own_varContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = argusParserRULE_own_var
	return p
}

func (*Own_varContext) IsOwn_varContext() {}

func NewOwn_varContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Own_varContext {
	var p = new(Own_varContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = argusParserRULE_own_var

	return p
}

func (s *Own_varContext) GetParser() antlr.Parser { return s.parser }

func (s *Own_varContext) AllDecl() []IDeclContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDeclContext)(nil)).Elem())
	var tst = make([]IDeclContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDeclContext)
		}
	}

	return tst
}

func (s *Own_varContext) Decl(i int) IDeclContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDeclContext)
}

func (s *Own_varContext) Idn() IIdnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdnContext)
}

func (s *Own_varContext) Type_spec() IType_specContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_specContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_specContext)
}

func (s *Own_varContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Own_varContext) Call() ICallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallContext)
}

func (s *Own_varContext) Primaries() IPrimariesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimariesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimariesContext)
}

func (s *Own_varContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Own_varContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Own_varContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.EnterOwn_var(s)
	}
}

func (s *Own_varContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.ExitOwn_var(s)
	}
}

func (p *argusParser) Own_var() (localctx IOwn_varContext) {
	this := p
	_ = this

	localctx = NewOwn_varContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, argusParserRULE_own_var)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(635)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 76, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(611)
			p.Match(argusParserT__29)
		}
		{
			p.SetState(612)
			p.Decl()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(613)
			p.Match(argusParserT__29)
		}
		{
			p.SetState(614)
			p.Idn()
		}
		{
			p.SetState(615)
			p.Match(argusParserT__15)
		}
		{
			p.SetState(616)
			p.Type_spec()
		}
		{
			p.SetState(617)
			p.Match(argusParserT__28)
		}
		{
			p.SetState(618)
			p.expression(0)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(620)
			p.Match(argusParserT__29)
		}
		{
			p.SetState(621)
			p.Decl()
		}
		p.SetState(626)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == argusParserT__5 {
			{
				p.SetState(622)
				p.Match(argusParserT__5)
			}
			{
				p.SetState(623)
				p.Decl()
			}

			p.SetState(628)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(629)
			p.Match(argusParserT__28)
		}
		{
			p.SetState(630)
			p.Call()
		}
		p.SetState(633)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == argusParserT__30 {
			{
				p.SetState(631)
				p.Match(argusParserT__30)
			}
			{
				p.SetState(632)
				p.Primaries()
			}

		}

	}

	return localctx
}

// IStatementContext is an interface to support dynamic dispatch.
type IStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatementContext differentiates from other interfaces.
	IsStatementContext()
}

type StatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementContext() *StatementContext {
	var p = new(StatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = argusParserRULE_statement
	return p
}

func (*StatementContext) IsStatementContext() {}

func NewStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementContext {
	var p = new(StatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = argusParserRULE_statement

	return p
}

func (s *StatementContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementContext) AllDecl() []IDeclContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDeclContext)(nil)).Elem())
	var tst = make([]IDeclContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDeclContext)
		}
	}

	return tst
}

func (s *StatementContext) Decl(i int) IDeclContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDeclContext)
}

func (s *StatementContext) AllIdn() []IIdnContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdnContext)(nil)).Elem())
	var tst = make([]IIdnContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdnContext)
		}
	}

	return tst
}

func (s *StatementContext) Idn(i int) IIdnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdnContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdnContext)
}

func (s *StatementContext) Type_spec() IType_specContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_specContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_specContext)
}

func (s *StatementContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *StatementContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *StatementContext) Call() ICallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallContext)
}

func (s *StatementContext) Primaries() IPrimariesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimariesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimariesContext)
}

func (s *StatementContext) AllName() []INameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*INameContext)(nil)).Elem())
	var tst = make([]INameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(INameContext)
		}
	}

	return tst
}

func (s *StatementContext) Name(i int) INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *StatementContext) Body() IBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBodyContext)
}

func (s *StatementContext) Enter_stmt() IEnter_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnter_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnter_stmtContext)
}

func (s *StatementContext) AllCoarm() []ICoarmContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICoarmContext)(nil)).Elem())
	var tst = make([]ICoarmContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICoarmContext)
		}
	}

	return tst
}

func (s *StatementContext) Coarm(i int) ICoarmContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICoarmContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICoarmContext)
}

func (s *StatementContext) For_stmt() IFor_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFor_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFor_stmtContext)
}

func (s *StatementContext) If_stmt() IIf_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIf_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIf_stmtContext)
}

func (s *StatementContext) Tagcase_stmt() ITagcase_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITagcase_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITagcase_stmtContext)
}

func (s *StatementContext) Tagtest_stmt() ITagtest_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITagtest_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITagtest_stmtContext)
}

func (s *StatementContext) Tagwait_stmt() ITagwait_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITagwait_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITagwait_stmtContext)
}

func (s *StatementContext) Statement() IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *StatementContext) AllWhen_handler() []IWhen_handlerContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IWhen_handlerContext)(nil)).Elem())
	var tst = make([]IWhen_handlerContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IWhen_handlerContext)
		}
	}

	return tst
}

func (s *StatementContext) When_handler(i int) IWhen_handlerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhen_handlerContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IWhen_handlerContext)
}

func (s *StatementContext) Others_handler() IOthers_handlerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOthers_handlerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOthers_handlerContext)
}

func (s *StatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.EnterStatement(s)
	}
}

func (s *StatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.ExitStatement(s)
	}
}

func (p *argusParser) Statement() (localctx IStatementContext) {
	return p.statement(0)
}

func (p *argusParser) statement(_p int) (localctx IStatementContext) {
	this := p
	_ = this

	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewStatementContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IStatementContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 56
	p.EnterRecursionRule(localctx, 56, argusParserRULE_statement, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(811)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 100, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(638)
			p.Decl()
		}

	case 2:
		{
			p.SetState(639)
			p.Idn()
		}
		{
			p.SetState(640)
			p.Match(argusParserT__15)
		}
		{
			p.SetState(641)
			p.Type_spec()
		}
		{
			p.SetState(642)
			p.Match(argusParserT__28)
		}
		{
			p.SetState(643)
			p.expression(0)
		}

	case 3:
		{
			p.SetState(645)
			p.Decl()
		}
		p.SetState(650)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == argusParserT__5 {
			{
				p.SetState(646)
				p.Match(argusParserT__5)
			}
			{
				p.SetState(647)
				p.Decl()
			}

			p.SetState(652)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(653)
			p.Match(argusParserT__28)
		}
		{
			p.SetState(654)
			p.Call()
		}
		p.SetState(657)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 78, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(655)
				p.Match(argusParserT__30)
			}
			{
				p.SetState(656)
				p.Primaries()
			}

		}

	case 4:
		{
			p.SetState(659)
			p.Idn()
		}
		p.SetState(664)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == argusParserT__5 {
			{
				p.SetState(660)
				p.Match(argusParserT__5)
			}
			{
				p.SetState(661)
				p.Idn()
			}

			p.SetState(666)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(667)
			p.Match(argusParserT__28)
		}
		{
			p.SetState(668)
			p.Call()
		}
		p.SetState(671)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 80, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(669)
				p.Match(argusParserT__30)
			}
			{
				p.SetState(670)
				p.Primaries()
			}

		}

	case 5:
		{
			p.SetState(673)
			p.Idn()
		}
		p.SetState(678)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == argusParserT__5 {
			{
				p.SetState(674)
				p.Match(argusParserT__5)
			}
			{
				p.SetState(675)
				p.Idn()
			}

			p.SetState(680)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(681)
			p.Match(argusParserT__28)
		}
		{
			p.SetState(682)
			p.expression(0)
		}
		p.SetState(687)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 82, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(683)
					p.Match(argusParserT__5)
				}
				{
					p.SetState(684)
					p.expression(0)
				}

			}
			p.SetState(689)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 82, p.GetParserRuleContext())
		}

	case 6:
		{
			p.SetState(690)
			p.Primaries()
		}
		{
			p.SetState(691)
			p.Match(argusParserT__31)
		}
		{
			p.SetState(692)
			p.Name()
		}
		{
			p.SetState(693)
			p.Match(argusParserT__28)
		}
		{
			p.SetState(694)
			p.expression(0)
		}

	case 7:
		{
			p.SetState(696)
			p.Primaries()
		}
		p.SetState(698)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == argusParserT__10 || _la == argusParserT__17 || (((_la-69)&-(0x1f+1)) == 0 && ((1<<uint((_la-69)))&((1<<(argusParserT__68-69))|(1<<(argusParserT__69-69))|(1<<(argusParserT__70-69))|(1<<(argusParserT__71-69))|(1<<(argusParserT__72-69))|(1<<(argusParserT__73-69))|(1<<(argusParserT__74-69))|(1<<(argusParserT__75-69))|(1<<(argusParserT__76-69))|(1<<(argusParserT__77-69))|(1<<(argusParserT__78-69))|(1<<(argusParserT__81-69))|(1<<(argusParserT__82-69))|(1<<(argusParserT__83-69))|(1<<(argusParserT__84-69))|(1<<(argusParserT__85-69))|(1<<(argusParserT__86-69))|(1<<(argusParserT__87-69))|(1<<(argusParserT__88-69))|(1<<(argusParserT__89-69))|(1<<(argusParserT__90-69))|(1<<(argusParserT__91-69))|(1<<(argusParserT__92-69))|(1<<(argusParserT__93-69))|(1<<(argusParserT__95-69))|(1<<(argusParserT__96-69)))) != 0) || (((_la-116)&-(0x1f+1)) == 0 && ((1<<uint((_la-116)))&((1<<(argusParserT__115-116))|(1<<(argusParserT__116-116))|(1<<(argusParserT__117-116))|(1<<(argusParserT__118-116))|(1<<(argusParserT__119-116))|(1<<(argusParserT__120-116))|(1<<(argusParserT__121-116))|(1<<(argusParserINT_LITERAL-116))|(1<<(argusParserREAL_LITERAL-116))|(1<<(argusParserCHAR_LITERAL-116))|(1<<(argusParserSTRING_LITERAL-116))|(1<<(argusParserIDENTIFIER-116)))) != 0) {
			{
				p.SetState(697)
				p.expression(0)
			}

		}
		{
			p.SetState(700)
			p.Match(argusParserT__28)
		}
		{
			p.SetState(701)
			p.expression(0)
		}

	case 8:
		{
			p.SetState(703)
			p.Call()
		}
		p.SetState(706)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 84, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(704)
				p.Match(argusParserT__30)
			}
			{
				p.SetState(705)
				p.Primaries()
			}

		}

	case 9:
		{
			p.SetState(708)
			p.Match(argusParserT__32)
		}
		{
			p.SetState(709)
			p.Call()
		}

	case 10:
		{
			p.SetState(710)
			p.Match(argusParserT__33)
		}
		{
			p.SetState(711)
			p.expression(0)
		}
		{
			p.SetState(712)
			p.Match(argusParserT__34)
		}
		{
			p.SetState(713)
			p.Body()
		}
		{
			p.SetState(714)
			p.Match(argusParserT__2)
		}

	case 11:
		{
			p.SetState(716)
			p.Match(argusParserT__35)
		}

	case 12:
		{
			p.SetState(717)
			p.Match(argusParserT__36)
		}

	case 13:
		{
			p.SetState(718)
			p.Enter_stmt()
		}

	case 14:
		{
			p.SetState(719)
			p.Match(argusParserT__37)
		}
		{
			p.SetState(720)
			p.Coarm()
		}
		p.SetState(724)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ((_la-52)&-(0x1f+1)) == 0 && ((1<<uint((_la-52)))&((1<<(argusParserT__51-52))|(1<<(argusParserT__52-52))|(1<<(argusParserT__54-52)))) != 0 {
			{
				p.SetState(721)
				p.Coarm()
			}

			p.SetState(726)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(727)
			p.Match(argusParserT__2)
		}

	case 15:
		p.SetState(730)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == argusParserT__38 {
			{
				p.SetState(729)
				p.Match(argusParserT__38)
			}

		}
		{
			p.SetState(732)
			p.Match(argusParserT__39)
		}

	case 16:
		{
			p.SetState(733)
			p.Match(argusParserT__40)
		}
		{
			p.SetState(734)
			p.expression(0)
		}
		{
			p.SetState(735)
			p.Match(argusParserT__34)
		}
		{
			p.SetState(736)
			p.Body()
		}
		{
			p.SetState(737)
			p.Match(argusParserT__2)
		}

	case 17:
		{
			p.SetState(739)
			p.For_stmt()
		}

	case 18:
		{
			p.SetState(740)
			p.If_stmt()
		}

	case 19:
		{
			p.SetState(741)
			p.Tagcase_stmt()
		}

	case 20:
		{
			p.SetState(742)
			p.Tagtest_stmt()
		}

	case 21:
		{
			p.SetState(743)
			p.Tagwait_stmt()
		}

	case 22:
		p.SetState(745)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == argusParserT__38 {
			{
				p.SetState(744)
				p.Match(argusParserT__38)
			}

		}
		{
			p.SetState(747)
			p.Match(argusParserT__41)
		}
		p.SetState(756)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 89, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(748)
				p.expression(0)
			}
			p.SetState(753)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 88, p.GetParserRuleContext())

			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(749)
						p.Match(argusParserT__5)
					}
					{
						p.SetState(750)
						p.expression(0)
					}

				}
				p.SetState(755)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 88, p.GetParserRuleContext())
			}

		}

	case 23:
		{
			p.SetState(758)
			p.Match(argusParserT__42)
		}
		p.SetState(767)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 91, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(759)
				p.expression(0)
			}
			p.SetState(764)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 90, p.GetParserRuleContext())

			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(760)
						p.Match(argusParserT__5)
					}
					{
						p.SetState(761)
						p.expression(0)
					}

				}
				p.SetState(766)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 90, p.GetParserRuleContext())
			}

		}

	case 24:
		p.SetState(770)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == argusParserT__38 {
			{
				p.SetState(769)
				p.Match(argusParserT__38)
			}

		}
		{
			p.SetState(772)
			p.Match(argusParserT__43)
		}
		{
			p.SetState(773)
			p.Name()
		}
		p.SetState(782)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 94, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(774)
				p.expression(0)
			}
			p.SetState(779)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 93, p.GetParserRuleContext())

			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(775)
						p.Match(argusParserT__5)
					}
					{
						p.SetState(776)
						p.expression(0)
					}

				}
				p.SetState(781)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 93, p.GetParserRuleContext())
			}

		}

	case 25:
		p.SetState(785)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == argusParserT__38 {
			{
				p.SetState(784)
				p.Match(argusParserT__38)
			}

		}
		{
			p.SetState(787)
			p.Match(argusParserT__44)
		}
		{
			p.SetState(788)
			p.Name()
		}
		p.SetState(797)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 97, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(789)
				p.expression(0)
			}
			p.SetState(794)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 96, p.GetParserRuleContext())

			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(790)
						p.Match(argusParserT__5)
					}
					{
						p.SetState(791)
						p.expression(0)
					}

				}
				p.SetState(796)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 96, p.GetParserRuleContext())
			}

		}

	case 26:
		p.SetState(800)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == argusParserT__38 {
			{
				p.SetState(799)
				p.Match(argusParserT__38)
			}

		}
		{
			p.SetState(802)
			p.Match(argusParserT__45)
		}

	case 27:
		p.SetState(804)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == argusParserT__38 {
			{
				p.SetState(803)
				p.Match(argusParserT__38)
			}

		}
		{
			p.SetState(806)
			p.Match(argusParserT__46)
		}

	case 28:
		{
			p.SetState(807)
			p.Match(argusParserT__47)
		}
		{
			p.SetState(808)
			p.Body()
		}
		{
			p.SetState(809)
			p.Match(argusParserT__2)
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(840)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 106, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(838)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 105, p.GetParserRuleContext()) {
			case 1:
				localctx = NewStatementContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, argusParserRULE_statement)
				p.SetState(813)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				p.SetState(815)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == argusParserT__38 {
					{
						p.SetState(814)
						p.Match(argusParserT__38)
					}

				}
				{
					p.SetState(817)
					p.Match(argusParserT__48)
				}
				{
					p.SetState(818)
					p.Name()
				}
				p.SetState(823)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 102, p.GetParserRuleContext())

				for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
					if _alt == 1 {
						{
							p.SetState(819)
							p.Match(argusParserT__5)
						}
						{
							p.SetState(820)
							p.Name()
						}

					}
					p.SetState(825)
					p.GetErrorHandler().Sync(p)
					_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 102, p.GetParserRuleContext())
				}

			case 2:
				localctx = NewStatementContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, argusParserRULE_statement)
				p.SetState(826)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(827)
					p.Match(argusParserT__49)
				}
				p.SetState(831)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for _la == argusParserT__66 {
					{
						p.SetState(828)
						p.When_handler()
					}

					p.SetState(833)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}
				p.SetState(835)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == argusParserT__61 {
					{
						p.SetState(834)
						p.Others_handler()
					}

				}
				{
					p.SetState(837)
					p.Match(argusParserT__2)
				}

			}

		}
		p.SetState(842)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 106, p.GetParserRuleContext())
	}

	return localctx
}

// IEnter_stmtContext is an interface to support dynamic dispatch.
type IEnter_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnter_stmtContext differentiates from other interfaces.
	IsEnter_stmtContext()
}

type Enter_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnter_stmtContext() *Enter_stmtContext {
	var p = new(Enter_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = argusParserRULE_enter_stmt
	return p
}

func (*Enter_stmtContext) IsEnter_stmtContext() {}

func NewEnter_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Enter_stmtContext {
	var p = new(Enter_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = argusParserRULE_enter_stmt

	return p
}

func (s *Enter_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Enter_stmtContext) Body() IBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBodyContext)
}

func (s *Enter_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Enter_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Enter_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.EnterEnter_stmt(s)
	}
}

func (s *Enter_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.ExitEnter_stmt(s)
	}
}

func (p *argusParser) Enter_stmt() (localctx IEnter_stmtContext) {
	this := p
	_ = this

	localctx = NewEnter_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, argusParserRULE_enter_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(853)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 107, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(843)
			p.Match(argusParserT__50)
		}
		{
			p.SetState(844)
			p.Match(argusParserT__51)
		}
		{
			p.SetState(845)
			p.Body()
		}
		{
			p.SetState(846)
			p.Match(argusParserT__2)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(848)
			p.Match(argusParserT__50)
		}
		{
			p.SetState(849)
			p.Match(argusParserT__52)
		}
		{
			p.SetState(850)
			p.Body()
		}
		{
			p.SetState(851)
			p.Match(argusParserT__2)
		}

	}

	return localctx
}

// ICoarmContext is an interface to support dynamic dispatch.
type ICoarmContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCoarmContext differentiates from other interfaces.
	IsCoarmContext()
}

type CoarmContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCoarmContext() *CoarmContext {
	var p = new(CoarmContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = argusParserRULE_coarm
	return p
}

func (*CoarmContext) IsCoarmContext() {}

func NewCoarmContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CoarmContext {
	var p = new(CoarmContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = argusParserRULE_coarm

	return p
}

func (s *CoarmContext) GetParser() antlr.Parser { return s.parser }

func (s *CoarmContext) Armtag() IArmtagContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArmtagContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArmtagContext)
}

func (s *CoarmContext) Body() IBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBodyContext)
}

func (s *CoarmContext) AllDecl() []IDeclContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDeclContext)(nil)).Elem())
	var tst = make([]IDeclContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDeclContext)
		}
	}

	return tst
}

func (s *CoarmContext) Decl(i int) IDeclContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDeclContext)
}

func (s *CoarmContext) AllCall() []ICallContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICallContext)(nil)).Elem())
	var tst = make([]ICallContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICallContext)
		}
	}

	return tst
}

func (s *CoarmContext) Call(i int) ICallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICallContext)
}

func (s *CoarmContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CoarmContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CoarmContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.EnterCoarm(s)
	}
}

func (s *CoarmContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.ExitCoarm(s)
	}
}

func (p *argusParser) Coarm() (localctx ICoarmContext) {
	this := p
	_ = this

	localctx = NewCoarmContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, argusParserRULE_coarm)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(855)
		p.Armtag()
	}
	p.SetState(870)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == argusParserT__53 {
		{
			p.SetState(856)
			p.Match(argusParserT__53)
		}
		{
			p.SetState(857)
			p.Decl()
		}
		p.SetState(862)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == argusParserT__5 {
			{
				p.SetState(858)
				p.Match(argusParserT__5)
			}
			{
				p.SetState(859)
				p.Decl()
			}

			p.SetState(864)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(865)
			p.Match(argusParserT__25)
		}
		{
			p.SetState(866)
			p.Call()
		}

		p.SetState(872)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(873)
		p.Body()
	}

	return localctx
}

// IArmtagContext is an interface to support dynamic dispatch.
type IArmtagContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArmtagContext differentiates from other interfaces.
	IsArmtagContext()
}

type ArmtagContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArmtagContext() *ArmtagContext {
	var p = new(ArmtagContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = argusParserRULE_armtag
	return p
}

func (*ArmtagContext) IsArmtagContext() {}

func NewArmtagContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArmtagContext {
	var p = new(ArmtagContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = argusParserRULE_armtag

	return p
}

func (s *ArmtagContext) GetParser() antlr.Parser { return s.parser }
func (s *ArmtagContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArmtagContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArmtagContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.EnterArmtag(s)
	}
}

func (s *ArmtagContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.ExitArmtag(s)
	}
}

func (p *argusParser) Armtag() (localctx IArmtagContext) {
	this := p
	_ = this

	localctx = NewArmtagContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, argusParserRULE_armtag)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(875)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-52)&-(0x1f+1)) == 0 && ((1<<uint((_la-52)))&((1<<(argusParserT__51-52))|(1<<(argusParserT__52-52))|(1<<(argusParserT__54-52)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IFor_stmtContext is an interface to support dynamic dispatch.
type IFor_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFor_stmtContext differentiates from other interfaces.
	IsFor_stmtContext()
}

type For_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFor_stmtContext() *For_stmtContext {
	var p = new(For_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = argusParserRULE_for_stmt
	return p
}

func (*For_stmtContext) IsFor_stmtContext() {}

func NewFor_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *For_stmtContext {
	var p = new(For_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = argusParserRULE_for_stmt

	return p
}

func (s *For_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *For_stmtContext) AllDecl() []IDeclContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDeclContext)(nil)).Elem())
	var tst = make([]IDeclContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDeclContext)
		}
	}

	return tst
}

func (s *For_stmtContext) Decl(i int) IDeclContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDeclContext)
}

func (s *For_stmtContext) Call() ICallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallContext)
}

func (s *For_stmtContext) Body() IBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBodyContext)
}

func (s *For_stmtContext) AllIdn() []IIdnContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdnContext)(nil)).Elem())
	var tst = make([]IIdnContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdnContext)
		}
	}

	return tst
}

func (s *For_stmtContext) Idn(i int) IIdnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdnContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdnContext)
}

func (s *For_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *For_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *For_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.EnterFor_stmt(s)
	}
}

func (s *For_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.ExitFor_stmt(s)
	}
}

func (p *argusParser) For_stmt() (localctx IFor_stmtContext) {
	this := p
	_ = this

	localctx = NewFor_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, argusParserRULE_for_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(907)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 112, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(877)
			p.Match(argusParserT__55)
		}
		{
			p.SetState(878)
			p.Decl()
		}
		p.SetState(883)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == argusParserT__5 {
			{
				p.SetState(879)
				p.Match(argusParserT__5)
			}
			{
				p.SetState(880)
				p.Decl()
			}

			p.SetState(885)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(886)
			p.Match(argusParserT__25)
		}
		{
			p.SetState(887)
			p.Call()
		}
		{
			p.SetState(888)
			p.Match(argusParserT__34)
		}
		{
			p.SetState(889)
			p.Body()
		}
		{
			p.SetState(890)
			p.Match(argusParserT__2)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(892)
			p.Match(argusParserT__55)
		}
		{
			p.SetState(893)
			p.Idn()
		}
		p.SetState(898)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == argusParserT__5 {
			{
				p.SetState(894)
				p.Match(argusParserT__5)
			}
			{
				p.SetState(895)
				p.Idn()
			}

			p.SetState(900)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(901)
			p.Match(argusParserT__25)
		}
		{
			p.SetState(902)
			p.Call()
		}
		{
			p.SetState(903)
			p.Match(argusParserT__34)
		}
		{
			p.SetState(904)
			p.Body()
		}
		{
			p.SetState(905)
			p.Match(argusParserT__2)
		}

	}

	return localctx
}

// IIf_stmtContext is an interface to support dynamic dispatch.
type IIf_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIf_stmtContext differentiates from other interfaces.
	IsIf_stmtContext()
}

type If_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIf_stmtContext() *If_stmtContext {
	var p = new(If_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = argusParserRULE_if_stmt
	return p
}

func (*If_stmtContext) IsIf_stmtContext() {}

func NewIf_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *If_stmtContext {
	var p = new(If_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = argusParserRULE_if_stmt

	return p
}

func (s *If_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *If_stmtContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *If_stmtContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *If_stmtContext) AllBody() []IBodyContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBodyContext)(nil)).Elem())
	var tst = make([]IBodyContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBodyContext)
		}
	}

	return tst
}

func (s *If_stmtContext) Body(i int) IBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBodyContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBodyContext)
}

func (s *If_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *If_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *If_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.EnterIf_stmt(s)
	}
}

func (s *If_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.ExitIf_stmt(s)
	}
}

func (p *argusParser) If_stmt() (localctx IIf_stmtContext) {
	this := p
	_ = this

	localctx = NewIf_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, argusParserRULE_if_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(909)
		p.Match(argusParserT__56)
	}
	{
		p.SetState(910)
		p.expression(0)
	}
	{
		p.SetState(911)
		p.Match(argusParserT__57)
	}
	{
		p.SetState(912)
		p.Body()
	}
	p.SetState(920)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == argusParserT__58 {
		{
			p.SetState(913)
			p.Match(argusParserT__58)
		}
		{
			p.SetState(914)
			p.expression(0)
		}
		{
			p.SetState(915)
			p.Match(argusParserT__57)
		}
		{
			p.SetState(916)
			p.Body()
		}

		p.SetState(922)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(925)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == argusParserT__59 {
		{
			p.SetState(923)
			p.Match(argusParserT__59)
		}
		{
			p.SetState(924)
			p.Body()
		}

	}
	{
		p.SetState(927)
		p.Match(argusParserT__2)
	}

	return localctx
}

// ITagcase_stmtContext is an interface to support dynamic dispatch.
type ITagcase_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTagcase_stmtContext differentiates from other interfaces.
	IsTagcase_stmtContext()
}

type Tagcase_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTagcase_stmtContext() *Tagcase_stmtContext {
	var p = new(Tagcase_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = argusParserRULE_tagcase_stmt
	return p
}

func (*Tagcase_stmtContext) IsTagcase_stmtContext() {}

func NewTagcase_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Tagcase_stmtContext {
	var p = new(Tagcase_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = argusParserRULE_tagcase_stmt

	return p
}

func (s *Tagcase_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Tagcase_stmtContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Tagcase_stmtContext) AllTag_arm() []ITag_armContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITag_armContext)(nil)).Elem())
	var tst = make([]ITag_armContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITag_armContext)
		}
	}

	return tst
}

func (s *Tagcase_stmtContext) Tag_arm(i int) ITag_armContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITag_armContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITag_armContext)
}

func (s *Tagcase_stmtContext) Body() IBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBodyContext)
}

func (s *Tagcase_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Tagcase_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Tagcase_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.EnterTagcase_stmt(s)
	}
}

func (s *Tagcase_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.ExitTagcase_stmt(s)
	}
}

func (p *argusParser) Tagcase_stmt() (localctx ITagcase_stmtContext) {
	this := p
	_ = this

	localctx = NewTagcase_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, argusParserRULE_tagcase_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(929)
		p.Match(argusParserT__60)
	}
	{
		p.SetState(930)
		p.expression(0)
	}
	{
		p.SetState(931)
		p.Tag_arm()
	}
	p.SetState(935)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == argusParserT__64 {
		{
			p.SetState(932)
			p.Tag_arm()
		}

		p.SetState(937)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(941)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == argusParserT__61 {
		{
			p.SetState(938)
			p.Match(argusParserT__61)
		}
		{
			p.SetState(939)
			p.Match(argusParserT__15)
		}
		{
			p.SetState(940)
			p.Body()
		}

	}
	{
		p.SetState(943)
		p.Match(argusParserT__2)
	}

	return localctx
}

// ITagtest_stmtContext is an interface to support dynamic dispatch.
type ITagtest_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTagtest_stmtContext differentiates from other interfaces.
	IsTagtest_stmtContext()
}

type Tagtest_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTagtest_stmtContext() *Tagtest_stmtContext {
	var p = new(Tagtest_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = argusParserRULE_tagtest_stmt
	return p
}

func (*Tagtest_stmtContext) IsTagtest_stmtContext() {}

func NewTagtest_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Tagtest_stmtContext {
	var p = new(Tagtest_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = argusParserRULE_tagtest_stmt

	return p
}

func (s *Tagtest_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Tagtest_stmtContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Tagtest_stmtContext) AllAtag_arm() []IAtag_armContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAtag_armContext)(nil)).Elem())
	var tst = make([]IAtag_armContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAtag_armContext)
		}
	}

	return tst
}

func (s *Tagtest_stmtContext) Atag_arm(i int) IAtag_armContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAtag_armContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAtag_armContext)
}

func (s *Tagtest_stmtContext) Body() IBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBodyContext)
}

func (s *Tagtest_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Tagtest_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Tagtest_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.EnterTagtest_stmt(s)
	}
}

func (s *Tagtest_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.ExitTagtest_stmt(s)
	}
}

func (p *argusParser) Tagtest_stmt() (localctx ITagtest_stmtContext) {
	this := p
	_ = this

	localctx = NewTagtest_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, argusParserRULE_tagtest_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(945)
		p.Match(argusParserT__62)
	}
	{
		p.SetState(946)
		p.expression(0)
	}
	{
		p.SetState(947)
		p.Atag_arm()
	}
	p.SetState(951)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == argusParserT__64 || _la == argusParserT__65 {
		{
			p.SetState(948)
			p.Atag_arm()
		}

		p.SetState(953)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(957)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == argusParserT__61 {
		{
			p.SetState(954)
			p.Match(argusParserT__61)
		}
		{
			p.SetState(955)
			p.Match(argusParserT__15)
		}
		{
			p.SetState(956)
			p.Body()
		}

	}
	{
		p.SetState(959)
		p.Match(argusParserT__2)
	}

	return localctx
}

// ITagwait_stmtContext is an interface to support dynamic dispatch.
type ITagwait_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTagwait_stmtContext differentiates from other interfaces.
	IsTagwait_stmtContext()
}

type Tagwait_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTagwait_stmtContext() *Tagwait_stmtContext {
	var p = new(Tagwait_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = argusParserRULE_tagwait_stmt
	return p
}

func (*Tagwait_stmtContext) IsTagwait_stmtContext() {}

func NewTagwait_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Tagwait_stmtContext {
	var p = new(Tagwait_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = argusParserRULE_tagwait_stmt

	return p
}

func (s *Tagwait_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Tagwait_stmtContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Tagwait_stmtContext) AllAtag_arm() []IAtag_armContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAtag_armContext)(nil)).Elem())
	var tst = make([]IAtag_armContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAtag_armContext)
		}
	}

	return tst
}

func (s *Tagwait_stmtContext) Atag_arm(i int) IAtag_armContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAtag_armContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAtag_armContext)
}

func (s *Tagwait_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Tagwait_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Tagwait_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.EnterTagwait_stmt(s)
	}
}

func (s *Tagwait_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.ExitTagwait_stmt(s)
	}
}

func (p *argusParser) Tagwait_stmt() (localctx ITagwait_stmtContext) {
	this := p
	_ = this

	localctx = NewTagwait_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, argusParserRULE_tagwait_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(961)
		p.Match(argusParserT__63)
	}
	{
		p.SetState(962)
		p.expression(0)
	}
	{
		p.SetState(963)
		p.Atag_arm()
	}
	p.SetState(967)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == argusParserT__64 || _la == argusParserT__65 {
		{
			p.SetState(964)
			p.Atag_arm()
		}

		p.SetState(969)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(970)
		p.Match(argusParserT__2)
	}

	return localctx
}

// ITag_armContext is an interface to support dynamic dispatch.
type ITag_armContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTag_armContext differentiates from other interfaces.
	IsTag_armContext()
}

type Tag_armContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTag_armContext() *Tag_armContext {
	var p = new(Tag_armContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = argusParserRULE_tag_arm
	return p
}

func (*Tag_armContext) IsTag_armContext() {}

func NewTag_armContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Tag_armContext {
	var p = new(Tag_armContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = argusParserRULE_tag_arm

	return p
}

func (s *Tag_armContext) GetParser() antlr.Parser { return s.parser }

func (s *Tag_armContext) AllName() []INameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*INameContext)(nil)).Elem())
	var tst = make([]INameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(INameContext)
		}
	}

	return tst
}

func (s *Tag_armContext) Name(i int) INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *Tag_armContext) Body() IBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBodyContext)
}

func (s *Tag_armContext) Idn() IIdnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdnContext)
}

func (s *Tag_armContext) Type_spec() IType_specContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_specContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_specContext)
}

func (s *Tag_armContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Tag_armContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Tag_armContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.EnterTag_arm(s)
	}
}

func (s *Tag_armContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.ExitTag_arm(s)
	}
}

func (p *argusParser) Tag_arm() (localctx ITag_armContext) {
	this := p
	_ = this

	localctx = NewTag_armContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, argusParserRULE_tag_arm)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(972)
		p.Match(argusParserT__64)
	}
	{
		p.SetState(973)
		p.Name()
	}
	p.SetState(978)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == argusParserT__5 {
		{
			p.SetState(974)
			p.Match(argusParserT__5)
		}
		{
			p.SetState(975)
			p.Name()
		}

		p.SetState(980)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(985)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == argusParserIDENTIFIER {
		{
			p.SetState(981)
			p.Idn()
		}
		{
			p.SetState(982)
			p.Match(argusParserT__15)
		}
		{
			p.SetState(983)
			p.Type_spec()
		}

	}
	{
		p.SetState(987)
		p.Match(argusParserT__15)
	}
	{
		p.SetState(988)
		p.Body()
	}

	return localctx
}

// IAtag_armContext is an interface to support dynamic dispatch.
type IAtag_armContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAtag_armContext differentiates from other interfaces.
	IsAtag_armContext()
}

type Atag_armContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAtag_armContext() *Atag_armContext {
	var p = new(Atag_armContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = argusParserRULE_atag_arm
	return p
}

func (*Atag_armContext) IsAtag_armContext() {}

func NewAtag_armContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Atag_armContext {
	var p = new(Atag_armContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = argusParserRULE_atag_arm

	return p
}

func (s *Atag_armContext) GetParser() antlr.Parser { return s.parser }

func (s *Atag_armContext) Tag_kind() ITag_kindContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITag_kindContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITag_kindContext)
}

func (s *Atag_armContext) AllName() []INameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*INameContext)(nil)).Elem())
	var tst = make([]INameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(INameContext)
		}
	}

	return tst
}

func (s *Atag_armContext) Name(i int) INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *Atag_armContext) Body() IBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBodyContext)
}

func (s *Atag_armContext) AllIdn() []IIdnContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdnContext)(nil)).Elem())
	var tst = make([]IIdnContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdnContext)
		}
	}

	return tst
}

func (s *Atag_armContext) Idn(i int) IIdnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdnContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdnContext)
}

func (s *Atag_armContext) AllType_spec() []IType_specContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IType_specContext)(nil)).Elem())
	var tst = make([]IType_specContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IType_specContext)
		}
	}

	return tst
}

func (s *Atag_armContext) Type_spec(i int) IType_specContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_specContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IType_specContext)
}

func (s *Atag_armContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Atag_armContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Atag_armContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.EnterAtag_arm(s)
	}
}

func (s *Atag_armContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.ExitAtag_arm(s)
	}
}

func (p *argusParser) Atag_arm() (localctx IAtag_armContext) {
	this := p
	_ = this

	localctx = NewAtag_armContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, argusParserRULE_atag_arm)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(990)
		p.Tag_kind()
	}
	{
		p.SetState(991)
		p.Name()
	}
	p.SetState(996)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == argusParserT__5 {
		{
			p.SetState(992)
			p.Match(argusParserT__5)
		}
		{
			p.SetState(993)
			p.Name()
		}

		p.SetState(998)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(1005)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == argusParserIDENTIFIER {
		{
			p.SetState(999)
			p.Idn()
		}
		{
			p.SetState(1000)
			p.Match(argusParserT__15)
		}
		{
			p.SetState(1001)
			p.Type_spec()
		}

		p.SetState(1007)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1008)
		p.Match(argusParserT__15)
	}
	{
		p.SetState(1009)
		p.Body()
	}

	return localctx
}

// ITag_kindContext is an interface to support dynamic dispatch.
type ITag_kindContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTag_kindContext differentiates from other interfaces.
	IsTag_kindContext()
}

type Tag_kindContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTag_kindContext() *Tag_kindContext {
	var p = new(Tag_kindContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = argusParserRULE_tag_kind
	return p
}

func (*Tag_kindContext) IsTag_kindContext() {}

func NewTag_kindContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Tag_kindContext {
	var p = new(Tag_kindContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = argusParserRULE_tag_kind

	return p
}

func (s *Tag_kindContext) GetParser() antlr.Parser { return s.parser }
func (s *Tag_kindContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Tag_kindContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Tag_kindContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.EnterTag_kind(s)
	}
}

func (s *Tag_kindContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.ExitTag_kind(s)
	}
}

func (p *argusParser) Tag_kind() (localctx ITag_kindContext) {
	this := p
	_ = this

	localctx = NewTag_kindContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, argusParserRULE_tag_kind)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1011)
		_la = p.GetTokenStream().LA(1)

		if !(_la == argusParserT__64 || _la == argusParserT__65) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IWhen_handlerContext is an interface to support dynamic dispatch.
type IWhen_handlerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWhen_handlerContext differentiates from other interfaces.
	IsWhen_handlerContext()
}

type When_handlerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWhen_handlerContext() *When_handlerContext {
	var p = new(When_handlerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = argusParserRULE_when_handler
	return p
}

func (*When_handlerContext) IsWhen_handlerContext() {}

func NewWhen_handlerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *When_handlerContext {
	var p = new(When_handlerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = argusParserRULE_when_handler

	return p
}

func (s *When_handlerContext) GetParser() antlr.Parser { return s.parser }

func (s *When_handlerContext) AllName() []INameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*INameContext)(nil)).Elem())
	var tst = make([]INameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(INameContext)
		}
	}

	return tst
}

func (s *When_handlerContext) Name(i int) INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *When_handlerContext) Body() IBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBodyContext)
}

func (s *When_handlerContext) AllDecl() []IDeclContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDeclContext)(nil)).Elem())
	var tst = make([]IDeclContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDeclContext)
		}
	}

	return tst
}

func (s *When_handlerContext) Decl(i int) IDeclContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDeclContext)
}

func (s *When_handlerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *When_handlerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *When_handlerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.EnterWhen_handler(s)
	}
}

func (s *When_handlerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.ExitWhen_handler(s)
	}
}

func (p *argusParser) When_handler() (localctx IWhen_handlerContext) {
	this := p
	_ = this

	localctx = NewWhen_handlerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, argusParserRULE_when_handler)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1053)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 128, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1013)
			p.Match(argusParserT__66)
		}
		{
			p.SetState(1014)
			p.Name()
		}
		p.SetState(1019)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == argusParserT__5 {
			{
				p.SetState(1015)
				p.Match(argusParserT__5)
			}
			{
				p.SetState(1016)
				p.Name()
			}

			p.SetState(1021)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(1032)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == argusParserIDENTIFIER {
			{
				p.SetState(1022)
				p.Decl()
			}
			p.SetState(1027)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == argusParserT__5 {
				{
					p.SetState(1023)
					p.Match(argusParserT__5)
				}
				{
					p.SetState(1024)
					p.Decl()
				}

				p.SetState(1029)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

			p.SetState(1034)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1035)
			p.Match(argusParserT__15)
		}
		{
			p.SetState(1036)
			p.Body()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1038)
			p.Match(argusParserT__66)
		}
		{
			p.SetState(1039)
			p.Name()
		}
		p.SetState(1044)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == argusParserT__5 {
			{
				p.SetState(1040)
				p.Match(argusParserT__5)
			}
			{
				p.SetState(1041)
				p.Name()
			}

			p.SetState(1046)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1047)
			p.Match(argusParserT__17)
		}
		{
			p.SetState(1048)
			p.Match(argusParserT__67)
		}
		{
			p.SetState(1049)
			p.Match(argusParserT__18)
		}
		{
			p.SetState(1050)
			p.Match(argusParserT__15)
		}
		{
			p.SetState(1051)
			p.Body()
		}

	}

	return localctx
}

// IOthers_handlerContext is an interface to support dynamic dispatch.
type IOthers_handlerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOthers_handlerContext differentiates from other interfaces.
	IsOthers_handlerContext()
}

type Others_handlerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOthers_handlerContext() *Others_handlerContext {
	var p = new(Others_handlerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = argusParserRULE_others_handler
	return p
}

func (*Others_handlerContext) IsOthers_handlerContext() {}

func NewOthers_handlerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Others_handlerContext {
	var p = new(Others_handlerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = argusParserRULE_others_handler

	return p
}

func (s *Others_handlerContext) GetParser() antlr.Parser { return s.parser }

func (s *Others_handlerContext) Body() IBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBodyContext)
}

func (s *Others_handlerContext) AllIdn() []IIdnContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdnContext)(nil)).Elem())
	var tst = make([]IIdnContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdnContext)
		}
	}

	return tst
}

func (s *Others_handlerContext) Idn(i int) IIdnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdnContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdnContext)
}

func (s *Others_handlerContext) AllType_spec() []IType_specContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IType_specContext)(nil)).Elem())
	var tst = make([]IType_specContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IType_specContext)
		}
	}

	return tst
}

func (s *Others_handlerContext) Type_spec(i int) IType_specContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_specContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IType_specContext)
}

func (s *Others_handlerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Others_handlerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Others_handlerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.EnterOthers_handler(s)
	}
}

func (s *Others_handlerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.ExitOthers_handler(s)
	}
}

func (p *argusParser) Others_handler() (localctx IOthers_handlerContext) {
	this := p
	_ = this

	localctx = NewOthers_handlerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, argusParserRULE_others_handler)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1055)
		p.Match(argusParserT__61)
	}
	p.SetState(1062)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == argusParserIDENTIFIER {
		{
			p.SetState(1056)
			p.Idn()
		}
		{
			p.SetState(1057)
			p.Match(argusParserT__15)
		}
		{
			p.SetState(1058)
			p.Type_spec()
		}

		p.SetState(1064)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1065)
		p.Match(argusParserT__15)
	}
	{
		p.SetState(1066)
		p.Body()
	}

	return localctx
}

// IBodyContext is an interface to support dynamic dispatch.
type IBodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBodyContext differentiates from other interfaces.
	IsBodyContext()
}

type BodyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBodyContext() *BodyContext {
	var p = new(BodyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = argusParserRULE_body
	return p
}

func (*BodyContext) IsBodyContext() {}

func NewBodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BodyContext {
	var p = new(BodyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = argusParserRULE_body

	return p
}

func (s *BodyContext) GetParser() antlr.Parser { return s.parser }

func (s *BodyContext) AllEquate() []IEquateContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEquateContext)(nil)).Elem())
	var tst = make([]IEquateContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEquateContext)
		}
	}

	return tst
}

func (s *BodyContext) Equate(i int) IEquateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEquateContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEquateContext)
}

func (s *BodyContext) AllStatement() []IStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatementContext)(nil)).Elem())
	var tst = make([]IStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatementContext)
		}
	}

	return tst
}

func (s *BodyContext) Statement(i int) IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *BodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BodyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.EnterBody(s)
	}
}

func (s *BodyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.ExitBody(s)
	}
}

func (p *argusParser) Body() (localctx IBodyContext) {
	this := p
	_ = this

	localctx = NewBodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, argusParserRULE_body)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1071)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 130, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1068)
				p.Equate()
			}

		}
		p.SetState(1073)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 130, p.GetParserRuleContext())
	}
	p.SetState(1077)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == argusParserT__10 || (((_la-33)&-(0x1f+1)) == 0 && ((1<<uint((_la-33)))&((1<<(argusParserT__32-33))|(1<<(argusParserT__33-33))|(1<<(argusParserT__35-33))|(1<<(argusParserT__36-33))|(1<<(argusParserT__37-33))|(1<<(argusParserT__38-33))|(1<<(argusParserT__39-33))|(1<<(argusParserT__40-33))|(1<<(argusParserT__41-33))|(1<<(argusParserT__42-33))|(1<<(argusParserT__43-33))|(1<<(argusParserT__44-33))|(1<<(argusParserT__45-33))|(1<<(argusParserT__46-33))|(1<<(argusParserT__47-33))|(1<<(argusParserT__50-33))|(1<<(argusParserT__55-33))|(1<<(argusParserT__56-33))|(1<<(argusParserT__60-33))|(1<<(argusParserT__62-33))|(1<<(argusParserT__63-33)))) != 0) || (((_la-69)&-(0x1f+1)) == 0 && ((1<<uint((_la-69)))&((1<<(argusParserT__68-69))|(1<<(argusParserT__69-69))|(1<<(argusParserT__70-69))|(1<<(argusParserT__71-69))|(1<<(argusParserT__72-69))|(1<<(argusParserT__73-69))|(1<<(argusParserT__74-69))|(1<<(argusParserT__75-69))|(1<<(argusParserT__76-69))|(1<<(argusParserT__77-69))|(1<<(argusParserT__78-69))|(1<<(argusParserT__81-69))|(1<<(argusParserT__82-69))|(1<<(argusParserT__83-69))|(1<<(argusParserT__84-69))|(1<<(argusParserT__85-69))|(1<<(argusParserT__86-69))|(1<<(argusParserT__87-69))|(1<<(argusParserT__88-69))|(1<<(argusParserT__89-69))|(1<<(argusParserT__90-69))|(1<<(argusParserT__91-69))|(1<<(argusParserT__92-69))|(1<<(argusParserT__93-69)))) != 0) || (((_la-116)&-(0x1f+1)) == 0 && ((1<<uint((_la-116)))&((1<<(argusParserT__115-116))|(1<<(argusParserT__116-116))|(1<<(argusParserT__117-116))|(1<<(argusParserT__118-116))|(1<<(argusParserT__119-116))|(1<<(argusParserT__120-116))|(1<<(argusParserT__121-116))|(1<<(argusParserINT_LITERAL-116))|(1<<(argusParserREAL_LITERAL-116))|(1<<(argusParserCHAR_LITERAL-116))|(1<<(argusParserSTRING_LITERAL-116))|(1<<(argusParserIDENTIFIER-116)))) != 0) {
		{
			p.SetState(1074)
			p.statement(0)
		}

		p.SetState(1079)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IType_specContext is an interface to support dynamic dispatch.
type IType_specContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsType_specContext differentiates from other interfaces.
	IsType_specContext()
}

type Type_specContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyType_specContext() *Type_specContext {
	var p = new(Type_specContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = argusParserRULE_type_spec
	return p
}

func (*Type_specContext) IsType_specContext() {}

func NewType_specContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Type_specContext {
	var p = new(Type_specContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = argusParserRULE_type_spec

	return p
}

func (s *Type_specContext) GetParser() antlr.Parser { return s.parser }

func (s *Type_specContext) Type_actual() IType_actualContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_actualContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_actualContext)
}

func (s *Type_specContext) AllField_spec() []IField_specContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IField_specContext)(nil)).Elem())
	var tst = make([]IField_specContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IField_specContext)
		}
	}

	return tst
}

func (s *Type_specContext) Field_spec(i int) IField_specContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IField_specContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IField_specContext)
}

func (s *Type_specContext) Returnz() IReturnzContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReturnzContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReturnzContext)
}

func (s *Type_specContext) Signals() ISignalsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISignalsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISignalsContext)
}

func (s *Type_specContext) AllType_spec() []IType_specContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IType_specContext)(nil)).Elem())
	var tst = make([]IType_specContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IType_specContext)
		}
	}

	return tst
}

func (s *Type_specContext) Type_spec(i int) IType_specContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_specContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IType_specContext)
}

func (s *Type_specContext) Yields() IYieldsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IYieldsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IYieldsContext)
}

func (s *Type_specContext) Reference() IReferenceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReferenceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReferenceContext)
}

func (s *Type_specContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Type_specContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Type_specContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.EnterType_spec(s)
	}
}

func (s *Type_specContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.ExitType_spec(s)
	}
}

func (p *argusParser) Type_spec() (localctx IType_specContext) {
	this := p
	_ = this

	localctx = NewType_specContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, argusParserRULE_type_spec)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(1252)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case argusParserT__68:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1080)
			p.Match(argusParserT__68)
		}

	case argusParserT__69:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1081)
			p.Match(argusParserT__69)
		}

	case argusParserT__70:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1082)
			p.Match(argusParserT__70)
		}

	case argusParserT__71:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1083)
			p.Match(argusParserT__71)
		}

	case argusParserT__72:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1084)
			p.Match(argusParserT__72)
		}

	case argusParserT__73:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1085)
			p.Match(argusParserT__73)
		}

	case argusParserT__74:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1086)
			p.Match(argusParserT__74)
		}

	case argusParserT__75:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1087)
			p.Match(argusParserT__75)
		}

	case argusParserT__76:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(1088)
			p.Match(argusParserT__76)
		}

	case argusParserT__10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(1089)
			p.Match(argusParserT__10)
		}

	case argusParserT__77:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(1090)
			p.Match(argusParserT__77)
		}

	case argusParserT__78:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(1091)
			p.Match(argusParserT__78)
		}
		{
			p.SetState(1092)
			p.Match(argusParserT__79)
		}
		{
			p.SetState(1093)
			p.Type_actual()
		}
		{
			p.SetState(1094)
			p.Match(argusParserT__80)
		}

	case argusParserT__81:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(1096)
			p.Match(argusParserT__81)
		}
		{
			p.SetState(1097)
			p.Match(argusParserT__79)
		}
		{
			p.SetState(1098)
			p.Type_actual()
		}
		{
			p.SetState(1099)
			p.Match(argusParserT__80)
		}

	case argusParserT__82:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(1101)
			p.Match(argusParserT__82)
		}
		{
			p.SetState(1102)
			p.Match(argusParserT__79)
		}
		{
			p.SetState(1103)
			p.Type_actual()
		}
		{
			p.SetState(1104)
			p.Match(argusParserT__80)
		}

	case argusParserT__83:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(1106)
			p.Match(argusParserT__83)
		}
		{
			p.SetState(1107)
			p.Match(argusParserT__79)
		}
		{
			p.SetState(1108)
			p.Field_spec()
		}
		p.SetState(1113)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == argusParserT__5 {
			{
				p.SetState(1109)
				p.Match(argusParserT__5)
			}
			{
				p.SetState(1110)
				p.Field_spec()
			}

			p.SetState(1115)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1116)
			p.Match(argusParserT__80)
		}

	case argusParserT__84:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(1118)
			p.Match(argusParserT__84)
		}
		{
			p.SetState(1119)
			p.Match(argusParserT__79)
		}
		{
			p.SetState(1120)
			p.Field_spec()
		}
		p.SetState(1125)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == argusParserT__5 {
			{
				p.SetState(1121)
				p.Match(argusParserT__5)
			}
			{
				p.SetState(1122)
				p.Field_spec()
			}

			p.SetState(1127)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1128)
			p.Match(argusParserT__80)
		}

	case argusParserT__85:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(1130)
			p.Match(argusParserT__85)
		}
		{
			p.SetState(1131)
			p.Match(argusParserT__79)
		}
		{
			p.SetState(1132)
			p.Field_spec()
		}
		p.SetState(1137)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == argusParserT__5 {
			{
				p.SetState(1133)
				p.Match(argusParserT__5)
			}
			{
				p.SetState(1134)
				p.Field_spec()
			}

			p.SetState(1139)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1140)
			p.Match(argusParserT__80)
		}

	case argusParserT__86:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(1142)
			p.Match(argusParserT__86)
		}
		{
			p.SetState(1143)
			p.Match(argusParserT__79)
		}
		{
			p.SetState(1144)
			p.Field_spec()
		}
		p.SetState(1149)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == argusParserT__5 {
			{
				p.SetState(1145)
				p.Match(argusParserT__5)
			}
			{
				p.SetState(1146)
				p.Field_spec()
			}

			p.SetState(1151)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1152)
			p.Match(argusParserT__80)
		}

	case argusParserT__87:
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(1154)
			p.Match(argusParserT__87)
		}
		{
			p.SetState(1155)
			p.Match(argusParserT__79)
		}
		{
			p.SetState(1156)
			p.Field_spec()
		}
		p.SetState(1161)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == argusParserT__5 {
			{
				p.SetState(1157)
				p.Match(argusParserT__5)
			}
			{
				p.SetState(1158)
				p.Field_spec()
			}

			p.SetState(1163)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1164)
			p.Match(argusParserT__80)
		}

	case argusParserT__88:
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(1166)
			p.Match(argusParserT__88)
		}
		{
			p.SetState(1167)
			p.Match(argusParserT__79)
		}
		{
			p.SetState(1168)
			p.Field_spec()
		}
		p.SetState(1173)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == argusParserT__5 {
			{
				p.SetState(1169)
				p.Match(argusParserT__5)
			}
			{
				p.SetState(1170)
				p.Field_spec()
			}

			p.SetState(1175)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1176)
			p.Match(argusParserT__80)
		}

	case argusParserT__89:
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(1178)
			p.Match(argusParserT__89)
		}

		p.SetState(1187)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 139, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1179)
				p.Type_spec()
			}
			p.SetState(1184)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 138, p.GetParserRuleContext())

			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(1180)
						p.Match(argusParserT__5)
					}
					{
						p.SetState(1181)
						p.Type_spec()
					}

				}
				p.SetState(1186)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 138, p.GetParserRuleContext())
			}

		}

		p.SetState(1190)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 140, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1189)
				p.Returnz()
			}

		}
		p.SetState(1193)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 141, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1192)
				p.Signals()
			}

		}

	case argusParserT__90:
		p.EnterOuterAlt(localctx, 22)
		{
			p.SetState(1195)
			p.Match(argusParserT__90)
		}

		p.SetState(1204)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 143, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1196)
				p.Type_spec()
			}
			p.SetState(1201)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 142, p.GetParserRuleContext())

			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(1197)
						p.Match(argusParserT__5)
					}
					{
						p.SetState(1198)
						p.Type_spec()
					}

				}
				p.SetState(1203)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 142, p.GetParserRuleContext())
			}

		}

		p.SetState(1207)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 144, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1206)
				p.Yields()
			}

		}
		p.SetState(1210)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 145, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1209)
				p.Signals()
			}

		}

	case argusParserT__91:
		p.EnterOuterAlt(localctx, 23)
		{
			p.SetState(1212)
			p.Match(argusParserT__91)
		}

		p.SetState(1221)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 147, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1213)
				p.Type_spec()
			}
			p.SetState(1218)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 146, p.GetParserRuleContext())

			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(1214)
						p.Match(argusParserT__5)
					}
					{
						p.SetState(1215)
						p.Type_spec()
					}

				}
				p.SetState(1220)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 146, p.GetParserRuleContext())
			}

		}

		p.SetState(1224)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 148, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1223)
				p.Returnz()
			}

		}
		p.SetState(1227)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 149, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1226)
				p.Signals()
			}

		}

	case argusParserT__92:
		p.EnterOuterAlt(localctx, 24)
		{
			p.SetState(1229)
			p.Match(argusParserT__92)
		}

		p.SetState(1238)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 151, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1230)
				p.Type_spec()
			}
			p.SetState(1235)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 150, p.GetParserRuleContext())

			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(1231)
						p.Match(argusParserT__5)
					}
					{
						p.SetState(1232)
						p.Type_spec()
					}

				}
				p.SetState(1237)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 150, p.GetParserRuleContext())
			}

		}

		p.SetState(1241)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 152, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1240)
				p.Returnz()
			}

		}
		p.SetState(1244)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 153, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1243)
				p.Signals()
			}

		}

	case argusParserT__93:
		p.EnterOuterAlt(localctx, 25)
		{
			p.SetState(1246)
			p.Match(argusParserT__93)
		}
		{
			p.SetState(1247)
			p.Match(argusParserT__79)
		}
		{
			p.SetState(1248)
			p.Type_actual()
		}
		{
			p.SetState(1249)
			p.Match(argusParserT__80)
		}

	case argusParserIDENTIFIER:
		p.EnterOuterAlt(localctx, 26)
		{
			p.SetState(1251)
			p.reference(0)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IField_specContext is an interface to support dynamic dispatch.
type IField_specContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsField_specContext differentiates from other interfaces.
	IsField_specContext()
}

type Field_specContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyField_specContext() *Field_specContext {
	var p = new(Field_specContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = argusParserRULE_field_spec
	return p
}

func (*Field_specContext) IsField_specContext() {}

func NewField_specContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Field_specContext {
	var p = new(Field_specContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = argusParserRULE_field_spec

	return p
}

func (s *Field_specContext) GetParser() antlr.Parser { return s.parser }

func (s *Field_specContext) AllName() []INameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*INameContext)(nil)).Elem())
	var tst = make([]INameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(INameContext)
		}
	}

	return tst
}

func (s *Field_specContext) Name(i int) INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *Field_specContext) Type_actual() IType_actualContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_actualContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_actualContext)
}

func (s *Field_specContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Field_specContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Field_specContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.EnterField_spec(s)
	}
}

func (s *Field_specContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.ExitField_spec(s)
	}
}

func (p *argusParser) Field_spec() (localctx IField_specContext) {
	this := p
	_ = this

	localctx = NewField_specContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, argusParserRULE_field_spec)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1254)
		p.Name()
	}
	p.SetState(1259)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == argusParserT__5 {
		{
			p.SetState(1255)
			p.Match(argusParserT__5)
		}
		{
			p.SetState(1256)
			p.Name()
		}

		p.SetState(1261)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1262)
		p.Match(argusParserT__15)
	}
	{
		p.SetState(1263)
		p.Type_actual()
	}

	return localctx
}

// IReferenceContext is an interface to support dynamic dispatch.
type IReferenceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReferenceContext differentiates from other interfaces.
	IsReferenceContext()
}

type ReferenceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReferenceContext() *ReferenceContext {
	var p = new(ReferenceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = argusParserRULE_reference
	return p
}

func (*ReferenceContext) IsReferenceContext() {}

func NewReferenceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReferenceContext {
	var p = new(ReferenceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = argusParserRULE_reference

	return p
}

func (s *ReferenceContext) GetParser() antlr.Parser { return s.parser }

func (s *ReferenceContext) Idn() IIdnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdnContext)
}

func (s *ReferenceContext) AllActual_parm() []IActual_parmContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IActual_parmContext)(nil)).Elem())
	var tst = make([]IActual_parmContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IActual_parmContext)
		}
	}

	return tst
}

func (s *ReferenceContext) Actual_parm(i int) IActual_parmContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IActual_parmContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IActual_parmContext)
}

func (s *ReferenceContext) Reference() IReferenceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReferenceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReferenceContext)
}

func (s *ReferenceContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *ReferenceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReferenceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReferenceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.EnterReference(s)
	}
}

func (s *ReferenceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.ExitReference(s)
	}
}

func (p *argusParser) Reference() (localctx IReferenceContext) {
	return p.reference(0)
}

func (p *argusParser) reference(_p int) (localctx IReferenceContext) {
	this := p
	_ = this

	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewReferenceContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IReferenceContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 90
	p.EnterRecursionRule(localctx, 90, argusParserRULE_reference, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1278)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 158, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1266)
			p.Idn()
		}

	case 2:
		{
			p.SetState(1267)
			p.Idn()
		}
		p.SetState(1276)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 157, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1268)
				p.Actual_parm()
			}
			p.SetState(1273)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 156, p.GetParserRuleContext())

			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(1269)
						p.Match(argusParserT__5)
					}
					{
						p.SetState(1270)
						p.Actual_parm()
					}

				}
				p.SetState(1275)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 156, p.GetParserRuleContext())
			}

		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1285)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 159, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewReferenceContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, argusParserRULE_reference)
			p.SetState(1280)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(1281)
				p.Match(argusParserT__26)
			}
			{
				p.SetState(1282)
				p.Name()
			}

		}
		p.SetState(1287)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 159, p.GetParserRuleContext())
	}

	return localctx
}

// IActual_parmContext is an interface to support dynamic dispatch.
type IActual_parmContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsActual_parmContext differentiates from other interfaces.
	IsActual_parmContext()
}

type Actual_parmContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyActual_parmContext() *Actual_parmContext {
	var p = new(Actual_parmContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = argusParserRULE_actual_parm
	return p
}

func (*Actual_parmContext) IsActual_parmContext() {}

func NewActual_parmContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Actual_parmContext {
	var p = new(Actual_parmContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = argusParserRULE_actual_parm

	return p
}

func (s *Actual_parmContext) GetParser() antlr.Parser { return s.parser }

func (s *Actual_parmContext) Constant() IConstantContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantContext)
}

func (s *Actual_parmContext) Type_actual() IType_actualContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_actualContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_actualContext)
}

func (s *Actual_parmContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Actual_parmContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Actual_parmContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.EnterActual_parm(s)
	}
}

func (s *Actual_parmContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.ExitActual_parm(s)
	}
}

func (p *argusParser) Actual_parm() (localctx IActual_parmContext) {
	this := p
	_ = this

	localctx = NewActual_parmContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, argusParserRULE_actual_parm)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1290)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 160, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1288)
			p.Constant()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1289)
			p.Type_actual()
		}

	}

	return localctx
}

// IType_actualContext is an interface to support dynamic dispatch.
type IType_actualContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsType_actualContext differentiates from other interfaces.
	IsType_actualContext()
}

type Type_actualContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyType_actualContext() *Type_actualContext {
	var p = new(Type_actualContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = argusParserRULE_type_actual
	return p
}

func (*Type_actualContext) IsType_actualContext() {}

func NewType_actualContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Type_actualContext {
	var p = new(Type_actualContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = argusParserRULE_type_actual

	return p
}

func (s *Type_actualContext) GetParser() antlr.Parser { return s.parser }

func (s *Type_actualContext) Type_spec() IType_specContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_specContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_specContext)
}

func (s *Type_actualContext) AllOpbinding() []IOpbindingContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOpbindingContext)(nil)).Elem())
	var tst = make([]IOpbindingContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOpbindingContext)
		}
	}

	return tst
}

func (s *Type_actualContext) Opbinding(i int) IOpbindingContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOpbindingContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOpbindingContext)
}

func (s *Type_actualContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Type_actualContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Type_actualContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.EnterType_actual(s)
	}
}

func (s *Type_actualContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.ExitType_actual(s)
	}
}

func (p *argusParser) Type_actual() (localctx IType_actualContext) {
	this := p
	_ = this

	localctx = NewType_actualContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, argusParserRULE_type_actual)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1292)
		p.Type_spec()
	}
	p.SetState(1304)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 163, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1293)
			p.Match(argusParserT__94)
		}
		p.SetState(1302)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 162, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1294)
				p.Opbinding()
			}
			p.SetState(1299)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 161, p.GetParserRuleContext())

			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(1295)
						p.Match(argusParserT__5)
					}
					{
						p.SetState(1296)
						p.Opbinding()
					}

				}
				p.SetState(1301)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 161, p.GetParserRuleContext())
			}

		}

	}

	return localctx
}

// IOpbindingContext is an interface to support dynamic dispatch.
type IOpbindingContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOpbindingContext differentiates from other interfaces.
	IsOpbindingContext()
}

type OpbindingContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpbindingContext() *OpbindingContext {
	var p = new(OpbindingContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = argusParserRULE_opbinding
	return p
}

func (*OpbindingContext) IsOpbindingContext() {}

func NewOpbindingContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OpbindingContext {
	var p = new(OpbindingContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = argusParserRULE_opbinding

	return p
}

func (s *OpbindingContext) GetParser() antlr.Parser { return s.parser }

func (s *OpbindingContext) AllName() []INameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*INameContext)(nil)).Elem())
	var tst = make([]INameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(INameContext)
		}
	}

	return tst
}

func (s *OpbindingContext) Name(i int) INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *OpbindingContext) Primaries() IPrimariesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimariesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimariesContext)
}

func (s *OpbindingContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OpbindingContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OpbindingContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.EnterOpbinding(s)
	}
}

func (s *OpbindingContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.ExitOpbinding(s)
	}
}

func (p *argusParser) Opbinding() (localctx IOpbindingContext) {
	this := p
	_ = this

	localctx = NewOpbindingContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, argusParserRULE_opbinding)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1306)
		p.Name()
	}
	p.SetState(1311)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == argusParserT__5 {
		{
			p.SetState(1307)
			p.Match(argusParserT__5)
		}
		{
			p.SetState(1308)
			p.Name()
		}

		p.SetState(1313)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1314)
		p.Match(argusParserT__15)
	}
	{
		p.SetState(1315)
		p.Primaries()
	}

	return localctx
}

// IExpressionContext is an interface to support dynamic dispatch.
type IExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionContext differentiates from other interfaces.
	IsExpressionContext()
}

type ExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionContext() *ExpressionContext {
	var p = new(ExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = argusParserRULE_expression
	return p
}

func (*ExpressionContext) IsExpressionContext() {}

func NewExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionContext {
	var p = new(ExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = argusParserRULE_expression

	return p
}

func (s *ExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionContext) Primaries() IPrimariesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimariesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimariesContext)
}

func (s *ExpressionContext) Call() ICallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallContext)
}

func (s *ExpressionContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *ExpressionContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.EnterExpression(s)
	}
}

func (s *ExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.ExitExpression(s)
	}
}

func (p *argusParser) Expression() (localctx IExpressionContext) {
	return p.expression(0)
}

func (p *argusParser) expression(_p int) (localctx IExpressionContext) {
	this := p
	_ = this

	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 98
	p.EnterRecursionRule(localctx, 98, argusParserRULE_expression, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1331)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 165, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1318)
			p.Primaries()
		}

	case 2:
		{
			p.SetState(1319)
			p.Call()
		}
		{
			p.SetState(1320)
			p.Match(argusParserT__30)
		}
		{
			p.SetState(1321)
			p.Primaries()
		}

	case 3:
		{
			p.SetState(1323)
			p.Match(argusParserT__17)
		}
		{
			p.SetState(1324)
			p.expression(0)
		}
		{
			p.SetState(1325)
			p.Match(argusParserT__18)
		}

	case 4:
		{
			p.SetState(1327)
			p.Match(argusParserT__95)
		}
		{
			p.SetState(1328)
			p.expression(23)
		}

	case 5:
		{
			p.SetState(1329)
			p.Match(argusParserT__96)
		}
		{
			p.SetState(1330)
			p.expression(22)
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1398)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 167, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(1396)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 166, p.GetParserRuleContext()) {
			case 1:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, argusParserRULE_expression)
				p.SetState(1333)

				if !(p.Precpred(p.GetParserRuleContext(), 21)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 21)", ""))
				}
				{
					p.SetState(1334)
					p.Match(argusParserT__97)
				}
				{
					p.SetState(1335)
					p.expression(22)
				}

			case 2:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, argusParserRULE_expression)
				p.SetState(1336)

				if !(p.Precpred(p.GetParserRuleContext(), 20)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 20)", ""))
				}
				{
					p.SetState(1337)
					p.Match(argusParserT__98)
				}
				{
					p.SetState(1338)
					p.expression(21)
				}

			case 3:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, argusParserRULE_expression)
				p.SetState(1339)

				if !(p.Precpred(p.GetParserRuleContext(), 19)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 19)", ""))
				}
				{
					p.SetState(1340)
					p.Match(argusParserT__99)
				}
				{
					p.SetState(1341)
					p.expression(20)
				}

			case 4:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, argusParserRULE_expression)
				p.SetState(1342)

				if !(p.Precpred(p.GetParserRuleContext(), 18)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 18)", ""))
				}
				{
					p.SetState(1343)
					p.Match(argusParserT__67)
				}
				{
					p.SetState(1344)
					p.expression(19)
				}

			case 5:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, argusParserRULE_expression)
				p.SetState(1345)

				if !(p.Precpred(p.GetParserRuleContext(), 17)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 17)", ""))
				}
				{
					p.SetState(1346)
					p.Match(argusParserT__100)
				}
				{
					p.SetState(1347)
					p.expression(18)
				}

			case 6:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, argusParserRULE_expression)
				p.SetState(1348)

				if !(p.Precpred(p.GetParserRuleContext(), 16)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 16)", ""))
				}
				{
					p.SetState(1349)
					p.Match(argusParserT__101)
				}
				{
					p.SetState(1350)
					p.expression(17)
				}

			case 7:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, argusParserRULE_expression)
				p.SetState(1351)

				if !(p.Precpred(p.GetParserRuleContext(), 15)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 15)", ""))
				}
				{
					p.SetState(1352)
					p.Match(argusParserT__96)
				}
				{
					p.SetState(1353)
					p.expression(16)
				}

			case 8:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, argusParserRULE_expression)
				p.SetState(1354)

				if !(p.Precpred(p.GetParserRuleContext(), 14)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 14)", ""))
				}
				{
					p.SetState(1355)
					p.Match(argusParserT__102)
				}
				{
					p.SetState(1356)
					p.expression(15)
				}

			case 9:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, argusParserRULE_expression)
				p.SetState(1357)

				if !(p.Precpred(p.GetParserRuleContext(), 13)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 13)", ""))
				}
				{
					p.SetState(1358)
					p.Match(argusParserT__103)
				}
				{
					p.SetState(1359)
					p.expression(14)
				}

			case 10:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, argusParserRULE_expression)
				p.SetState(1360)

				if !(p.Precpred(p.GetParserRuleContext(), 12)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 12)", ""))
				}
				{
					p.SetState(1361)
					p.Match(argusParserT__0)
				}
				{
					p.SetState(1362)
					p.expression(13)
				}

			case 11:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, argusParserRULE_expression)
				p.SetState(1363)

				if !(p.Precpred(p.GetParserRuleContext(), 11)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 11)", ""))
				}
				{
					p.SetState(1364)
					p.Match(argusParserT__104)
				}
				{
					p.SetState(1365)
					p.expression(12)
				}

			case 12:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, argusParserRULE_expression)
				p.SetState(1366)

				if !(p.Precpred(p.GetParserRuleContext(), 10)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 10)", ""))
				}
				{
					p.SetState(1367)
					p.Match(argusParserT__105)
				}
				{
					p.SetState(1368)
					p.expression(11)
				}

			case 13:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, argusParserRULE_expression)
				p.SetState(1369)

				if !(p.Precpred(p.GetParserRuleContext(), 9)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 9)", ""))
				}
				{
					p.SetState(1370)
					p.Match(argusParserT__106)
				}
				{
					p.SetState(1371)
					p.expression(10)
				}

			case 14:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, argusParserRULE_expression)
				p.SetState(1372)

				if !(p.Precpred(p.GetParserRuleContext(), 8)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 8)", ""))
				}
				{
					p.SetState(1373)
					p.Match(argusParserT__107)
				}
				{
					p.SetState(1374)
					p.expression(9)
				}

			case 15:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, argusParserRULE_expression)
				p.SetState(1375)

				if !(p.Precpred(p.GetParserRuleContext(), 7)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 7)", ""))
				}
				{
					p.SetState(1376)
					p.Match(argusParserT__108)
				}
				{
					p.SetState(1377)
					p.expression(8)
				}

			case 16:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, argusParserRULE_expression)
				p.SetState(1378)

				if !(p.Precpred(p.GetParserRuleContext(), 6)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 6)", ""))
				}
				{
					p.SetState(1379)
					p.Match(argusParserT__109)
				}
				{
					p.SetState(1380)
					p.expression(7)
				}

			case 17:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, argusParserRULE_expression)
				p.SetState(1381)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
				}
				{
					p.SetState(1382)
					p.Match(argusParserT__110)
				}
				{
					p.SetState(1383)
					p.expression(6)
				}

			case 18:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, argusParserRULE_expression)
				p.SetState(1384)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				{
					p.SetState(1385)
					p.Match(argusParserT__111)
				}
				{
					p.SetState(1386)
					p.expression(5)
				}

			case 19:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, argusParserRULE_expression)
				p.SetState(1387)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(1388)
					p.Match(argusParserT__112)
				}
				{
					p.SetState(1389)
					p.expression(4)
				}

			case 20:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, argusParserRULE_expression)
				p.SetState(1390)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(1391)
					p.Match(argusParserT__113)
				}
				{
					p.SetState(1392)
					p.expression(3)
				}

			case 21:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, argusParserRULE_expression)
				p.SetState(1393)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(1394)
					p.Match(argusParserT__114)
				}
				{
					p.SetState(1395)
					p.expression(2)
				}

			}

		}
		p.SetState(1400)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 167, p.GetParserRuleContext())
	}

	return localctx
}

// IPrimariesContext is an interface to support dynamic dispatch.
type IPrimariesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrimariesContext differentiates from other interfaces.
	IsPrimariesContext()
}

type PrimariesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrimariesContext() *PrimariesContext {
	var p = new(PrimariesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = argusParserRULE_primaries
	return p
}

func (*PrimariesContext) IsPrimariesContext() {}

func NewPrimariesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrimariesContext {
	var p = new(PrimariesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = argusParserRULE_primaries

	return p
}

func (s *PrimariesContext) GetParser() antlr.Parser { return s.parser }

func (s *PrimariesContext) Primary() IPrimaryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimaryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimaryContext)
}

func (s *PrimariesContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *PrimariesContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PrimariesContext) AllName() []INameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*INameContext)(nil)).Elem())
	var tst = make([]INameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(INameContext)
		}
	}

	return tst
}

func (s *PrimariesContext) Name(i int) INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *PrimariesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimariesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrimariesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.EnterPrimaries(s)
	}
}

func (s *PrimariesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.ExitPrimaries(s)
	}
}

func (p *argusParser) Primaries() (localctx IPrimariesContext) {
	this := p
	_ = this

	localctx = NewPrimariesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, argusParserRULE_primaries)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1401)
		p.Primary()
	}
	p.SetState(1414)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 170, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(1412)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case argusParserT__31:
				{
					p.SetState(1402)
					p.Match(argusParserT__31)
				}
				{
					p.SetState(1403)
					p.Name()
				}

			case argusParserT__10, argusParserT__17, argusParserT__68, argusParserT__69, argusParserT__70, argusParserT__71, argusParserT__72, argusParserT__73, argusParserT__74, argusParserT__75, argusParserT__76, argusParserT__77, argusParserT__78, argusParserT__81, argusParserT__82, argusParserT__83, argusParserT__84, argusParserT__85, argusParserT__86, argusParserT__87, argusParserT__88, argusParserT__89, argusParserT__90, argusParserT__91, argusParserT__92, argusParserT__93, argusParserT__95, argusParserT__96, argusParserT__115, argusParserT__116, argusParserT__117, argusParserT__118, argusParserT__119, argusParserT__120, argusParserT__121, argusParserINT_LITERAL, argusParserREAL_LITERAL, argusParserCHAR_LITERAL, argusParserSTRING_LITERAL, argusParserIDENTIFIER:
				{
					p.SetState(1404)
					p.expression(0)
				}
				p.SetState(1409)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 168, p.GetParserRuleContext())

				for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
					if _alt == 1 {
						{
							p.SetState(1405)
							p.Match(argusParserT__5)
						}
						{
							p.SetState(1406)
							p.expression(0)
						}

					}
					p.SetState(1411)
					p.GetErrorHandler().Sync(p)
					_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 168, p.GetParserRuleContext())
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		}
		p.SetState(1416)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 170, p.GetParserRuleContext())
	}

	return localctx
}

// IPrimaryContext is an interface to support dynamic dispatch.
type IPrimaryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrimaryContext differentiates from other interfaces.
	IsPrimaryContext()
}

type PrimaryContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrimaryContext() *PrimaryContext {
	var p = new(PrimaryContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = argusParserRULE_primary
	return p
}

func (*PrimaryContext) IsPrimaryContext() {}

func NewPrimaryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrimaryContext {
	var p = new(PrimaryContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = argusParserRULE_primary

	return p
}

func (s *PrimaryContext) GetParser() antlr.Parser { return s.parser }

func (s *PrimaryContext) Entities() IEntitiesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEntitiesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEntitiesContext)
}

func (s *PrimaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimaryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrimaryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.EnterPrimary(s)
	}
}

func (s *PrimaryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.ExitPrimary(s)
	}
}

func (p *argusParser) Primary() (localctx IPrimaryContext) {
	this := p
	_ = this

	localctx = NewPrimaryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, argusParserRULE_primary)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1417)
		p.Entities()
	}

	return localctx
}

// ICallContext is an interface to support dynamic dispatch.
type ICallContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCallContext differentiates from other interfaces.
	IsCallContext()
}

type CallContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCallContext() *CallContext {
	var p = new(CallContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = argusParserRULE_call
	return p
}

func (*CallContext) IsCallContext() {}

func NewCallContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CallContext {
	var p = new(CallContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = argusParserRULE_call

	return p
}

func (s *CallContext) GetParser() antlr.Parser { return s.parser }

func (s *CallContext) Primaries() IPrimariesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimariesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimariesContext)
}

func (s *CallContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *CallContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *CallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CallContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CallContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.EnterCall(s)
	}
}

func (s *CallContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.ExitCall(s)
	}
}

func (p *argusParser) Call() (localctx ICallContext) {
	this := p
	_ = this

	localctx = NewCallContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, argusParserRULE_call)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1419)
		p.Primaries()
	}
	{
		p.SetState(1420)
		p.Match(argusParserT__17)
	}
	p.SetState(1429)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == argusParserT__10 || _la == argusParserT__17 || (((_la-69)&-(0x1f+1)) == 0 && ((1<<uint((_la-69)))&((1<<(argusParserT__68-69))|(1<<(argusParserT__69-69))|(1<<(argusParserT__70-69))|(1<<(argusParserT__71-69))|(1<<(argusParserT__72-69))|(1<<(argusParserT__73-69))|(1<<(argusParserT__74-69))|(1<<(argusParserT__75-69))|(1<<(argusParserT__76-69))|(1<<(argusParserT__77-69))|(1<<(argusParserT__78-69))|(1<<(argusParserT__81-69))|(1<<(argusParserT__82-69))|(1<<(argusParserT__83-69))|(1<<(argusParserT__84-69))|(1<<(argusParserT__85-69))|(1<<(argusParserT__86-69))|(1<<(argusParserT__87-69))|(1<<(argusParserT__88-69))|(1<<(argusParserT__89-69))|(1<<(argusParserT__90-69))|(1<<(argusParserT__91-69))|(1<<(argusParserT__92-69))|(1<<(argusParserT__93-69))|(1<<(argusParserT__95-69))|(1<<(argusParserT__96-69)))) != 0) || (((_la-116)&-(0x1f+1)) == 0 && ((1<<uint((_la-116)))&((1<<(argusParserT__115-116))|(1<<(argusParserT__116-116))|(1<<(argusParserT__117-116))|(1<<(argusParserT__118-116))|(1<<(argusParserT__119-116))|(1<<(argusParserT__120-116))|(1<<(argusParserT__121-116))|(1<<(argusParserINT_LITERAL-116))|(1<<(argusParserREAL_LITERAL-116))|(1<<(argusParserCHAR_LITERAL-116))|(1<<(argusParserSTRING_LITERAL-116))|(1<<(argusParserIDENTIFIER-116)))) != 0) {
		{
			p.SetState(1421)
			p.expression(0)
		}
		p.SetState(1426)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == argusParserT__5 {
			{
				p.SetState(1422)
				p.Match(argusParserT__5)
			}
			{
				p.SetState(1423)
				p.expression(0)
			}

			p.SetState(1428)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(1431)
		p.Match(argusParserT__18)
	}

	return localctx
}

// IEntitiesContext is an interface to support dynamic dispatch.
type IEntitiesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEntitiesContext differentiates from other interfaces.
	IsEntitiesContext()
}

type EntitiesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEntitiesContext() *EntitiesContext {
	var p = new(EntitiesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = argusParserRULE_entities
	return p
}

func (*EntitiesContext) IsEntitiesContext() {}

func NewEntitiesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EntitiesContext {
	var p = new(EntitiesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = argusParserRULE_entities

	return p
}

func (s *EntitiesContext) GetParser() antlr.Parser { return s.parser }

func (s *EntitiesContext) Entity() IEntityContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEntityContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEntityContext)
}

func (s *EntitiesContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *EntitiesContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *EntitiesContext) AllName() []INameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*INameContext)(nil)).Elem())
	var tst = make([]INameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(INameContext)
		}
	}

	return tst
}

func (s *EntitiesContext) Name(i int) INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *EntitiesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EntitiesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EntitiesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.EnterEntities(s)
	}
}

func (s *EntitiesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.ExitEntities(s)
	}
}

func (p *argusParser) Entities() (localctx IEntitiesContext) {
	this := p
	_ = this

	localctx = NewEntitiesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, argusParserRULE_entities)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1433)
		p.Entity()
	}
	p.SetState(1439)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 174, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(1437)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case argusParserT__31:
				{
					p.SetState(1434)
					p.Match(argusParserT__31)
				}
				{
					p.SetState(1435)
					p.Name()
				}

			case argusParserT__10, argusParserT__17, argusParserT__68, argusParserT__69, argusParserT__70, argusParserT__71, argusParserT__72, argusParserT__73, argusParserT__74, argusParserT__75, argusParserT__76, argusParserT__77, argusParserT__78, argusParserT__81, argusParserT__82, argusParserT__83, argusParserT__84, argusParserT__85, argusParserT__86, argusParserT__87, argusParserT__88, argusParserT__89, argusParserT__90, argusParserT__91, argusParserT__92, argusParserT__93, argusParserT__95, argusParserT__96, argusParserT__115, argusParserT__116, argusParserT__117, argusParserT__118, argusParserT__119, argusParserT__120, argusParserT__121, argusParserINT_LITERAL, argusParserREAL_LITERAL, argusParserCHAR_LITERAL, argusParserSTRING_LITERAL, argusParserIDENTIFIER:
				{
					p.SetState(1436)
					p.expression(0)
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		}
		p.SetState(1441)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 174, p.GetParserRuleContext())
	}

	return localctx
}

// IEntityContext is an interface to support dynamic dispatch.
type IEntityContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEntityContext differentiates from other interfaces.
	IsEntityContext()
}

type EntityContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEntityContext() *EntityContext {
	var p = new(EntityContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = argusParserRULE_entity
	return p
}

func (*EntityContext) IsEntityContext() {}

func NewEntityContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EntityContext {
	var p = new(EntityContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = argusParserRULE_entity

	return p
}

func (s *EntityContext) GetParser() antlr.Parser { return s.parser }

func (s *EntityContext) INT_LITERAL() antlr.TerminalNode {
	return s.GetToken(argusParserINT_LITERAL, 0)
}

func (s *EntityContext) REAL_LITERAL() antlr.TerminalNode {
	return s.GetToken(argusParserREAL_LITERAL, 0)
}

func (s *EntityContext) CHAR_LITERAL() antlr.TerminalNode {
	return s.GetToken(argusParserCHAR_LITERAL, 0)
}

func (s *EntityContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(argusParserSTRING_LITERAL, 0)
}

func (s *EntityContext) Reference() IReferenceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReferenceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReferenceContext)
}

func (s *EntityContext) Entities() IEntitiesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEntitiesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEntitiesContext)
}

func (s *EntityContext) AllBind_arg() []IBind_argContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBind_argContext)(nil)).Elem())
	var tst = make([]IBind_argContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBind_argContext)
		}
	}

	return tst
}

func (s *EntityContext) Bind_arg(i int) IBind_argContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBind_argContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBind_argContext)
}

func (s *EntityContext) Type_spec() IType_specContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_specContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_specContext)
}

func (s *EntityContext) AllField() []IFieldContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFieldContext)(nil)).Elem())
	var tst = make([]IFieldContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFieldContext)
		}
	}

	return tst
}

func (s *EntityContext) Field(i int) IFieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFieldContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFieldContext)
}

func (s *EntityContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *EntityContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *EntityContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *EntityContext) AllActual_parm() []IActual_parmContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IActual_parmContext)(nil)).Elem())
	var tst = make([]IActual_parmContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IActual_parmContext)
		}
	}

	return tst
}

func (s *EntityContext) Actual_parm(i int) IActual_parmContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IActual_parmContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IActual_parmContext)
}

func (s *EntityContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EntityContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EntityContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.EnterEntity(s)
	}
}

func (s *EntityContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.ExitEntity(s)
	}
}

func (p *argusParser) Entity() (localctx IEntityContext) {
	this := p
	_ = this

	localctx = NewEntityContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, argusParserRULE_entity)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(1518)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 184, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1442)
			p.Match(argusParserT__115)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1443)
			p.Match(argusParserT__116)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1444)
			p.Match(argusParserT__117)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1445)
			p.Match(argusParserINT_LITERAL)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1446)
			p.Match(argusParserREAL_LITERAL)
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1447)
			p.Match(argusParserCHAR_LITERAL)
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1448)
			p.Match(argusParserSTRING_LITERAL)
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1449)
			p.Match(argusParserT__118)
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(1450)
			p.reference(0)
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(1451)
			p.Match(argusParserT__119)
		}
		{
			p.SetState(1452)
			p.Entities()
		}

		p.SetState(1461)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 176, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1453)
				p.Bind_arg()
			}
			p.SetState(1458)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 175, p.GetParserRuleContext())

			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(1454)
						p.Match(argusParserT__5)
					}
					{
						p.SetState(1455)
						p.Bind_arg()
					}

				}
				p.SetState(1460)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 175, p.GetParserRuleContext())
			}

		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(1463)
			p.Type_spec()
		}
		{
			p.SetState(1464)
			p.Match(argusParserT__26)
		}
		p.SetState(1475)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 178, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1465)
					p.Field()
				}
				p.SetState(1470)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 177, p.GetParserRuleContext())

				for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
					if _alt == 1 {
						{
							p.SetState(1466)
							p.Match(argusParserT__5)
						}
						{
							p.SetState(1467)
							p.Field()
						}

					}
					p.SetState(1472)
					p.GetErrorHandler().Sync(p)
					_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 177, p.GetParserRuleContext())
				}

			}
			p.SetState(1477)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 178, p.GetParserRuleContext())
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(1478)
			p.Type_spec()
		}
		{
			p.SetState(1479)
			p.Match(argusParserT__26)
		}

		p.SetState(1483)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 179, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1480)
				p.expression(0)
			}
			{
				p.SetState(1481)
				p.Match(argusParserT__15)
			}

		}
		p.SetState(1493)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 181, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1485)
				p.expression(0)
			}
			p.SetState(1490)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 180, p.GetParserRuleContext())

			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(1486)
						p.Match(argusParserT__5)
					}
					{
						p.SetState(1487)
						p.expression(0)
					}

				}
				p.SetState(1492)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 180, p.GetParserRuleContext())
			}

		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(1495)
			p.Type_spec()
		}
		{
			p.SetState(1496)
			p.Match(argusParserT__26)
		}
		{
			p.SetState(1497)
			p.Name()
		}

		p.SetState(1506)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 183, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1498)
				p.Actual_parm()
			}
			p.SetState(1503)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 182, p.GetParserRuleContext())

			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(1499)
						p.Match(argusParserT__5)
					}
					{
						p.SetState(1500)
						p.Actual_parm()
					}

				}
				p.SetState(1505)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 182, p.GetParserRuleContext())
			}

		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(1508)
			p.Match(argusParserT__120)
		}
		{
			p.SetState(1509)
			p.Match(argusParserT__17)
		}
		{
			p.SetState(1510)
			p.expression(0)
		}
		{
			p.SetState(1511)
			p.Match(argusParserT__18)
		}

	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(1513)
			p.Match(argusParserT__121)
		}
		{
			p.SetState(1514)
			p.Match(argusParserT__17)
		}
		{
			p.SetState(1515)
			p.expression(0)
		}
		{
			p.SetState(1516)
			p.Match(argusParserT__18)
		}

	}

	return localctx
}

// IFieldContext is an interface to support dynamic dispatch.
type IFieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFieldContext differentiates from other interfaces.
	IsFieldContext()
}

type FieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFieldContext() *FieldContext {
	var p = new(FieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = argusParserRULE_field
	return p
}

func (*FieldContext) IsFieldContext() {}

func NewFieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FieldContext {
	var p = new(FieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = argusParserRULE_field

	return p
}

func (s *FieldContext) GetParser() antlr.Parser { return s.parser }

func (s *FieldContext) AllName() []INameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*INameContext)(nil)).Elem())
	var tst = make([]INameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(INameContext)
		}
	}

	return tst
}

func (s *FieldContext) Name(i int) INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *FieldContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *FieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.EnterField(s)
	}
}

func (s *FieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.ExitField(s)
	}
}

func (p *argusParser) Field() (localctx IFieldContext) {
	this := p
	_ = this

	localctx = NewFieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, argusParserRULE_field)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1520)
		p.Name()
	}
	p.SetState(1525)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == argusParserT__5 {
		{
			p.SetState(1521)
			p.Match(argusParserT__5)
		}
		{
			p.SetState(1522)
			p.Name()
		}

		p.SetState(1527)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1528)
		p.Match(argusParserT__15)
	}
	{
		p.SetState(1529)
		p.expression(0)
	}

	return localctx
}

// IBind_argContext is an interface to support dynamic dispatch.
type IBind_argContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBind_argContext differentiates from other interfaces.
	IsBind_argContext()
}

type Bind_argContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBind_argContext() *Bind_argContext {
	var p = new(Bind_argContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = argusParserRULE_bind_arg
	return p
}

func (*Bind_argContext) IsBind_argContext() {}

func NewBind_argContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Bind_argContext {
	var p = new(Bind_argContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = argusParserRULE_bind_arg

	return p
}

func (s *Bind_argContext) GetParser() antlr.Parser { return s.parser }

func (s *Bind_argContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Bind_argContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Bind_argContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Bind_argContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.EnterBind_arg(s)
	}
}

func (s *Bind_argContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.ExitBind_arg(s)
	}
}

func (p *argusParser) Bind_arg() (localctx IBind_argContext) {
	this := p
	_ = this

	localctx = NewBind_argContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, argusParserRULE_bind_arg)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1533)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case argusParserT__67:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1531)
			p.Match(argusParserT__67)
		}

	case argusParserT__10, argusParserT__17, argusParserT__68, argusParserT__69, argusParserT__70, argusParserT__71, argusParserT__72, argusParserT__73, argusParserT__74, argusParserT__75, argusParserT__76, argusParserT__77, argusParserT__78, argusParserT__81, argusParserT__82, argusParserT__83, argusParserT__84, argusParserT__85, argusParserT__86, argusParserT__87, argusParserT__88, argusParserT__89, argusParserT__90, argusParserT__91, argusParserT__92, argusParserT__93, argusParserT__95, argusParserT__96, argusParserT__115, argusParserT__116, argusParserT__117, argusParserT__118, argusParserT__119, argusParserT__120, argusParserT__121, argusParserINT_LITERAL, argusParserREAL_LITERAL, argusParserCHAR_LITERAL, argusParserSTRING_LITERAL, argusParserIDENTIFIER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1532)
			p.expression(0)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// INameContext is an interface to support dynamic dispatch.
type INameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNameContext differentiates from other interfaces.
	IsNameContext()
}

type NameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNameContext() *NameContext {
	var p = new(NameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = argusParserRULE_name
	return p
}

func (*NameContext) IsNameContext() {}

func NewNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NameContext {
	var p = new(NameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = argusParserRULE_name

	return p
}

func (s *NameContext) GetParser() antlr.Parser { return s.parser }

func (s *NameContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(argusParserIDENTIFIER, 0)
}

func (s *NameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.EnterName(s)
	}
}

func (s *NameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.ExitName(s)
	}
}

func (p *argusParser) Name() (localctx INameContext) {
	this := p
	_ = this

	localctx = NewNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, argusParserRULE_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1535)
		p.Match(argusParserIDENTIFIER)
	}

	return localctx
}

// IIdnContext is an interface to support dynamic dispatch.
type IIdnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdnContext differentiates from other interfaces.
	IsIdnContext()
}

type IdnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdnContext() *IdnContext {
	var p = new(IdnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = argusParserRULE_idn
	return p
}

func (*IdnContext) IsIdnContext() {}

func NewIdnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdnContext {
	var p = new(IdnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = argusParserRULE_idn

	return p
}

func (s *IdnContext) GetParser() antlr.Parser { return s.parser }

func (s *IdnContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(argusParserIDENTIFIER, 0)
}

func (s *IdnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.EnterIdn(s)
	}
}

func (s *IdnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(argusListener); ok {
		listenerT.ExitIdn(s)
	}
}

func (p *argusParser) Idn() (localctx IIdnContext) {
	this := p
	_ = this

	localctx = NewIdnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, argusParserRULE_idn)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1537)
		p.Match(argusParserIDENTIFIER)
	}

	return localctx
}

func (p *argusParser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 28:
		var t *StatementContext = nil
		if localctx != nil {
			t = localctx.(*StatementContext)
		}
		return p.Statement_Sempred(t, predIndex)

	case 45:
		var t *ReferenceContext = nil
		if localctx != nil {
			t = localctx.(*ReferenceContext)
		}
		return p.Reference_Sempred(t, predIndex)

	case 49:
		var t *ExpressionContext = nil
		if localctx != nil {
			t = localctx.(*ExpressionContext)
		}
		return p.Expression_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *argusParser) Statement_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 0:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 1:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *argusParser) Reference_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 2:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *argusParser) Expression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 3:
		return p.Precpred(p.GetParserRuleContext(), 21)

	case 4:
		return p.Precpred(p.GetParserRuleContext(), 20)

	case 5:
		return p.Precpred(p.GetParserRuleContext(), 19)

	case 6:
		return p.Precpred(p.GetParserRuleContext(), 18)

	case 7:
		return p.Precpred(p.GetParserRuleContext(), 17)

	case 8:
		return p.Precpred(p.GetParserRuleContext(), 16)

	case 9:
		return p.Precpred(p.GetParserRuleContext(), 15)

	case 10:
		return p.Precpred(p.GetParserRuleContext(), 14)

	case 11:
		return p.Precpred(p.GetParserRuleContext(), 13)

	case 12:
		return p.Precpred(p.GetParserRuleContext(), 12)

	case 13:
		return p.Precpred(p.GetParserRuleContext(), 11)

	case 14:
		return p.Precpred(p.GetParserRuleContext(), 10)

	case 15:
		return p.Precpred(p.GetParserRuleContext(), 9)

	case 16:
		return p.Precpred(p.GetParserRuleContext(), 8)

	case 17:
		return p.Precpred(p.GetParserRuleContext(), 7)

	case 18:
		return p.Precpred(p.GetParserRuleContext(), 6)

	case 19:
		return p.Precpred(p.GetParserRuleContext(), 5)

	case 20:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 21:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 22:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 23:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
