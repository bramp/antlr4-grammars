// Code generated from matlab.g4 by ANTLR 4.9.3. DO NOT EDIT.

package matlab

import (
	"fmt"
	"unicode"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = unicode.IsLetter

var serializedLexerAtn = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 2, 47, 294,
	8, 1, 4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7,
	9, 7, 4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12,
	4, 13, 9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4,
	18, 9, 18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23,
	9, 23, 4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26, 4, 27, 9, 27, 4, 28, 9,
	28, 4, 29, 9, 29, 4, 30, 9, 30, 4, 31, 9, 31, 4, 32, 9, 32, 4, 33, 9, 33,
	4, 34, 9, 34, 4, 35, 9, 35, 4, 36, 9, 36, 4, 37, 9, 37, 4, 38, 9, 38, 4,
	39, 9, 39, 4, 40, 9, 40, 4, 41, 9, 41, 4, 42, 9, 42, 4, 43, 9, 43, 4, 44,
	9, 44, 4, 45, 9, 45, 4, 46, 9, 46, 4, 47, 9, 47, 4, 48, 9, 48, 4, 49, 9,
	49, 3, 2, 3, 2, 3, 3, 3, 3, 3, 4, 3, 4, 3, 5, 3, 5, 3, 6, 3, 6, 3, 7, 3,
	7, 3, 8, 3, 8, 3, 9, 3, 9, 3, 10, 3, 10, 3, 11, 3, 11, 3, 12, 3, 12, 3,
	13, 3, 13, 3, 14, 3, 14, 3, 15, 3, 15, 3, 16, 3, 16, 3, 17, 3, 17, 3, 18,
	3, 18, 3, 19, 3, 19, 3, 20, 3, 20, 3, 21, 3, 21, 3, 21, 3, 22, 3, 22, 3,
	22, 3, 23, 3, 23, 3, 23, 3, 24, 3, 24, 3, 24, 3, 25, 3, 25, 3, 25, 3, 25,
	3, 25, 3, 25, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 27, 3,
	27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 28, 3, 28, 3, 28,
	3, 28, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 30, 3, 30, 3, 30, 3,
	30, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 32, 3, 32, 3, 32,
	3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 34, 3, 34, 3, 34, 3, 34, 3,
	34, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 36, 3, 36, 3, 36,
	3, 37, 3, 37, 3, 37, 3, 38, 3, 38, 3, 38, 3, 39, 3, 39, 3, 39, 3, 40, 3,
	40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 41, 3, 41,
	3, 41, 3, 42, 3, 42, 3, 42, 3, 42, 7, 42, 243, 10, 42, 12, 42, 14, 42,
	246, 11, 42, 3, 42, 3, 42, 3, 43, 3, 43, 7, 43, 252, 10, 43, 12, 43, 14,
	43, 255, 11, 43, 3, 44, 3, 44, 3, 44, 5, 44, 260, 10, 44, 3, 44, 3, 44,
	5, 44, 264, 10, 44, 3, 45, 6, 45, 267, 10, 45, 13, 45, 14, 45, 268, 3,
	45, 3, 45, 6, 45, 273, 10, 45, 13, 45, 14, 45, 274, 5, 45, 277, 10, 45,
	3, 46, 3, 46, 3, 47, 3, 47, 3, 48, 6, 48, 284, 10, 48, 13, 48, 14, 48,
	285, 3, 49, 6, 49, 289, 10, 49, 13, 49, 14, 49, 290, 3, 49, 3, 49, 2, 2,
	50, 3, 3, 5, 4, 7, 5, 9, 6, 11, 7, 13, 8, 15, 9, 17, 10, 19, 11, 21, 12,
	23, 13, 25, 14, 27, 15, 29, 16, 31, 17, 33, 18, 35, 19, 37, 20, 39, 21,
	41, 22, 43, 23, 45, 24, 47, 25, 49, 26, 51, 27, 53, 28, 55, 29, 57, 30,
	59, 31, 61, 32, 63, 33, 65, 34, 67, 35, 69, 36, 71, 37, 73, 38, 75, 39,
	77, 40, 79, 41, 81, 42, 83, 43, 85, 44, 87, 45, 89, 2, 91, 2, 93, 2, 95,
	46, 97, 47, 3, 2, 9, 3, 2, 41, 41, 4, 2, 67, 92, 99, 124, 6, 2, 50, 59,
	67, 92, 97, 97, 99, 124, 4, 2, 71, 71, 103, 103, 4, 2, 45, 45, 47, 47,
	4, 2, 12, 12, 15, 15, 4, 2, 11, 11, 34, 34, 2, 300, 2, 3, 3, 2, 2, 2, 2,
	5, 3, 2, 2, 2, 2, 7, 3, 2, 2, 2, 2, 9, 3, 2, 2, 2, 2, 11, 3, 2, 2, 2, 2,
	13, 3, 2, 2, 2, 2, 15, 3, 2, 2, 2, 2, 17, 3, 2, 2, 2, 2, 19, 3, 2, 2, 2,
	2, 21, 3, 2, 2, 2, 2, 23, 3, 2, 2, 2, 2, 25, 3, 2, 2, 2, 2, 27, 3, 2, 2,
	2, 2, 29, 3, 2, 2, 2, 2, 31, 3, 2, 2, 2, 2, 33, 3, 2, 2, 2, 2, 35, 3, 2,
	2, 2, 2, 37, 3, 2, 2, 2, 2, 39, 3, 2, 2, 2, 2, 41, 3, 2, 2, 2, 2, 43, 3,
	2, 2, 2, 2, 45, 3, 2, 2, 2, 2, 47, 3, 2, 2, 2, 2, 49, 3, 2, 2, 2, 2, 51,
	3, 2, 2, 2, 2, 53, 3, 2, 2, 2, 2, 55, 3, 2, 2, 2, 2, 57, 3, 2, 2, 2, 2,
	59, 3, 2, 2, 2, 2, 61, 3, 2, 2, 2, 2, 63, 3, 2, 2, 2, 2, 65, 3, 2, 2, 2,
	2, 67, 3, 2, 2, 2, 2, 69, 3, 2, 2, 2, 2, 71, 3, 2, 2, 2, 2, 73, 3, 2, 2,
	2, 2, 75, 3, 2, 2, 2, 2, 77, 3, 2, 2, 2, 2, 79, 3, 2, 2, 2, 2, 81, 3, 2,
	2, 2, 2, 83, 3, 2, 2, 2, 2, 85, 3, 2, 2, 2, 2, 87, 3, 2, 2, 2, 2, 95, 3,
	2, 2, 2, 2, 97, 3, 2, 2, 2, 3, 99, 3, 2, 2, 2, 5, 101, 3, 2, 2, 2, 7, 103,
	3, 2, 2, 2, 9, 105, 3, 2, 2, 2, 11, 107, 3, 2, 2, 2, 13, 109, 3, 2, 2,
	2, 15, 111, 3, 2, 2, 2, 17, 113, 3, 2, 2, 2, 19, 115, 3, 2, 2, 2, 21, 117,
	3, 2, 2, 2, 23, 119, 3, 2, 2, 2, 25, 121, 3, 2, 2, 2, 27, 123, 3, 2, 2,
	2, 29, 125, 3, 2, 2, 2, 31, 127, 3, 2, 2, 2, 33, 129, 3, 2, 2, 2, 35, 131,
	3, 2, 2, 2, 37, 133, 3, 2, 2, 2, 39, 135, 3, 2, 2, 2, 41, 137, 3, 2, 2,
	2, 43, 140, 3, 2, 2, 2, 45, 143, 3, 2, 2, 2, 47, 146, 3, 2, 2, 2, 49, 149,
	3, 2, 2, 2, 51, 155, 3, 2, 2, 2, 53, 162, 3, 2, 2, 2, 55, 171, 3, 2, 2,
	2, 57, 175, 3, 2, 2, 2, 59, 181, 3, 2, 2, 2, 61, 185, 3, 2, 2, 2, 63, 192,
	3, 2, 2, 2, 65, 195, 3, 2, 2, 2, 67, 201, 3, 2, 2, 2, 69, 206, 3, 2, 2,
	2, 71, 213, 3, 2, 2, 2, 73, 216, 3, 2, 2, 2, 75, 219, 3, 2, 2, 2, 77, 222,
	3, 2, 2, 2, 79, 225, 3, 2, 2, 2, 81, 235, 3, 2, 2, 2, 83, 238, 3, 2, 2,
	2, 85, 249, 3, 2, 2, 2, 87, 256, 3, 2, 2, 2, 89, 266, 3, 2, 2, 2, 91, 278,
	3, 2, 2, 2, 93, 280, 3, 2, 2, 2, 95, 283, 3, 2, 2, 2, 97, 288, 3, 2, 2,
	2, 99, 100, 7, 42, 2, 2, 100, 4, 3, 2, 2, 2, 101, 102, 7, 43, 2, 2, 102,
	6, 3, 2, 2, 2, 103, 104, 7, 93, 2, 2, 104, 8, 3, 2, 2, 2, 105, 106, 7,
	95, 2, 2, 106, 10, 3, 2, 2, 2, 107, 108, 7, 60, 2, 2, 108, 12, 3, 2, 2,
	2, 109, 110, 7, 46, 2, 2, 110, 14, 3, 2, 2, 2, 111, 112, 7, 45, 2, 2, 112,
	16, 3, 2, 2, 2, 113, 114, 7, 47, 2, 2, 114, 18, 3, 2, 2, 2, 115, 116, 7,
	128, 2, 2, 116, 20, 3, 2, 2, 2, 117, 118, 7, 44, 2, 2, 118, 22, 3, 2, 2,
	2, 119, 120, 7, 49, 2, 2, 120, 24, 3, 2, 2, 2, 121, 122, 7, 94, 2, 2, 122,
	26, 3, 2, 2, 2, 123, 124, 7, 96, 2, 2, 124, 28, 3, 2, 2, 2, 125, 126, 7,
	62, 2, 2, 126, 30, 3, 2, 2, 2, 127, 128, 7, 64, 2, 2, 128, 32, 3, 2, 2,
	2, 129, 130, 7, 40, 2, 2, 130, 34, 3, 2, 2, 2, 131, 132, 7, 126, 2, 2,
	132, 36, 3, 2, 2, 2, 133, 134, 7, 63, 2, 2, 134, 38, 3, 2, 2, 2, 135, 136,
	7, 61, 2, 2, 136, 40, 3, 2, 2, 2, 137, 138, 7, 48, 2, 2, 138, 139, 7, 44,
	2, 2, 139, 42, 3, 2, 2, 2, 140, 141, 7, 48, 2, 2, 141, 142, 7, 94, 2, 2,
	142, 44, 3, 2, 2, 2, 143, 144, 7, 48, 2, 2, 144, 145, 7, 49, 2, 2, 145,
	46, 3, 2, 2, 2, 146, 147, 7, 48, 2, 2, 147, 148, 7, 96, 2, 2, 148, 48,
	3, 2, 2, 2, 149, 150, 7, 100, 2, 2, 150, 151, 7, 116, 2, 2, 151, 152, 7,
	103, 2, 2, 152, 153, 7, 99, 2, 2, 153, 154, 7, 109, 2, 2, 154, 50, 3, 2,
	2, 2, 155, 156, 7, 116, 2, 2, 156, 157, 7, 103, 2, 2, 157, 158, 7, 118,
	2, 2, 158, 159, 7, 119, 2, 2, 159, 160, 7, 116, 2, 2, 160, 161, 7, 112,
	2, 2, 161, 52, 3, 2, 2, 2, 162, 163, 7, 104, 2, 2, 163, 164, 7, 119, 2,
	2, 164, 165, 7, 112, 2, 2, 165, 166, 7, 101, 2, 2, 166, 167, 7, 118, 2,
	2, 167, 168, 7, 107, 2, 2, 168, 169, 7, 113, 2, 2, 169, 170, 7, 112, 2,
	2, 170, 54, 3, 2, 2, 2, 171, 172, 7, 104, 2, 2, 172, 173, 7, 113, 2, 2,
	173, 174, 7, 116, 2, 2, 174, 56, 3, 2, 2, 2, 175, 176, 7, 121, 2, 2, 176,
	177, 7, 106, 2, 2, 177, 178, 7, 107, 2, 2, 178, 179, 7, 110, 2, 2, 179,
	180, 7, 103, 2, 2, 180, 58, 3, 2, 2, 2, 181, 182, 7, 103, 2, 2, 182, 183,
	7, 112, 2, 2, 183, 184, 7, 102, 2, 2, 184, 60, 3, 2, 2, 2, 185, 186, 7,
	105, 2, 2, 186, 187, 7, 110, 2, 2, 187, 188, 7, 113, 2, 2, 188, 189, 7,
	100, 2, 2, 189, 190, 7, 99, 2, 2, 190, 191, 7, 110, 2, 2, 191, 62, 3, 2,
	2, 2, 192, 193, 7, 107, 2, 2, 193, 194, 7, 104, 2, 2, 194, 64, 3, 2, 2,
	2, 195, 196, 7, 101, 2, 2, 196, 197, 7, 110, 2, 2, 197, 198, 7, 103, 2,
	2, 198, 199, 7, 99, 2, 2, 199, 200, 7, 116, 2, 2, 200, 66, 3, 2, 2, 2,
	201, 202, 7, 103, 2, 2, 202, 203, 7, 110, 2, 2, 203, 204, 7, 117, 2, 2,
	204, 205, 7, 103, 2, 2, 205, 68, 3, 2, 2, 2, 206, 207, 7, 103, 2, 2, 207,
	208, 7, 110, 2, 2, 208, 209, 7, 117, 2, 2, 209, 210, 7, 103, 2, 2, 210,
	211, 7, 107, 2, 2, 211, 212, 7, 104, 2, 2, 212, 70, 3, 2, 2, 2, 213, 214,
	7, 62, 2, 2, 214, 215, 7, 63, 2, 2, 215, 72, 3, 2, 2, 2, 216, 217, 7, 64,
	2, 2, 217, 218, 7, 63, 2, 2, 218, 74, 3, 2, 2, 2, 219, 220, 7, 63, 2, 2,
	220, 221, 7, 63, 2, 2, 221, 76, 3, 2, 2, 2, 222, 223, 7, 128, 2, 2, 223,
	224, 7, 63, 2, 2, 224, 78, 3, 2, 2, 2, 225, 226, 7, 118, 2, 2, 226, 227,
	7, 116, 2, 2, 227, 228, 7, 99, 2, 2, 228, 229, 7, 112, 2, 2, 229, 230,
	7, 117, 2, 2, 230, 231, 7, 114, 2, 2, 231, 232, 7, 113, 2, 2, 232, 233,
	7, 117, 2, 2, 233, 234, 7, 103, 2, 2, 234, 80, 3, 2, 2, 2, 235, 236, 7,
	48, 2, 2, 236, 237, 7, 41, 2, 2, 237, 82, 3, 2, 2, 2, 238, 244, 7, 41,
	2, 2, 239, 243, 10, 2, 2, 2, 240, 241, 7, 41, 2, 2, 241, 243, 7, 41, 2,
	2, 242, 239, 3, 2, 2, 2, 242, 240, 3, 2, 2, 2, 243, 246, 3, 2, 2, 2, 244,
	242, 3, 2, 2, 2, 244, 245, 3, 2, 2, 2, 245, 247, 3, 2, 2, 2, 246, 244,
	3, 2, 2, 2, 247, 248, 7, 41, 2, 2, 248, 84, 3, 2, 2, 2, 249, 253, 9, 3,
	2, 2, 250, 252, 9, 4, 2, 2, 251, 250, 3, 2, 2, 2, 252, 255, 3, 2, 2, 2,
	253, 251, 3, 2, 2, 2, 253, 254, 3, 2, 2, 2, 254, 86, 3, 2, 2, 2, 255, 253,
	3, 2, 2, 2, 256, 263, 5, 89, 45, 2, 257, 259, 5, 91, 46, 2, 258, 260, 5,
	93, 47, 2, 259, 258, 3, 2, 2, 2, 259, 260, 3, 2, 2, 2, 260, 261, 3, 2,
	2, 2, 261, 262, 5, 89, 45, 2, 262, 264, 3, 2, 2, 2, 263, 257, 3, 2, 2,
	2, 263, 264, 3, 2, 2, 2, 264, 88, 3, 2, 2, 2, 265, 267, 4, 50, 59, 2, 266,
	265, 3, 2, 2, 2, 267, 268, 3, 2, 2, 2, 268, 266, 3, 2, 2, 2, 268, 269,
	3, 2, 2, 2, 269, 276, 3, 2, 2, 2, 270, 272, 7, 48, 2, 2, 271, 273, 4, 50,
	59, 2, 272, 271, 3, 2, 2, 2, 273, 274, 3, 2, 2, 2, 274, 272, 3, 2, 2, 2,
	274, 275, 3, 2, 2, 2, 275, 277, 3, 2, 2, 2, 276, 270, 3, 2, 2, 2, 276,
	277, 3, 2, 2, 2, 277, 90, 3, 2, 2, 2, 278, 279, 9, 5, 2, 2, 279, 92, 3,
	2, 2, 2, 280, 281, 9, 6, 2, 2, 281, 94, 3, 2, 2, 2, 282, 284, 9, 7, 2,
	2, 283, 282, 3, 2, 2, 2, 284, 285, 3, 2, 2, 2, 285, 283, 3, 2, 2, 2, 285,
	286, 3, 2, 2, 2, 286, 96, 3, 2, 2, 2, 287, 289, 9, 8, 2, 2, 288, 287, 3,
	2, 2, 2, 289, 290, 3, 2, 2, 2, 290, 288, 3, 2, 2, 2, 290, 291, 3, 2, 2,
	2, 291, 292, 3, 2, 2, 2, 292, 293, 8, 49, 2, 2, 293, 98, 3, 2, 2, 2, 13,
	2, 242, 244, 253, 259, 263, 268, 274, 276, 285, 290, 3, 8, 2, 2,
}

var lexerChannelNames = []string{
	"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
}

var lexerModeNames = []string{
	"DEFAULT_MODE",
}

var lexerLiteralNames = []string{
	"", "'('", "')'", "'['", "']'", "':'", "','", "'+'", "'-'", "'~'", "'*'",
	"'/'", "'\\'", "'^'", "'<'", "'>'", "'&'", "'|'", "'='", "';'", "'.*'",
	"'.\\'", "'./'", "'.^'", "'break'", "'return'", "'function'", "'for'",
	"'while'", "'end'", "'global'", "'if'", "'clear'", "'else'", "'elseif'",
	"'<='", "'>='", "'=='", "'~='", "'transpose'", "'.''",
}

var lexerSymbolicNames = []string{
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "ARRAYMUL", "ARRAYDIV", "ARRAYRDIV", "ARRAYPOW", "BREAK", "RETURN",
	"FUNCTION", "FOR", "WHILE", "END", "GLOBAL", "IF", "CLEAR", "ELSE", "ELSEIF",
	"LE_OP", "GE_OP", "EQ_OP", "NE_OP", "TRANSPOSE", "NCTRANSPOSE", "STRING_LITERAL",
	"IDENTIFIER", "CONSTANT", "CR", "WS",
}

var lexerRuleNames = []string{
	"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8",
	"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16",
	"T__17", "T__18", "ARRAYMUL", "ARRAYDIV", "ARRAYRDIV", "ARRAYPOW", "BREAK",
	"RETURN", "FUNCTION", "FOR", "WHILE", "END", "GLOBAL", "IF", "CLEAR", "ELSE",
	"ELSEIF", "LE_OP", "GE_OP", "EQ_OP", "NE_OP", "TRANSPOSE", "NCTRANSPOSE",
	"STRING_LITERAL", "IDENTIFIER", "CONSTANT", "NUMBER", "E", "SIGN", "CR",
	"WS",
}

type matlabLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

// NewmatlabLexer produces a new lexer instance for the optional input antlr.CharStream.
//
// The *matlabLexer instance produced may be reused by calling the SetInputStream method.
// The initial lexer configuration is expensive to construct, and the object is not thread-safe;
// however, if used within a Golang sync.Pool, the construction cost amortizes well and the
// objects can be used in a thread-safe manner.
func NewmatlabLexer(input antlr.CharStream) *matlabLexer {
	l := new(matlabLexer)
	lexerDeserializer := antlr.NewATNDeserializer(nil)
	lexerAtn := lexerDeserializer.DeserializeFromUInt16(serializedLexerAtn)
	lexerDecisionToDFA := make([]*antlr.DFA, len(lexerAtn.DecisionToState))
	for index, ds := range lexerAtn.DecisionToState {
		lexerDecisionToDFA[index] = antlr.NewDFA(ds, index)
	}
	l.BaseLexer = antlr.NewBaseLexer(input)
	l.Interpreter = antlr.NewLexerATNSimulator(l, lexerAtn, lexerDecisionToDFA, antlr.NewPredictionContextCache())

	l.channelNames = lexerChannelNames
	l.modeNames = lexerModeNames
	l.RuleNames = lexerRuleNames
	l.LiteralNames = lexerLiteralNames
	l.SymbolicNames = lexerSymbolicNames
	l.GrammarFileName = "matlab.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// matlabLexer tokens.
const (
	matlabLexerT__0           = 1
	matlabLexerT__1           = 2
	matlabLexerT__2           = 3
	matlabLexerT__3           = 4
	matlabLexerT__4           = 5
	matlabLexerT__5           = 6
	matlabLexerT__6           = 7
	matlabLexerT__7           = 8
	matlabLexerT__8           = 9
	matlabLexerT__9           = 10
	matlabLexerT__10          = 11
	matlabLexerT__11          = 12
	matlabLexerT__12          = 13
	matlabLexerT__13          = 14
	matlabLexerT__14          = 15
	matlabLexerT__15          = 16
	matlabLexerT__16          = 17
	matlabLexerT__17          = 18
	matlabLexerT__18          = 19
	matlabLexerARRAYMUL       = 20
	matlabLexerARRAYDIV       = 21
	matlabLexerARRAYRDIV      = 22
	matlabLexerARRAYPOW       = 23
	matlabLexerBREAK          = 24
	matlabLexerRETURN         = 25
	matlabLexerFUNCTION       = 26
	matlabLexerFOR            = 27
	matlabLexerWHILE          = 28
	matlabLexerEND            = 29
	matlabLexerGLOBAL         = 30
	matlabLexerIF             = 31
	matlabLexerCLEAR          = 32
	matlabLexerELSE           = 33
	matlabLexerELSEIF         = 34
	matlabLexerLE_OP          = 35
	matlabLexerGE_OP          = 36
	matlabLexerEQ_OP          = 37
	matlabLexerNE_OP          = 38
	matlabLexerTRANSPOSE      = 39
	matlabLexerNCTRANSPOSE    = 40
	matlabLexerSTRING_LITERAL = 41
	matlabLexerIDENTIFIER     = 42
	matlabLexerCONSTANT       = 43
	matlabLexerCR             = 44
	matlabLexerWS             = 45
)
