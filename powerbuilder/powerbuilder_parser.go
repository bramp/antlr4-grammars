// Code generated from PowerBuilderParser.g4 by ANTLR 4.9.3. DO NOT EDIT.

package powerbuilder // PowerBuilderParser
import (
	"fmt"
	"reflect"
	"strconv"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = reflect.Copy
var _ = strconv.Itoa

var parserATN = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 3, 166, 1836,
	4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7,
	4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12, 4, 13,
	9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4, 18, 9,
	18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23, 9, 23,
	4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26, 4, 27, 9, 27, 4, 28, 9, 28, 4,
	29, 9, 29, 4, 30, 9, 30, 4, 31, 9, 31, 4, 32, 9, 32, 4, 33, 9, 33, 4, 34,
	9, 34, 4, 35, 9, 35, 4, 36, 9, 36, 4, 37, 9, 37, 4, 38, 9, 38, 4, 39, 9,
	39, 4, 40, 9, 40, 4, 41, 9, 41, 4, 42, 9, 42, 4, 43, 9, 43, 4, 44, 9, 44,
	4, 45, 9, 45, 4, 46, 9, 46, 4, 47, 9, 47, 4, 48, 9, 48, 4, 49, 9, 49, 4,
	50, 9, 50, 4, 51, 9, 51, 4, 52, 9, 52, 4, 53, 9, 53, 4, 54, 9, 54, 4, 55,
	9, 55, 4, 56, 9, 56, 4, 57, 9, 57, 4, 58, 9, 58, 4, 59, 9, 59, 4, 60, 9,
	60, 4, 61, 9, 61, 4, 62, 9, 62, 4, 63, 9, 63, 4, 64, 9, 64, 4, 65, 9, 65,
	4, 66, 9, 66, 4, 67, 9, 67, 4, 68, 9, 68, 4, 69, 9, 69, 4, 70, 9, 70, 4,
	71, 9, 71, 4, 72, 9, 72, 4, 73, 9, 73, 4, 74, 9, 74, 4, 75, 9, 75, 4, 76,
	9, 76, 4, 77, 9, 77, 4, 78, 9, 78, 4, 79, 9, 79, 4, 80, 9, 80, 4, 81, 9,
	81, 4, 82, 9, 82, 4, 83, 9, 83, 4, 84, 9, 84, 4, 85, 9, 85, 4, 86, 9, 86,
	4, 87, 9, 87, 4, 88, 9, 88, 4, 89, 9, 89, 4, 90, 9, 90, 4, 91, 9, 91, 4,
	92, 9, 92, 4, 93, 9, 93, 4, 94, 9, 94, 4, 95, 9, 95, 4, 96, 9, 96, 4, 97,
	9, 97, 4, 98, 9, 98, 4, 99, 9, 99, 4, 100, 9, 100, 4, 101, 9, 101, 4, 102,
	9, 102, 4, 103, 9, 103, 4, 104, 9, 104, 4, 105, 9, 105, 4, 106, 9, 106,
	4, 107, 9, 107, 4, 108, 9, 108, 4, 109, 9, 109, 4, 110, 9, 110, 4, 111,
	9, 111, 4, 112, 9, 112, 4, 113, 9, 113, 4, 114, 9, 114, 4, 115, 9, 115,
	4, 116, 9, 116, 4, 117, 9, 117, 4, 118, 9, 118, 3, 2, 3, 2, 3, 2, 5, 2,
	240, 10, 2, 3, 2, 6, 2, 243, 10, 2, 13, 2, 14, 2, 244, 3, 2, 3, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 3,
	261, 10, 3, 3, 4, 3, 4, 3, 4, 3, 4, 6, 4, 267, 10, 4, 13, 4, 14, 4, 268,
	3, 4, 3, 4, 3, 4, 3, 5, 5, 5, 275, 10, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5,
	3, 5, 5, 5, 283, 10, 5, 3, 5, 3, 5, 3, 5, 5, 5, 288, 10, 5, 3, 5, 5, 5,
	291, 10, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 5, 297, 10, 5, 3, 5, 3, 5, 7, 5,
	301, 10, 5, 12, 5, 14, 5, 304, 11, 5, 3, 5, 3, 5, 3, 5, 3, 6, 3, 6, 3,
	6, 3, 6, 3, 6, 7, 6, 314, 10, 6, 12, 6, 14, 6, 317, 11, 6, 3, 6, 3, 6,
	3, 6, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 7, 7, 327, 10, 7, 12, 7, 14, 7, 330,
	11, 7, 3, 7, 3, 7, 5, 7, 334, 10, 7, 3, 8, 5, 8, 337, 10, 8, 3, 8, 3, 8,
	5, 8, 341, 10, 8, 3, 9, 5, 9, 344, 10, 9, 3, 9, 5, 9, 347, 10, 9, 3, 9,
	5, 9, 350, 10, 9, 3, 9, 3, 9, 3, 9, 3, 9, 5, 9, 356, 10, 9, 3, 10, 3, 10,
	5, 10, 360, 10, 10, 3, 10, 3, 10, 3, 10, 7, 10, 365, 10, 10, 12, 10, 14,
	10, 368, 11, 10, 3, 10, 3, 10, 5, 10, 372, 10, 10, 3, 11, 3, 11, 3, 11,
	3, 11, 5, 11, 378, 10, 11, 3, 11, 7, 11, 381, 10, 11, 12, 11, 14, 11, 384,
	11, 11, 3, 12, 3, 12, 5, 12, 388, 10, 12, 3, 12, 3, 12, 5, 12, 392, 10,
	12, 3, 12, 5, 12, 395, 10, 12, 3, 12, 3, 12, 3, 12, 3, 12, 5, 12, 401,
	10, 12, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 5, 13, 409, 10, 13, 3,
	14, 3, 14, 3, 14, 3, 14, 3, 15, 3, 15, 3, 15, 3, 15, 5, 15, 419, 10, 15,
	3, 15, 3, 15, 3, 15, 5, 15, 424, 10, 15, 3, 15, 5, 15, 427, 10, 15, 3,
	15, 3, 15, 5, 15, 431, 10, 15, 3, 15, 3, 15, 3, 15, 5, 15, 436, 10, 15,
	3, 15, 5, 15, 439, 10, 15, 7, 15, 441, 10, 15, 12, 15, 14, 15, 444, 11,
	15, 5, 15, 446, 10, 15, 3, 15, 5, 15, 449, 10, 15, 3, 16, 5, 16, 452, 10,
	16, 3, 16, 3, 16, 3, 16, 3, 17, 3, 17, 5, 17, 459, 10, 17, 3, 18, 5, 18,
	462, 10, 18, 3, 18, 5, 18, 465, 10, 18, 3, 18, 3, 18, 3, 18, 5, 18, 470,
	10, 18, 3, 18, 3, 18, 3, 18, 5, 18, 475, 10, 18, 3, 18, 3, 18, 3, 18, 3,
	19, 3, 19, 3, 19, 3, 19, 3, 19, 3, 19, 3, 19, 3, 19, 3, 19, 3, 19, 3, 19,
	5, 19, 491, 10, 19, 5, 19, 493, 10, 19, 3, 19, 3, 19, 3, 19, 3, 19, 5,
	19, 499, 10, 19, 3, 19, 3, 19, 5, 19, 503, 10, 19, 5, 19, 505, 10, 19,
	3, 20, 5, 20, 508, 10, 20, 3, 20, 5, 20, 511, 10, 20, 3, 20, 3, 20, 5,
	20, 515, 10, 20, 3, 20, 3, 20, 5, 20, 519, 10, 20, 3, 21, 3, 21, 3, 21,
	7, 21, 524, 10, 21, 12, 21, 14, 21, 527, 11, 21, 3, 21, 3, 21, 5, 21, 531,
	10, 21, 3, 22, 3, 22, 3, 22, 7, 22, 536, 10, 22, 12, 22, 14, 22, 539, 11,
	22, 3, 22, 3, 22, 3, 22, 3, 23, 5, 23, 545, 10, 23, 3, 23, 5, 23, 548,
	10, 23, 3, 23, 3, 23, 3, 23, 5, 23, 553, 10, 23, 3, 23, 3, 23, 3, 23, 5,
	23, 558, 10, 23, 3, 23, 3, 23, 3, 23, 5, 23, 563, 10, 23, 3, 23, 5, 23,
	566, 10, 23, 3, 23, 3, 23, 5, 23, 570, 10, 23, 7, 23, 572, 10, 23, 12,
	23, 14, 23, 575, 11, 23, 3, 23, 3, 23, 3, 23, 3, 24, 3, 24, 3, 24, 3, 24,
	3, 24, 3, 24, 5, 24, 586, 10, 24, 3, 24, 5, 24, 589, 10, 24, 3, 24, 3,
	24, 5, 24, 593, 10, 24, 7, 24, 595, 10, 24, 12, 24, 14, 24, 598, 11, 24,
	3, 24, 3, 24, 3, 24, 3, 25, 3, 25, 3, 25, 3, 25, 5, 25, 607, 10, 25, 3,
	25, 5, 25, 610, 10, 25, 3, 25, 3, 25, 5, 25, 614, 10, 25, 3, 25, 5, 25,
	617, 10, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 5, 25, 625, 10,
	25, 3, 25, 3, 25, 5, 25, 629, 10, 25, 3, 26, 3, 26, 3, 26, 5, 26, 634,
	10, 26, 3, 26, 3, 26, 3, 26, 5, 26, 639, 10, 26, 3, 26, 3, 26, 3, 26, 5,
	26, 644, 10, 26, 3, 26, 3, 26, 5, 26, 648, 10, 26, 3, 26, 5, 26, 651, 10,
	26, 3, 26, 5, 26, 654, 10, 26, 3, 26, 3, 26, 5, 26, 658, 10, 26, 7, 26,
	660, 10, 26, 12, 26, 14, 26, 663, 11, 26, 3, 26, 3, 26, 3, 26, 3, 27, 3,
	27, 3, 28, 3, 28, 3, 28, 3, 29, 3, 29, 3, 30, 3, 30, 3, 31, 3, 31, 3, 31,
	3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 7, 31, 685, 10, 31, 12, 31, 14, 31,
	688, 11, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 5, 31, 697,
	10, 31, 3, 31, 3, 31, 3, 31, 7, 31, 702, 10, 31, 12, 31, 14, 31, 705, 11,
	31, 3, 32, 3, 32, 3, 32, 7, 32, 710, 10, 32, 12, 32, 14, 32, 713, 11, 32,
	3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 5, 32, 721, 10, 32, 3, 33, 5,
	33, 724, 10, 33, 3, 33, 3, 33, 3, 33, 5, 33, 729, 10, 33, 3, 33, 7, 33,
	732, 10, 33, 12, 33, 14, 33, 735, 11, 33, 3, 34, 3, 34, 3, 34, 3, 34, 3,
	34, 3, 34, 3, 34, 3, 34, 5, 34, 745, 10, 34, 3, 35, 3, 35, 3, 35, 7, 35,
	750, 10, 35, 12, 35, 14, 35, 753, 11, 35, 3, 35, 3, 35, 3, 35, 3, 35, 5,
	35, 759, 10, 35, 3, 36, 3, 36, 3, 36, 7, 36, 764, 10, 36, 12, 36, 14, 36,
	767, 11, 36, 3, 36, 3, 36, 3, 36, 3, 36, 5, 36, 773, 10, 36, 3, 37, 5,
	37, 776, 10, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 5, 37, 783, 10, 37,
	3, 38, 3, 38, 3, 38, 5, 38, 788, 10, 38, 3, 38, 3, 38, 3, 38, 3, 38, 5,
	38, 794, 10, 38, 3, 39, 3, 39, 3, 39, 7, 39, 799, 10, 39, 12, 39, 14, 39,
	802, 11, 39, 3, 39, 3, 39, 3, 39, 3, 39, 5, 39, 808, 10, 39, 3, 40, 3,
	40, 3, 40, 7, 40, 813, 10, 40, 12, 40, 14, 40, 816, 11, 40, 3, 40, 3, 40,
	3, 40, 3, 40, 5, 40, 822, 10, 40, 3, 41, 3, 41, 5, 41, 826, 10, 41, 3,
	41, 3, 41, 3, 41, 5, 41, 831, 10, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41,
	3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 5, 41, 843, 10, 41, 3, 42, 3, 42, 3,
	42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42,
	3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3,
	42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42,
	3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 5, 42, 885, 10, 42, 3, 43, 3,
	43, 3, 43, 3, 44, 3, 44, 3, 44, 3, 45, 3, 45, 3, 45, 3, 45, 5, 45, 897,
	10, 45, 7, 45, 899, 10, 45, 12, 45, 14, 45, 902, 11, 45, 3, 45, 3, 45,
	3, 45, 3, 45, 5, 45, 908, 10, 45, 7, 45, 910, 10, 45, 12, 45, 14, 45, 913,
	11, 45, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46,
	3, 46, 3, 46, 5, 46, 926, 10, 46, 3, 47, 3, 47, 3, 47, 5, 47, 931, 10,
	47, 7, 47, 933, 10, 47, 12, 47, 14, 47, 936, 11, 47, 3, 47, 3, 47, 3, 47,
	3, 47, 3, 47, 3, 47, 5, 47, 944, 10, 47, 7, 47, 946, 10, 47, 12, 47, 14,
	47, 949, 11, 47, 7, 47, 951, 10, 47, 12, 47, 14, 47, 954, 11, 47, 3, 47,
	3, 47, 3, 47, 5, 47, 959, 10, 47, 7, 47, 961, 10, 47, 12, 47, 14, 47, 964,
	11, 47, 5, 47, 966, 10, 47, 3, 47, 3, 47, 3, 47, 3, 48, 3, 48, 3, 48, 3,
	48, 3, 48, 5, 48, 976, 10, 48, 3, 49, 3, 49, 3, 49, 3, 49, 3, 49, 3, 49,
	3, 49, 7, 49, 985, 10, 49, 12, 49, 14, 49, 988, 11, 49, 3, 49, 3, 49, 3,
	49, 3, 49, 3, 49, 3, 49, 7, 49, 996, 10, 49, 12, 49, 14, 49, 999, 11, 49,
	3, 49, 3, 49, 5, 49, 1003, 10, 49, 3, 50, 3, 50, 5, 50, 1007, 10, 50, 3,
	51, 3, 51, 3, 51, 3, 51, 3, 51, 5, 51, 1014, 10, 51, 3, 52, 3, 52, 3, 52,
	3, 52, 3, 52, 3, 52, 7, 52, 1022, 10, 52, 12, 52, 14, 52, 1025, 11, 52,
	3, 52, 3, 52, 3, 52, 3, 52, 7, 52, 1031, 10, 52, 12, 52, 14, 52, 1034,
	11, 52, 3, 52, 5, 52, 1037, 10, 52, 3, 52, 3, 52, 5, 52, 1041, 10, 52,
	3, 52, 5, 52, 1044, 10, 52, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 7,
	53, 1052, 10, 53, 12, 53, 14, 53, 1055, 11, 53, 3, 53, 5, 53, 1058, 10,
	53, 3, 54, 3, 54, 3, 54, 3, 54, 5, 54, 1064, 10, 54, 5, 54, 1066, 10, 54,
	3, 54, 3, 54, 3, 55, 3, 55, 3, 55, 3, 55, 3, 55, 3, 55, 3, 55, 5, 55, 1077,
	10, 55, 3, 55, 3, 55, 5, 55, 1081, 10, 55, 3, 56, 3, 56, 3, 56, 3, 56,
	7, 56, 1087, 10, 56, 12, 56, 14, 56, 1090, 11, 56, 3, 56, 3, 56, 5, 56,
	1094, 10, 56, 3, 57, 3, 57, 3, 57, 7, 57, 1099, 10, 57, 12, 57, 14, 57,
	1102, 11, 57, 3, 57, 5, 57, 1105, 10, 57, 3, 58, 3, 58, 5, 58, 1109, 10,
	58, 3, 58, 3, 58, 5, 58, 1113, 10, 58, 3, 58, 5, 58, 1116, 10, 58, 3, 59,
	3, 59, 5, 59, 1120, 10, 59, 3, 59, 3, 59, 5, 59, 1124, 10, 59, 3, 59, 5,
	59, 1127, 10, 59, 3, 59, 3, 59, 5, 59, 1131, 10, 59, 3, 59, 3, 59, 3, 59,
	3, 59, 5, 59, 1137, 10, 59, 5, 59, 1139, 10, 59, 3, 59, 3, 59, 3, 59, 3,
	59, 5, 59, 1145, 10, 59, 3, 59, 3, 59, 3, 59, 5, 59, 1150, 10, 59, 3, 59,
	3, 59, 5, 59, 1154, 10, 59, 5, 59, 1156, 10, 59, 3, 59, 5, 59, 1159, 10,
	59, 5, 59, 1161, 10, 59, 3, 60, 3, 60, 3, 60, 3, 60, 3, 61, 3, 61, 3, 61,
	5, 61, 1170, 10, 61, 3, 61, 3, 61, 3, 61, 3, 61, 5, 61, 1176, 10, 61, 3,
	62, 3, 62, 3, 62, 5, 62, 1181, 10, 62, 3, 62, 3, 62, 3, 62, 3, 62, 3, 62,
	3, 63, 3, 63, 5, 63, 1190, 10, 63, 3, 63, 3, 63, 3, 63, 3, 63, 5, 63, 1196,
	10, 63, 5, 63, 1198, 10, 63, 3, 63, 5, 63, 1201, 10, 63, 3, 63, 5, 63,
	1204, 10, 63, 3, 64, 3, 64, 3, 64, 3, 65, 3, 65, 3, 65, 3, 65, 3, 65, 5,
	65, 1214, 10, 65, 3, 65, 3, 65, 3, 65, 3, 65, 5, 65, 1220, 10, 65, 3, 65,
	3, 65, 5, 65, 1224, 10, 65, 5, 65, 1226, 10, 65, 3, 66, 3, 66, 3, 66, 3,
	66, 3, 66, 3, 66, 3, 66, 5, 66, 1235, 10, 66, 3, 66, 3, 66, 3, 67, 3, 67,
	3, 67, 3, 67, 3, 67, 5, 67, 1244, 10, 67, 3, 68, 3, 68, 3, 68, 3, 68, 7,
	68, 1250, 10, 68, 12, 68, 14, 68, 1253, 11, 68, 3, 68, 3, 68, 3, 68, 3,
	68, 3, 68, 5, 68, 1260, 10, 68, 3, 69, 3, 69, 3, 69, 5, 69, 1265, 10, 69,
	3, 69, 3, 69, 3, 69, 5, 69, 1270, 10, 69, 3, 69, 3, 69, 3, 69, 3, 69, 3,
	69, 3, 69, 5, 69, 1278, 10, 69, 3, 70, 3, 70, 3, 70, 3, 70, 3, 70, 3, 70,
	3, 70, 3, 70, 3, 70, 5, 70, 1289, 10, 70, 3, 70, 3, 70, 3, 70, 3, 70, 5,
	70, 1295, 10, 70, 5, 70, 1297, 10, 70, 3, 71, 3, 71, 3, 72, 3, 72, 5, 72,
	1303, 10, 72, 3, 73, 3, 73, 3, 73, 7, 73, 1308, 10, 73, 12, 73, 14, 73,
	1311, 11, 73, 3, 73, 5, 73, 1314, 10, 73, 3, 73, 5, 73, 1317, 10, 73, 3,
	73, 5, 73, 1320, 10, 73, 3, 73, 5, 73, 1323, 10, 73, 3, 73, 3, 73, 3, 73,
	5, 73, 1328, 10, 73, 3, 73, 3, 73, 3, 73, 3, 73, 5, 73, 1334, 10, 73, 7,
	73, 1336, 10, 73, 12, 73, 14, 73, 1339, 11, 73, 3, 74, 3, 74, 3, 74, 3,
	74, 3, 74, 5, 74, 1346, 10, 74, 3, 75, 3, 75, 3, 75, 5, 75, 1351, 10, 75,
	3, 75, 5, 75, 1354, 10, 75, 3, 75, 5, 75, 1357, 10, 75, 3, 75, 3, 75, 3,
	76, 3, 76, 3, 76, 3, 76, 3, 76, 3, 76, 3, 76, 3, 76, 3, 76, 3, 76, 5, 76,
	1371, 10, 76, 3, 76, 3, 76, 5, 76, 1375, 10, 76, 3, 76, 5, 76, 1378, 10,
	76, 3, 76, 3, 76, 5, 76, 1382, 10, 76, 3, 77, 3, 77, 3, 77, 3, 77, 3, 77,
	3, 78, 3, 78, 3, 78, 3, 78, 3, 78, 3, 78, 3, 78, 5, 78, 1396, 10, 78, 5,
	78, 1398, 10, 78, 3, 79, 3, 79, 3, 79, 3, 79, 3, 79, 3, 79, 3, 79, 3, 79,
	5, 79, 1408, 10, 79, 3, 80, 3, 80, 3, 80, 3, 81, 3, 81, 3, 81, 3, 81, 3,
	81, 3, 81, 3, 81, 3, 81, 5, 81, 1421, 10, 81, 5, 81, 1423, 10, 81, 3, 81,
	5, 81, 1426, 10, 81, 3, 82, 3, 82, 3, 82, 3, 82, 5, 82, 1432, 10, 82, 3,
	82, 3, 82, 5, 82, 1436, 10, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82,
	3, 82, 3, 82, 3, 82, 5, 82, 1447, 10, 82, 3, 82, 5, 82, 1450, 10, 82, 3,
	82, 3, 82, 3, 82, 5, 82, 1455, 10, 82, 3, 82, 5, 82, 1458, 10, 82, 3, 82,
	5, 82, 1461, 10, 82, 3, 83, 3, 83, 3, 83, 5, 83, 1466, 10, 83, 3, 83, 3,
	83, 3, 83, 5, 83, 1471, 10, 83, 3, 83, 5, 83, 1474, 10, 83, 3, 83, 3, 83,
	3, 84, 5, 84, 1479, 10, 84, 3, 84, 3, 84, 5, 84, 1483, 10, 84, 3, 85, 3,
	85, 3, 86, 3, 86, 3, 86, 3, 86, 3, 86, 5, 86, 1492, 10, 86, 3, 86, 3, 86,
	3, 86, 5, 86, 1497, 10, 86, 3, 86, 3, 86, 3, 86, 5, 86, 1502, 10, 86, 3,
	86, 5, 86, 1505, 10, 86, 5, 86, 1507, 10, 86, 3, 87, 3, 87, 3, 88, 3, 88,
	3, 88, 3, 89, 3, 89, 3, 90, 3, 90, 3, 90, 3, 90, 3, 90, 3, 90, 3, 90, 3,
	90, 5, 90, 1524, 10, 90, 3, 90, 7, 90, 1527, 10, 90, 12, 90, 14, 90, 1530,
	11, 90, 3, 90, 3, 90, 3, 90, 5, 90, 1535, 10, 90, 3, 91, 3, 91, 3, 91,
	3, 91, 3, 91, 5, 91, 1542, 10, 91, 7, 91, 1544, 10, 91, 12, 91, 14, 91,
	1547, 11, 91, 3, 91, 3, 91, 3, 92, 3, 92, 7, 92, 1553, 10, 92, 12, 92,
	14, 92, 1556, 11, 92, 3, 92, 3, 92, 3, 92, 3, 92, 3, 93, 3, 93, 3, 93,
	3, 93, 3, 93, 5, 93, 1567, 10, 93, 7, 93, 1569, 10, 93, 12, 93, 14, 93,
	1572, 11, 93, 3, 93, 7, 93, 1575, 10, 93, 12, 93, 14, 93, 1578, 11, 93,
	3, 93, 5, 93, 1581, 10, 93, 3, 93, 3, 93, 3, 93, 5, 93, 1586, 10, 93, 3,
	94, 3, 94, 3, 94, 3, 94, 3, 94, 5, 94, 1593, 10, 94, 7, 94, 1595, 10, 94,
	12, 94, 14, 94, 1598, 11, 94, 3, 95, 3, 95, 3, 95, 5, 95, 1603, 10, 95,
	7, 95, 1605, 10, 95, 12, 95, 14, 95, 1608, 11, 95, 3, 96, 3, 96, 3, 96,
	3, 96, 3, 96, 3, 96, 5, 96, 1616, 10, 96, 3, 96, 5, 96, 1619, 10, 96, 3,
	97, 3, 97, 3, 98, 3, 98, 3, 99, 3, 99, 3, 99, 5, 99, 1628, 10, 99, 3, 99,
	3, 99, 5, 99, 1632, 10, 99, 3, 99, 3, 99, 3, 99, 5, 99, 1637, 10, 99, 3,
	99, 3, 99, 3, 100, 3, 100, 3, 101, 3, 101, 3, 101, 3, 101, 3, 101, 3, 101,
	6, 101, 1649, 10, 101, 13, 101, 14, 101, 1650, 3, 101, 3, 101, 3, 101,
	3, 102, 3, 102, 3, 102, 3, 102, 5, 102, 1660, 10, 102, 3, 102, 3, 102,
	3, 102, 3, 102, 5, 102, 1666, 10, 102, 7, 102, 1668, 10, 102, 12, 102,
	14, 102, 1671, 11, 102, 3, 102, 3, 102, 5, 102, 1675, 10, 102, 7, 102,
	1677, 10, 102, 12, 102, 14, 102, 1680, 11, 102, 3, 103, 3, 103, 3, 103,
	3, 103, 3, 103, 3, 103, 5, 103, 1688, 10, 103, 7, 103, 1690, 10, 103, 12,
	103, 14, 103, 1693, 11, 103, 3, 104, 3, 104, 3, 104, 3, 104, 5, 104, 1699,
	10, 104, 7, 104, 1701, 10, 104, 12, 104, 14, 104, 1704, 11, 104, 3, 105,
	3, 105, 3, 105, 3, 106, 3, 106, 3, 106, 7, 106, 1712, 10, 106, 12, 106,
	14, 106, 1715, 11, 106, 3, 106, 5, 106, 1718, 10, 106, 3, 106, 3, 106,
	3, 106, 5, 106, 1723, 10, 106, 7, 106, 1725, 10, 106, 12, 106, 14, 106,
	1728, 11, 106, 3, 107, 3, 107, 3, 107, 3, 107, 3, 107, 5, 107, 1735, 10,
	107, 7, 107, 1737, 10, 107, 12, 107, 14, 107, 1740, 11, 107, 3, 108, 3,
	108, 3, 108, 5, 108, 1745, 10, 108, 3, 108, 3, 108, 3, 108, 5, 108, 1750,
	10, 108, 7, 108, 1752, 10, 108, 12, 108, 14, 108, 1755, 11, 108, 3, 108,
	3, 108, 3, 108, 3, 108, 3, 108, 5, 108, 1762, 10, 108, 3, 108, 5, 108,
	1765, 10, 108, 3, 108, 5, 108, 1768, 10, 108, 3, 108, 5, 108, 1771, 10,
	108, 3, 109, 3, 109, 3, 110, 3, 110, 3, 110, 3, 110, 3, 110, 3, 110, 3,
	110, 3, 110, 3, 110, 3, 110, 3, 110, 3, 110, 3, 110, 3, 110, 3, 110, 3,
	110, 3, 110, 5, 110, 1792, 10, 110, 3, 111, 5, 111, 1795, 10, 111, 3, 111,
	3, 111, 3, 112, 3, 112, 3, 112, 3, 113, 3, 113, 3, 113, 3, 113, 5, 113,
	1806, 10, 113, 3, 113, 5, 113, 1809, 10, 113, 5, 113, 1811, 10, 113, 3,
	114, 3, 114, 5, 114, 1815, 10, 114, 3, 114, 3, 114, 5, 114, 1819, 10, 114,
	3, 114, 3, 114, 3, 115, 3, 115, 3, 116, 3, 116, 3, 116, 3, 116, 3, 116,
	3, 117, 3, 117, 5, 117, 1832, 10, 117, 3, 118, 3, 118, 3, 118, 2, 3, 60,
	119, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36,
	38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72,
	74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106,
	108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136,
	138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166,
	168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196,
	198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226,
	228, 230, 232, 234, 2, 23, 3, 2, 28, 29, 3, 2, 128, 129, 3, 2, 143, 144,
	4, 2, 33, 33, 40, 40, 3, 2, 36, 37, 3, 2, 80, 81, 4, 2, 34, 35, 51, 51,
	4, 2, 34, 35, 50, 54, 4, 2, 28, 28, 55, 55, 5, 2, 128, 129, 133, 134, 137,
	137, 3, 2, 122, 127, 4, 2, 133, 134, 137, 137, 4, 2, 85, 85, 119, 119,
	4, 2, 46, 46, 120, 120, 4, 2, 116, 117, 121, 121, 5, 2, 122, 122, 130,
	131, 135, 136, 4, 2, 36, 36, 56, 56, 3, 2, 83, 84, 4, 2, 69, 69, 74, 74,
	4, 2, 128, 129, 133, 134, 3, 2, 3, 25, 2, 2118, 2, 239, 3, 2, 2, 2, 4,
	260, 3, 2, 2, 2, 6, 262, 3, 2, 2, 2, 8, 274, 3, 2, 2, 2, 10, 308, 3, 2,
	2, 2, 12, 333, 3, 2, 2, 2, 14, 336, 3, 2, 2, 2, 16, 343, 3, 2, 2, 2, 18,
	357, 3, 2, 2, 2, 20, 373, 3, 2, 2, 2, 22, 385, 3, 2, 2, 2, 24, 402, 3,
	2, 2, 2, 26, 410, 3, 2, 2, 2, 28, 448, 3, 2, 2, 2, 30, 451, 3, 2, 2, 2,
	32, 456, 3, 2, 2, 2, 34, 461, 3, 2, 2, 2, 36, 504, 3, 2, 2, 2, 38, 507,
	3, 2, 2, 2, 40, 520, 3, 2, 2, 2, 42, 532, 3, 2, 2, 2, 44, 544, 3, 2, 2,
	2, 46, 579, 3, 2, 2, 2, 48, 628, 3, 2, 2, 2, 50, 630, 3, 2, 2, 2, 52, 667,
	3, 2, 2, 2, 54, 669, 3, 2, 2, 2, 56, 672, 3, 2, 2, 2, 58, 674, 3, 2, 2,
	2, 60, 696, 3, 2, 2, 2, 62, 720, 3, 2, 2, 2, 64, 723, 3, 2, 2, 2, 66, 744,
	3, 2, 2, 2, 68, 758, 3, 2, 2, 2, 70, 772, 3, 2, 2, 2, 72, 782, 3, 2, 2,
	2, 74, 793, 3, 2, 2, 2, 76, 807, 3, 2, 2, 2, 78, 821, 3, 2, 2, 2, 80, 842,
	3, 2, 2, 2, 82, 884, 3, 2, 2, 2, 84, 886, 3, 2, 2, 2, 86, 889, 3, 2, 2,
	2, 88, 892, 3, 2, 2, 2, 90, 925, 3, 2, 2, 2, 92, 927, 3, 2, 2, 2, 94, 975,
	3, 2, 2, 2, 96, 977, 3, 2, 2, 2, 98, 1006, 3, 2, 2, 2, 100, 1008, 3, 2,
	2, 2, 102, 1015, 3, 2, 2, 2, 104, 1045, 3, 2, 2, 2, 106, 1059, 3, 2, 2,
	2, 108, 1080, 3, 2, 2, 2, 110, 1093, 3, 2, 2, 2, 112, 1104, 3, 2, 2, 2,
	114, 1106, 3, 2, 2, 2, 116, 1160, 3, 2, 2, 2, 118, 1162, 3, 2, 2, 2, 120,
	1166, 3, 2, 2, 2, 122, 1177, 3, 2, 2, 2, 124, 1187, 3, 2, 2, 2, 126, 1205,
	3, 2, 2, 2, 128, 1225, 3, 2, 2, 2, 130, 1227, 3, 2, 2, 2, 132, 1238, 3,
	2, 2, 2, 134, 1259, 3, 2, 2, 2, 136, 1277, 3, 2, 2, 2, 138, 1296, 3, 2,
	2, 2, 140, 1298, 3, 2, 2, 2, 142, 1300, 3, 2, 2, 2, 144, 1309, 3, 2, 2,
	2, 146, 1345, 3, 2, 2, 2, 148, 1347, 3, 2, 2, 2, 150, 1381, 3, 2, 2, 2,
	152, 1383, 3, 2, 2, 2, 154, 1397, 3, 2, 2, 2, 156, 1407, 3, 2, 2, 2, 158,
	1409, 3, 2, 2, 2, 160, 1412, 3, 2, 2, 2, 162, 1460, 3, 2, 2, 2, 164, 1465,
	3, 2, 2, 2, 166, 1478, 3, 2, 2, 2, 168, 1484, 3, 2, 2, 2, 170, 1506, 3,
	2, 2, 2, 172, 1508, 3, 2, 2, 2, 174, 1510, 3, 2, 2, 2, 176, 1513, 3, 2,
	2, 2, 178, 1515, 3, 2, 2, 2, 180, 1536, 3, 2, 2, 2, 182, 1550, 3, 2, 2,
	2, 184, 1561, 3, 2, 2, 2, 186, 1587, 3, 2, 2, 2, 188, 1599, 3, 2, 2, 2,
	190, 1609, 3, 2, 2, 2, 192, 1620, 3, 2, 2, 2, 194, 1622, 3, 2, 2, 2, 196,
	1627, 3, 2, 2, 2, 198, 1640, 3, 2, 2, 2, 200, 1642, 3, 2, 2, 2, 202, 1655,
	3, 2, 2, 2, 204, 1681, 3, 2, 2, 2, 206, 1694, 3, 2, 2, 2, 208, 1705, 3,
	2, 2, 2, 210, 1708, 3, 2, 2, 2, 212, 1729, 3, 2, 2, 2, 214, 1770, 3, 2,
	2, 2, 216, 1772, 3, 2, 2, 2, 218, 1791, 3, 2, 2, 2, 220, 1794, 3, 2, 2,
	2, 222, 1798, 3, 2, 2, 2, 224, 1810, 3, 2, 2, 2, 226, 1814, 3, 2, 2, 2,
	228, 1822, 3, 2, 2, 2, 230, 1824, 3, 2, 2, 2, 232, 1831, 3, 2, 2, 2, 234,
	1833, 3, 2, 2, 2, 236, 237, 7, 79, 2, 2, 237, 238, 7, 156, 2, 2, 238, 240,
	7, 146, 2, 2, 239, 236, 3, 2, 2, 2, 239, 240, 3, 2, 2, 2, 240, 242, 3,
	2, 2, 2, 241, 243, 5, 4, 3, 2, 242, 241, 3, 2, 2, 2, 243, 244, 3, 2, 2,
	2, 244, 242, 3, 2, 2, 2, 244, 245, 3, 2, 2, 2, 245, 246, 3, 2, 2, 2, 246,
	247, 7, 2, 2, 3, 247, 3, 3, 2, 2, 2, 248, 261, 5, 8, 5, 2, 249, 261, 5,
	54, 28, 2, 250, 261, 5, 6, 4, 2, 251, 261, 5, 10, 6, 2, 252, 261, 5, 12,
	7, 2, 253, 261, 5, 14, 8, 2, 254, 261, 5, 32, 17, 2, 255, 261, 5, 34, 18,
	2, 256, 261, 5, 42, 22, 2, 257, 261, 5, 44, 23, 2, 258, 261, 5, 46, 24,
	2, 259, 261, 5, 50, 26, 2, 260, 248, 3, 2, 2, 2, 260, 249, 3, 2, 2, 2,
	260, 250, 3, 2, 2, 2, 260, 251, 3, 2, 2, 2, 260, 252, 3, 2, 2, 2, 260,
	253, 3, 2, 2, 2, 260, 254, 3, 2, 2, 2, 260, 255, 3, 2, 2, 2, 260, 256,
	3, 2, 2, 2, 260, 257, 3, 2, 2, 2, 260, 258, 3, 2, 2, 2, 260, 259, 3, 2,
	2, 2, 261, 5, 3, 2, 2, 2, 262, 266, 7, 33, 2, 2, 263, 267, 5, 8, 5, 2,
	264, 267, 5, 14, 8, 2, 265, 267, 5, 12, 7, 2, 266, 263, 3, 2, 2, 2, 266,
	264, 3, 2, 2, 2, 266, 265, 3, 2, 2, 2, 267, 268, 3, 2, 2, 2, 268, 266,
	3, 2, 2, 2, 268, 269, 3, 2, 2, 2, 269, 270, 3, 2, 2, 2, 270, 271, 7, 30,
	2, 2, 271, 272, 7, 33, 2, 2, 272, 7, 3, 2, 2, 2, 273, 275, 5, 58, 30, 2,
	274, 273, 3, 2, 2, 2, 274, 275, 3, 2, 2, 2, 275, 276, 3, 2, 2, 2, 276,
	277, 7, 40, 2, 2, 277, 278, 5, 220, 111, 2, 278, 282, 7, 43, 2, 2, 279,
	280, 5, 220, 111, 2, 280, 281, 7, 142, 2, 2, 281, 283, 3, 2, 2, 2, 282,
	279, 3, 2, 2, 2, 282, 283, 3, 2, 2, 2, 283, 284, 3, 2, 2, 2, 284, 287,
	5, 232, 117, 2, 285, 286, 7, 49, 2, 2, 286, 288, 5, 220, 111, 2, 287, 285,
	3, 2, 2, 2, 287, 288, 3, 2, 2, 2, 288, 290, 3, 2, 2, 2, 289, 291, 7, 101,
	2, 2, 290, 289, 3, 2, 2, 2, 290, 291, 3, 2, 2, 2, 291, 296, 3, 2, 2, 2,
	292, 293, 7, 102, 2, 2, 293, 294, 7, 143, 2, 2, 294, 295, 7, 122, 2, 2,
	295, 297, 7, 143, 2, 2, 296, 292, 3, 2, 2, 2, 296, 297, 3, 2, 2, 2, 297,
	302, 3, 2, 2, 2, 298, 301, 5, 14, 8, 2, 299, 301, 5, 48, 25, 2, 300, 298,
	3, 2, 2, 2, 300, 299, 3, 2, 2, 2, 301, 304, 3, 2, 2, 2, 302, 300, 3, 2,
	2, 2, 302, 303, 3, 2, 2, 2, 303, 305, 3, 2, 2, 2, 304, 302, 3, 2, 2, 2,
	305, 306, 7, 30, 2, 2, 306, 307, 7, 40, 2, 2, 307, 9, 3, 2, 2, 2, 308,
	309, 7, 40, 2, 2, 309, 315, 7, 32, 2, 2, 310, 314, 5, 14, 8, 2, 311, 314,
	5, 32, 17, 2, 312, 314, 5, 84, 43, 2, 313, 310, 3, 2, 2, 2, 313, 311, 3,
	2, 2, 2, 313, 312, 3, 2, 2, 2, 314, 317, 3, 2, 2, 2, 315, 313, 3, 2, 2,
	2, 315, 316, 3, 2, 2, 2, 316, 318, 3, 2, 2, 2, 317, 315, 3, 2, 2, 2, 318,
	319, 7, 30, 2, 2, 319, 320, 7, 32, 2, 2, 320, 11, 3, 2, 2, 2, 321, 322,
	7, 28, 2, 2, 322, 334, 5, 14, 8, 2, 323, 324, 9, 2, 2, 2, 324, 328, 7,
	32, 2, 2, 325, 327, 5, 14, 8, 2, 326, 325, 3, 2, 2, 2, 327, 330, 3, 2,
	2, 2, 328, 326, 3, 2, 2, 2, 328, 329, 3, 2, 2, 2, 329, 331, 3, 2, 2, 2,
	330, 328, 3, 2, 2, 2, 331, 332, 7, 30, 2, 2, 332, 334, 7, 32, 2, 2, 333,
	321, 3, 2, 2, 2, 333, 323, 3, 2, 2, 2, 334, 13, 3, 2, 2, 2, 335, 337, 5,
	52, 27, 2, 336, 335, 3, 2, 2, 2, 336, 337, 3, 2, 2, 2, 337, 338, 3, 2,
	2, 2, 338, 340, 5, 16, 9, 2, 339, 341, 7, 146, 2, 2, 340, 339, 3, 2, 2,
	2, 340, 341, 3, 2, 2, 2, 341, 15, 3, 2, 2, 2, 342, 344, 7, 31, 2, 2, 343,
	342, 3, 2, 2, 2, 343, 344, 3, 2, 2, 2, 344, 346, 3, 2, 2, 2, 345, 347,
	5, 56, 29, 2, 346, 345, 3, 2, 2, 2, 346, 347, 3, 2, 2, 2, 347, 349, 3,
	2, 2, 2, 348, 350, 5, 58, 30, 2, 349, 348, 3, 2, 2, 2, 349, 350, 3, 2,
	2, 2, 350, 355, 3, 2, 2, 2, 351, 356, 5, 18, 10, 2, 352, 356, 5, 20, 11,
	2, 353, 356, 5, 22, 12, 2, 354, 356, 5, 24, 13, 2, 355, 351, 3, 2, 2, 2,
	355, 352, 3, 2, 2, 2, 355, 353, 3, 2, 2, 2, 355, 354, 3, 2, 2, 2, 356,
	17, 3, 2, 2, 2, 357, 359, 5, 232, 117, 2, 358, 360, 5, 26, 14, 2, 359,
	358, 3, 2, 2, 2, 359, 360, 3, 2, 2, 2, 360, 361, 3, 2, 2, 2, 361, 366,
	5, 140, 71, 2, 362, 363, 7, 145, 2, 2, 363, 365, 5, 140, 71, 2, 364, 362,
	3, 2, 2, 2, 365, 368, 3, 2, 2, 2, 366, 364, 3, 2, 2, 2, 366, 367, 3, 2,
	2, 2, 367, 371, 3, 2, 2, 2, 368, 366, 3, 2, 2, 2, 369, 370, 7, 122, 2,
	2, 370, 372, 5, 134, 68, 2, 371, 369, 3, 2, 2, 2, 371, 372, 3, 2, 2, 2,
	372, 19, 3, 2, 2, 2, 373, 374, 5, 232, 117, 2, 374, 382, 5, 138, 70, 2,
	375, 377, 7, 145, 2, 2, 376, 378, 5, 232, 117, 2, 377, 376, 3, 2, 2, 2,
	377, 378, 3, 2, 2, 2, 378, 379, 3, 2, 2, 2, 379, 381, 5, 138, 70, 2, 380,
	375, 3, 2, 2, 2, 381, 384, 3, 2, 2, 2, 382, 380, 3, 2, 2, 2, 382, 383,
	3, 2, 2, 2, 383, 21, 3, 2, 2, 2, 384, 382, 3, 2, 2, 2, 385, 387, 5, 232,
	117, 2, 386, 388, 5, 26, 14, 2, 387, 386, 3, 2, 2, 2, 387, 388, 3, 2, 2,
	2, 388, 389, 3, 2, 2, 2, 389, 391, 5, 218, 110, 2, 390, 392, 5, 28, 15,
	2, 391, 390, 3, 2, 2, 2, 391, 392, 3, 2, 2, 2, 392, 400, 3, 2, 2, 2, 393,
	395, 7, 122, 2, 2, 394, 393, 3, 2, 2, 2, 394, 395, 3, 2, 2, 2, 395, 396,
	3, 2, 2, 2, 396, 397, 7, 138, 2, 2, 397, 398, 5, 64, 33, 2, 398, 399, 7,
	139, 2, 2, 399, 401, 3, 2, 2, 2, 400, 394, 3, 2, 2, 2, 400, 401, 3, 2,
	2, 2, 401, 23, 3, 2, 2, 2, 402, 403, 7, 56, 2, 2, 403, 408, 5, 210, 106,
	2, 404, 405, 7, 147, 2, 2, 405, 406, 5, 64, 33, 2, 406, 407, 7, 148, 2,
	2, 407, 409, 3, 2, 2, 2, 408, 404, 3, 2, 2, 2, 408, 409, 3, 2, 2, 2, 409,
	25, 3, 2, 2, 2, 410, 411, 7, 138, 2, 2, 411, 412, 7, 156, 2, 2, 412, 413,
	7, 139, 2, 2, 413, 27, 3, 2, 2, 2, 414, 415, 7, 140, 2, 2, 415, 449, 7,
	141, 2, 2, 416, 445, 7, 140, 2, 2, 417, 419, 9, 3, 2, 2, 418, 417, 3, 2,
	2, 2, 418, 419, 3, 2, 2, 2, 419, 420, 3, 2, 2, 2, 420, 426, 7, 156, 2,
	2, 421, 423, 7, 42, 2, 2, 422, 424, 9, 3, 2, 2, 423, 422, 3, 2, 2, 2, 423,
	424, 3, 2, 2, 2, 424, 425, 3, 2, 2, 2, 425, 427, 7, 156, 2, 2, 426, 421,
	3, 2, 2, 2, 426, 427, 3, 2, 2, 2, 427, 442, 3, 2, 2, 2, 428, 430, 7, 145,
	2, 2, 429, 431, 9, 3, 2, 2, 430, 429, 3, 2, 2, 2, 430, 431, 3, 2, 2, 2,
	431, 432, 3, 2, 2, 2, 432, 438, 7, 156, 2, 2, 433, 435, 7, 42, 2, 2, 434,
	436, 9, 3, 2, 2, 435, 434, 3, 2, 2, 2, 435, 436, 3, 2, 2, 2, 436, 437,
	3, 2, 2, 2, 437, 439, 7, 156, 2, 2, 438, 433, 3, 2, 2, 2, 438, 439, 3,
	2, 2, 2, 439, 441, 3, 2, 2, 2, 440, 428, 3, 2, 2, 2, 441, 444, 3, 2, 2,
	2, 442, 440, 3, 2, 2, 2, 442, 443, 3, 2, 2, 2, 443, 446, 3, 2, 2, 2, 444,
	442, 3, 2, 2, 2, 445, 418, 3, 2, 2, 2, 445, 446, 3, 2, 2, 2, 446, 447,
	3, 2, 2, 2, 447, 449, 7, 141, 2, 2, 448, 414, 3, 2, 2, 2, 448, 416, 3,
	2, 2, 2, 449, 29, 3, 2, 2, 2, 450, 452, 5, 52, 27, 2, 451, 450, 3, 2, 2,
	2, 451, 452, 3, 2, 2, 2, 452, 453, 3, 2, 2, 2, 453, 454, 7, 118, 2, 2,
	454, 455, 5, 16, 9, 2, 455, 31, 3, 2, 2, 2, 456, 458, 5, 30, 16, 2, 457,
	459, 7, 146, 2, 2, 458, 457, 3, 2, 2, 2, 458, 459, 3, 2, 2, 2, 459, 33,
	3, 2, 2, 2, 460, 462, 5, 56, 29, 2, 461, 460, 3, 2, 2, 2, 461, 462, 3,
	2, 2, 2, 462, 464, 3, 2, 2, 2, 463, 465, 5, 58, 30, 2, 464, 463, 3, 2,
	2, 2, 464, 465, 3, 2, 2, 2, 465, 469, 3, 2, 2, 2, 466, 467, 7, 36, 2, 2,
	467, 470, 5, 232, 117, 2, 468, 470, 7, 37, 2, 2, 469, 466, 3, 2, 2, 2,
	469, 468, 3, 2, 2, 2, 470, 471, 3, 2, 2, 2, 471, 472, 5, 220, 111, 2, 472,
	474, 7, 147, 2, 2, 473, 475, 5, 40, 21, 2, 474, 473, 3, 2, 2, 2, 474, 475,
	3, 2, 2, 2, 475, 476, 3, 2, 2, 2, 476, 477, 7, 148, 2, 2, 477, 478, 5,
	36, 19, 2, 478, 35, 3, 2, 2, 2, 479, 480, 7, 99, 2, 2, 480, 481, 7, 70,
	2, 2, 481, 482, 5, 220, 111, 2, 482, 483, 7, 96, 2, 2, 483, 484, 9, 4,
	2, 2, 484, 505, 3, 2, 2, 2, 485, 486, 7, 96, 2, 2, 486, 490, 9, 4, 2, 2,
	487, 488, 7, 99, 2, 2, 488, 489, 7, 70, 2, 2, 489, 491, 9, 4, 2, 2, 490,
	487, 3, 2, 2, 2, 490, 491, 3, 2, 2, 2, 491, 493, 3, 2, 2, 2, 492, 485,
	3, 2, 2, 2, 492, 493, 3, 2, 2, 2, 493, 505, 3, 2, 2, 2, 494, 495, 7, 98,
	2, 2, 495, 496, 7, 99, 2, 2, 496, 497, 7, 70, 2, 2, 497, 499, 9, 4, 2,
	2, 498, 494, 3, 2, 2, 2, 498, 499, 3, 2, 2, 2, 499, 502, 3, 2, 2, 2, 500,
	501, 7, 100, 2, 2, 501, 503, 5, 220, 111, 2, 502, 500, 3, 2, 2, 2, 502,
	503, 3, 2, 2, 2, 503, 505, 3, 2, 2, 2, 504, 479, 3, 2, 2, 2, 504, 492,
	3, 2, 2, 2, 504, 498, 3, 2, 2, 2, 505, 37, 3, 2, 2, 2, 506, 508, 7, 38,
	2, 2, 507, 506, 3, 2, 2, 2, 507, 508, 3, 2, 2, 2, 508, 510, 3, 2, 2, 2,
	509, 511, 7, 44, 2, 2, 510, 509, 3, 2, 2, 2, 510, 511, 3, 2, 2, 2, 511,
	512, 3, 2, 2, 2, 512, 514, 5, 232, 117, 2, 513, 515, 5, 26, 14, 2, 514,
	513, 3, 2, 2, 2, 514, 515, 3, 2, 2, 2, 515, 516, 3, 2, 2, 2, 516, 518,
	5, 220, 111, 2, 517, 519, 5, 28, 15, 2, 518, 517, 3, 2, 2, 2, 518, 519,
	3, 2, 2, 2, 519, 39, 3, 2, 2, 2, 520, 525, 5, 38, 20, 2, 521, 522, 7, 145,
	2, 2, 522, 524, 5, 38, 20, 2, 523, 521, 3, 2, 2, 2, 524, 527, 3, 2, 2,
	2, 525, 523, 3, 2, 2, 2, 525, 526, 3, 2, 2, 2, 526, 530, 3, 2, 2, 2, 527,
	525, 3, 2, 2, 2, 528, 529, 7, 145, 2, 2, 529, 531, 7, 153, 2, 2, 530, 528,
	3, 2, 2, 2, 530, 531, 3, 2, 2, 2, 531, 41, 3, 2, 2, 2, 532, 533, 9, 5,
	2, 2, 533, 537, 7, 39, 2, 2, 534, 536, 5, 34, 18, 2, 535, 534, 3, 2, 2,
	2, 536, 539, 3, 2, 2, 2, 537, 535, 3, 2, 2, 2, 537, 538, 3, 2, 2, 2, 538,
	540, 3, 2, 2, 2, 539, 537, 3, 2, 2, 2, 540, 541, 7, 30, 2, 2, 541, 542,
	7, 39, 2, 2, 542, 43, 3, 2, 2, 2, 543, 545, 5, 52, 27, 2, 544, 543, 3,
	2, 2, 2, 544, 545, 3, 2, 2, 2, 545, 547, 3, 2, 2, 2, 546, 548, 5, 58, 30,
	2, 547, 546, 3, 2, 2, 2, 547, 548, 3, 2, 2, 2, 548, 552, 3, 2, 2, 2, 549,
	550, 7, 36, 2, 2, 550, 553, 5, 232, 117, 2, 551, 553, 7, 37, 2, 2, 552,
	549, 3, 2, 2, 2, 552, 551, 3, 2, 2, 2, 553, 554, 3, 2, 2, 2, 554, 555,
	5, 220, 111, 2, 555, 557, 7, 147, 2, 2, 556, 558, 5, 40, 21, 2, 557, 556,
	3, 2, 2, 2, 557, 558, 3, 2, 2, 2, 558, 559, 3, 2, 2, 2, 559, 562, 7, 148,
	2, 2, 560, 561, 7, 100, 2, 2, 561, 563, 5, 220, 111, 2, 562, 560, 3, 2,
	2, 2, 562, 563, 3, 2, 2, 2, 563, 565, 3, 2, 2, 2, 564, 566, 7, 146, 2,
	2, 565, 564, 3, 2, 2, 2, 565, 566, 3, 2, 2, 2, 566, 573, 3, 2, 2, 2, 567,
	569, 5, 82, 42, 2, 568, 570, 7, 146, 2, 2, 569, 568, 3, 2, 2, 2, 569, 570,
	3, 2, 2, 2, 570, 572, 3, 2, 2, 2, 571, 567, 3, 2, 2, 2, 572, 575, 3, 2,
	2, 2, 573, 571, 3, 2, 2, 2, 573, 574, 3, 2, 2, 2, 574, 576, 3, 2, 2, 2,
	575, 573, 3, 2, 2, 2, 576, 577, 7, 30, 2, 2, 577, 578, 9, 6, 2, 2, 578,
	45, 3, 2, 2, 2, 579, 580, 7, 41, 2, 2, 580, 585, 5, 210, 106, 2, 581, 582,
	7, 157, 2, 2, 582, 586, 9, 7, 2, 2, 583, 586, 7, 57, 2, 2, 584, 586, 7,
	71, 2, 2, 585, 581, 3, 2, 2, 2, 585, 583, 3, 2, 2, 2, 585, 584, 3, 2, 2,
	2, 585, 586, 3, 2, 2, 2, 586, 588, 3, 2, 2, 2, 587, 589, 7, 146, 2, 2,
	588, 587, 3, 2, 2, 2, 588, 589, 3, 2, 2, 2, 589, 596, 3, 2, 2, 2, 590,
	592, 5, 82, 42, 2, 591, 593, 7, 146, 2, 2, 592, 591, 3, 2, 2, 2, 592, 593,
	3, 2, 2, 2, 593, 595, 3, 2, 2, 2, 594, 590, 3, 2, 2, 2, 595, 598, 3, 2,
	2, 2, 596, 594, 3, 2, 2, 2, 596, 597, 3, 2, 2, 2, 597, 599, 3, 2, 2, 2,
	598, 596, 3, 2, 2, 2, 599, 600, 7, 30, 2, 2, 600, 601, 7, 41, 2, 2, 601,
	47, 3, 2, 2, 2, 602, 606, 7, 56, 2, 2, 603, 607, 5, 220, 111, 2, 604, 607,
	7, 80, 2, 2, 605, 607, 7, 81, 2, 2, 606, 603, 3, 2, 2, 2, 606, 604, 3,
	2, 2, 2, 606, 605, 3, 2, 2, 2, 607, 609, 3, 2, 2, 2, 608, 610, 5, 220,
	111, 2, 609, 608, 3, 2, 2, 2, 609, 610, 3, 2, 2, 2, 610, 616, 3, 2, 2,
	2, 611, 613, 7, 147, 2, 2, 612, 614, 5, 40, 21, 2, 613, 612, 3, 2, 2, 2,
	613, 614, 3, 2, 2, 2, 614, 615, 3, 2, 2, 2, 615, 617, 7, 148, 2, 2, 616,
	611, 3, 2, 2, 2, 616, 617, 3, 2, 2, 2, 617, 629, 3, 2, 2, 2, 618, 619,
	7, 56, 2, 2, 619, 620, 7, 40, 2, 2, 620, 621, 5, 232, 117, 2, 621, 622,
	5, 220, 111, 2, 622, 624, 7, 147, 2, 2, 623, 625, 5, 40, 21, 2, 624, 623,
	3, 2, 2, 2, 624, 625, 3, 2, 2, 2, 625, 626, 3, 2, 2, 2, 626, 627, 7, 148,
	2, 2, 627, 629, 3, 2, 2, 2, 628, 602, 3, 2, 2, 2, 628, 618, 3, 2, 2, 2,
	629, 49, 3, 2, 2, 2, 630, 633, 7, 56, 2, 2, 631, 632, 7, 40, 2, 2, 632,
	634, 5, 232, 117, 2, 633, 631, 3, 2, 2, 2, 633, 634, 3, 2, 2, 2, 634, 638,
	3, 2, 2, 2, 635, 636, 5, 220, 111, 2, 636, 637, 7, 132, 2, 2, 637, 639,
	3, 2, 2, 2, 638, 635, 3, 2, 2, 2, 638, 639, 3, 2, 2, 2, 639, 643, 3, 2,
	2, 2, 640, 644, 5, 220, 111, 2, 641, 644, 7, 57, 2, 2, 642, 644, 7, 71,
	2, 2, 643, 640, 3, 2, 2, 2, 643, 641, 3, 2, 2, 2, 643, 642, 3, 2, 2, 2,
	644, 650, 3, 2, 2, 2, 645, 647, 7, 147, 2, 2, 646, 648, 5, 40, 21, 2, 647,
	646, 3, 2, 2, 2, 647, 648, 3, 2, 2, 2, 648, 649, 3, 2, 2, 2, 649, 651,
	7, 148, 2, 2, 650, 645, 3, 2, 2, 2, 650, 651, 3, 2, 2, 2, 651, 653, 3,
	2, 2, 2, 652, 654, 7, 146, 2, 2, 653, 652, 3, 2, 2, 2, 653, 654, 3, 2,
	2, 2, 654, 661, 3, 2, 2, 2, 655, 657, 5, 82, 42, 2, 656, 658, 7, 146, 2,
	2, 657, 656, 3, 2, 2, 2, 657, 658, 3, 2, 2, 2, 658, 660, 3, 2, 2, 2, 659,
	655, 3, 2, 2, 2, 660, 663, 3, 2, 2, 2, 661, 659, 3, 2, 2, 2, 661, 662,
	3, 2, 2, 2, 662, 664, 3, 2, 2, 2, 663, 661, 3, 2, 2, 2, 664, 665, 7, 30,
	2, 2, 665, 666, 7, 56, 2, 2, 666, 51, 3, 2, 2, 2, 667, 668, 9, 8, 2, 2,
	668, 53, 3, 2, 2, 2, 669, 670, 5, 52, 27, 2, 670, 671, 7, 149, 2, 2, 671,
	55, 3, 2, 2, 2, 672, 673, 9, 9, 2, 2, 673, 57, 3, 2, 2, 2, 674, 675, 9,
	10, 2, 2, 675, 59, 3, 2, 2, 2, 676, 677, 8, 31, 1, 2, 677, 697, 5, 154,
	78, 2, 678, 697, 5, 62, 32, 2, 679, 697, 5, 156, 79, 2, 680, 681, 7, 138,
	2, 2, 681, 686, 5, 60, 31, 2, 682, 683, 7, 145, 2, 2, 683, 685, 5, 60,
	31, 2, 684, 682, 3, 2, 2, 2, 685, 688, 3, 2, 2, 2, 686, 684, 3, 2, 2, 2,
	686, 687, 3, 2, 2, 2, 687, 689, 3, 2, 2, 2, 688, 686, 3, 2, 2, 2, 689,
	690, 7, 139, 2, 2, 690, 697, 3, 2, 2, 2, 691, 692, 7, 147, 2, 2, 692, 693,
	5, 60, 31, 2, 693, 694, 7, 148, 2, 2, 694, 697, 3, 2, 2, 2, 695, 697, 5,
	66, 34, 2, 696, 676, 3, 2, 2, 2, 696, 678, 3, 2, 2, 2, 696, 679, 3, 2,
	2, 2, 696, 680, 3, 2, 2, 2, 696, 691, 3, 2, 2, 2, 696, 695, 3, 2, 2, 2,
	697, 703, 3, 2, 2, 2, 698, 699, 12, 5, 2, 2, 699, 700, 9, 11, 2, 2, 700,
	702, 5, 60, 31, 6, 701, 698, 3, 2, 2, 2, 702, 705, 3, 2, 2, 2, 703, 701,
	3, 2, 2, 2, 703, 704, 3, 2, 2, 2, 704, 61, 3, 2, 2, 2, 705, 703, 3, 2,
	2, 2, 706, 711, 5, 212, 107, 2, 707, 708, 7, 128, 2, 2, 708, 710, 5, 212,
	107, 2, 709, 707, 3, 2, 2, 2, 710, 713, 3, 2, 2, 2, 711, 709, 3, 2, 2,
	2, 711, 712, 3, 2, 2, 2, 712, 721, 3, 2, 2, 2, 713, 711, 3, 2, 2, 2, 714,
	721, 7, 160, 2, 2, 715, 721, 7, 156, 2, 2, 716, 721, 7, 26, 2, 2, 717,
	721, 7, 27, 2, 2, 718, 721, 7, 158, 2, 2, 719, 721, 7, 159, 2, 2, 720,
	706, 3, 2, 2, 2, 720, 714, 3, 2, 2, 2, 720, 715, 3, 2, 2, 2, 720, 716,
	3, 2, 2, 2, 720, 717, 3, 2, 2, 2, 720, 718, 3, 2, 2, 2, 720, 719, 3, 2,
	2, 2, 721, 63, 3, 2, 2, 2, 722, 724, 7, 44, 2, 2, 723, 722, 3, 2, 2, 2,
	723, 724, 3, 2, 2, 2, 724, 725, 3, 2, 2, 2, 725, 733, 5, 60, 31, 2, 726,
	728, 7, 145, 2, 2, 727, 729, 7, 44, 2, 2, 728, 727, 3, 2, 2, 2, 728, 729,
	3, 2, 2, 2, 729, 730, 3, 2, 2, 2, 730, 732, 5, 60, 31, 2, 731, 726, 3,
	2, 2, 2, 732, 735, 3, 2, 2, 2, 733, 731, 3, 2, 2, 2, 733, 734, 3, 2, 2,
	2, 734, 65, 3, 2, 2, 2, 735, 733, 3, 2, 2, 2, 736, 745, 5, 80, 41, 2, 737,
	745, 5, 78, 40, 2, 738, 745, 5, 76, 39, 2, 739, 745, 5, 68, 35, 2, 740,
	741, 7, 147, 2, 2, 741, 742, 5, 66, 34, 2, 742, 743, 7, 148, 2, 2, 743,
	745, 3, 2, 2, 2, 744, 736, 3, 2, 2, 2, 744, 737, 3, 2, 2, 2, 744, 738,
	3, 2, 2, 2, 744, 739, 3, 2, 2, 2, 744, 740, 3, 2, 2, 2, 745, 67, 3, 2,
	2, 2, 746, 751, 5, 70, 36, 2, 747, 748, 7, 90, 2, 2, 748, 750, 5, 70, 36,
	2, 749, 747, 3, 2, 2, 2, 750, 753, 3, 2, 2, 2, 751, 749, 3, 2, 2, 2, 751,
	752, 3, 2, 2, 2, 752, 759, 3, 2, 2, 2, 753, 751, 3, 2, 2, 2, 754, 755,
	7, 147, 2, 2, 755, 756, 5, 66, 34, 2, 756, 757, 7, 148, 2, 2, 757, 759,
	3, 2, 2, 2, 758, 746, 3, 2, 2, 2, 758, 754, 3, 2, 2, 2, 759, 69, 3, 2,
	2, 2, 760, 765, 5, 72, 37, 2, 761, 762, 7, 91, 2, 2, 762, 764, 5, 72, 37,
	2, 763, 761, 3, 2, 2, 2, 764, 767, 3, 2, 2, 2, 765, 763, 3, 2, 2, 2, 765,
	766, 3, 2, 2, 2, 766, 773, 3, 2, 2, 2, 767, 765, 3, 2, 2, 2, 768, 769,
	7, 147, 2, 2, 769, 770, 5, 66, 34, 2, 770, 771, 7, 148, 2, 2, 771, 773,
	3, 2, 2, 2, 772, 760, 3, 2, 2, 2, 772, 768, 3, 2, 2, 2, 773, 71, 3, 2,
	2, 2, 774, 776, 7, 92, 2, 2, 775, 774, 3, 2, 2, 2, 775, 776, 3, 2, 2, 2,
	776, 777, 3, 2, 2, 2, 777, 783, 5, 74, 38, 2, 778, 779, 7, 147, 2, 2, 779,
	780, 5, 66, 34, 2, 780, 781, 7, 148, 2, 2, 781, 783, 3, 2, 2, 2, 782, 775,
	3, 2, 2, 2, 782, 778, 3, 2, 2, 2, 783, 73, 3, 2, 2, 2, 784, 787, 5, 76,
	39, 2, 785, 786, 9, 12, 2, 2, 786, 788, 5, 76, 39, 2, 787, 785, 3, 2, 2,
	2, 787, 788, 3, 2, 2, 2, 788, 794, 3, 2, 2, 2, 789, 790, 7, 147, 2, 2,
	790, 791, 5, 66, 34, 2, 791, 792, 7, 148, 2, 2, 792, 794, 3, 2, 2, 2, 793,
	784, 3, 2, 2, 2, 793, 789, 3, 2, 2, 2, 794, 75, 3, 2, 2, 2, 795, 800, 5,
	78, 40, 2, 796, 797, 9, 3, 2, 2, 797, 799, 5, 78, 40, 2, 798, 796, 3, 2,
	2, 2, 799, 802, 3, 2, 2, 2, 800, 798, 3, 2, 2, 2, 800, 801, 3, 2, 2, 2,
	801, 808, 3, 2, 2, 2, 802, 800, 3, 2, 2, 2, 803, 804, 7, 147, 2, 2, 804,
	805, 5, 66, 34, 2, 805, 806, 7, 148, 2, 2, 806, 808, 3, 2, 2, 2, 807, 795,
	3, 2, 2, 2, 807, 803, 3, 2, 2, 2, 808, 77, 3, 2, 2, 2, 809, 814, 5, 80,
	41, 2, 810, 811, 9, 13, 2, 2, 811, 813, 5, 80, 41, 2, 812, 810, 3, 2, 2,
	2, 813, 816, 3, 2, 2, 2, 814, 812, 3, 2, 2, 2, 814, 815, 3, 2, 2, 2, 815,
	822, 3, 2, 2, 2, 816, 814, 3, 2, 2, 2, 817, 818, 7, 147, 2, 2, 818, 819,
	5, 66, 34, 2, 819, 820, 7, 148, 2, 2, 820, 822, 3, 2, 2, 2, 821, 809, 3,
	2, 2, 2, 821, 817, 3, 2, 2, 2, 822, 79, 3, 2, 2, 2, 823, 843, 7, 160, 2,
	2, 824, 826, 9, 3, 2, 2, 825, 824, 3, 2, 2, 2, 825, 826, 3, 2, 2, 2, 826,
	830, 3, 2, 2, 2, 827, 831, 5, 140, 71, 2, 828, 831, 5, 222, 112, 2, 829,
	831, 5, 62, 32, 2, 830, 827, 3, 2, 2, 2, 830, 828, 3, 2, 2, 2, 830, 829,
	3, 2, 2, 2, 831, 843, 3, 2, 2, 2, 832, 843, 5, 156, 79, 2, 833, 834, 7,
	138, 2, 2, 834, 835, 5, 156, 79, 2, 835, 836, 7, 139, 2, 2, 836, 843, 3,
	2, 2, 2, 837, 838, 7, 147, 2, 2, 838, 839, 5, 80, 41, 2, 839, 840, 7, 148,
	2, 2, 840, 843, 3, 2, 2, 2, 841, 843, 5, 108, 55, 2, 842, 823, 3, 2, 2,
	2, 842, 825, 3, 2, 2, 2, 842, 832, 3, 2, 2, 2, 842, 833, 3, 2, 2, 2, 842,
	837, 3, 2, 2, 2, 842, 841, 3, 2, 2, 2, 843, 81, 3, 2, 2, 2, 844, 885, 5,
	132, 67, 2, 845, 885, 5, 84, 43, 2, 846, 885, 5, 190, 96, 2, 847, 885,
	5, 116, 59, 2, 848, 885, 5, 86, 44, 2, 849, 850, 7, 88, 2, 2, 850, 885,
	5, 220, 111, 2, 851, 885, 5, 138, 70, 2, 852, 885, 5, 92, 47, 2, 853, 885,
	5, 118, 60, 2, 854, 885, 5, 90, 46, 2, 855, 885, 5, 184, 93, 2, 856, 885,
	5, 196, 99, 2, 857, 885, 5, 156, 79, 2, 858, 885, 5, 162, 82, 2, 859, 885,
	5, 168, 85, 2, 860, 885, 5, 120, 61, 2, 861, 885, 5, 32, 17, 2, 862, 885,
	5, 14, 8, 2, 863, 885, 5, 162, 82, 2, 864, 885, 5, 182, 92, 2, 865, 885,
	5, 180, 91, 2, 866, 885, 5, 172, 87, 2, 867, 885, 5, 176, 89, 2, 868, 885,
	5, 208, 105, 2, 869, 885, 5, 86, 44, 2, 870, 885, 5, 88, 45, 2, 871, 885,
	5, 200, 101, 2, 872, 885, 5, 142, 72, 2, 873, 885, 5, 178, 90, 2, 874,
	885, 5, 192, 97, 2, 875, 885, 5, 198, 100, 2, 876, 885, 5, 94, 48, 2, 877,
	885, 5, 114, 58, 2, 878, 885, 5, 124, 63, 2, 879, 885, 5, 130, 66, 2, 880,
	885, 5, 122, 62, 2, 881, 885, 5, 126, 64, 2, 882, 885, 5, 128, 65, 2, 883,
	885, 5, 160, 81, 2, 884, 844, 3, 2, 2, 2, 884, 845, 3, 2, 2, 2, 884, 846,
	3, 2, 2, 2, 884, 847, 3, 2, 2, 2, 884, 848, 3, 2, 2, 2, 884, 849, 3, 2,
	2, 2, 884, 851, 3, 2, 2, 2, 884, 852, 3, 2, 2, 2, 884, 853, 3, 2, 2, 2,
	884, 854, 3, 2, 2, 2, 884, 855, 3, 2, 2, 2, 884, 856, 3, 2, 2, 2, 884,
	857, 3, 2, 2, 2, 884, 858, 3, 2, 2, 2, 884, 859, 3, 2, 2, 2, 884, 860,
	3, 2, 2, 2, 884, 861, 3, 2, 2, 2, 884, 862, 3, 2, 2, 2, 884, 863, 3, 2,
	2, 2, 884, 864, 3, 2, 2, 2, 884, 865, 3, 2, 2, 2, 884, 866, 3, 2, 2, 2,
	884, 867, 3, 2, 2, 2, 884, 868, 3, 2, 2, 2, 884, 869, 3, 2, 2, 2, 884,
	870, 3, 2, 2, 2, 884, 871, 3, 2, 2, 2, 884, 872, 3, 2, 2, 2, 884, 873,
	3, 2, 2, 2, 884, 874, 3, 2, 2, 2, 884, 875, 3, 2, 2, 2, 884, 876, 3, 2,
	2, 2, 884, 877, 3, 2, 2, 2, 884, 878, 3, 2, 2, 2, 884, 879, 3, 2, 2, 2,
	884, 880, 3, 2, 2, 2, 884, 881, 3, 2, 2, 2, 884, 882, 3, 2, 2, 2, 884,
	883, 3, 2, 2, 2, 885, 83, 3, 2, 2, 2, 886, 887, 9, 8, 2, 2, 887, 888, 7,
	149, 2, 2, 888, 85, 3, 2, 2, 2, 889, 890, 7, 78, 2, 2, 890, 891, 5, 60,
	31, 2, 891, 87, 3, 2, 2, 2, 892, 893, 7, 58, 2, 2, 893, 900, 5, 140, 71,
	2, 894, 896, 5, 82, 42, 2, 895, 897, 7, 146, 2, 2, 896, 895, 3, 2, 2, 2,
	896, 897, 3, 2, 2, 2, 897, 899, 3, 2, 2, 2, 898, 894, 3, 2, 2, 2, 899,
	902, 3, 2, 2, 2, 900, 898, 3, 2, 2, 2, 900, 901, 3, 2, 2, 2, 901, 903,
	3, 2, 2, 2, 902, 900, 3, 2, 2, 2, 903, 904, 5, 140, 71, 2, 904, 911, 7,
	149, 2, 2, 905, 907, 5, 82, 42, 2, 906, 908, 7, 146, 2, 2, 907, 906, 3,
	2, 2, 2, 907, 908, 3, 2, 2, 2, 908, 910, 3, 2, 2, 2, 909, 905, 3, 2, 2,
	2, 910, 913, 3, 2, 2, 2, 911, 909, 3, 2, 2, 2, 911, 912, 3, 2, 2, 2, 912,
	89, 3, 2, 2, 2, 913, 911, 3, 2, 2, 2, 914, 926, 5, 150, 76, 2, 915, 926,
	5, 144, 73, 2, 916, 926, 5, 142, 72, 2, 917, 926, 5, 152, 77, 2, 918, 926,
	5, 154, 78, 2, 919, 926, 5, 16, 9, 2, 920, 926, 5, 162, 82, 2, 921, 926,
	5, 170, 86, 2, 922, 926, 5, 174, 88, 2, 923, 926, 5, 194, 98, 2, 924, 926,
	5, 138, 70, 2, 925, 914, 3, 2, 2, 2, 925, 915, 3, 2, 2, 2, 925, 916, 3,
	2, 2, 2, 925, 917, 3, 2, 2, 2, 925, 918, 3, 2, 2, 2, 925, 919, 3, 2, 2,
	2, 925, 920, 3, 2, 2, 2, 925, 921, 3, 2, 2, 2, 925, 922, 3, 2, 2, 2, 925,
	923, 3, 2, 2, 2, 925, 924, 3, 2, 2, 2, 926, 91, 3, 2, 2, 2, 927, 934, 7,
	63, 2, 2, 928, 930, 5, 82, 42, 2, 929, 931, 7, 146, 2, 2, 930, 929, 3,
	2, 2, 2, 930, 931, 3, 2, 2, 2, 931, 933, 3, 2, 2, 2, 932, 928, 3, 2, 2,
	2, 933, 936, 3, 2, 2, 2, 934, 932, 3, 2, 2, 2, 934, 935, 3, 2, 2, 2, 935,
	952, 3, 2, 2, 2, 936, 934, 3, 2, 2, 2, 937, 938, 7, 76, 2, 2, 938, 939,
	7, 147, 2, 2, 939, 940, 5, 16, 9, 2, 940, 947, 7, 148, 2, 2, 941, 943,
	5, 82, 42, 2, 942, 944, 7, 146, 2, 2, 943, 942, 3, 2, 2, 2, 943, 944, 3,
	2, 2, 2, 944, 946, 3, 2, 2, 2, 945, 941, 3, 2, 2, 2, 946, 949, 3, 2, 2,
	2, 947, 945, 3, 2, 2, 2, 947, 948, 3, 2, 2, 2, 948, 951, 3, 2, 2, 2, 949,
	947, 3, 2, 2, 2, 950, 937, 3, 2, 2, 2, 951, 954, 3, 2, 2, 2, 952, 950,
	3, 2, 2, 2, 952, 953, 3, 2, 2, 2, 953, 965, 3, 2, 2, 2, 954, 952, 3, 2,
	2, 2, 955, 962, 7, 77, 2, 2, 956, 958, 5, 82, 42, 2, 957, 959, 7, 146,
	2, 2, 958, 957, 3, 2, 2, 2, 958, 959, 3, 2, 2, 2, 959, 961, 3, 2, 2, 2,
	960, 956, 3, 2, 2, 2, 961, 964, 3, 2, 2, 2, 962, 960, 3, 2, 2, 2, 962,
	963, 3, 2, 2, 2, 963, 966, 3, 2, 2, 2, 964, 962, 3, 2, 2, 2, 965, 955,
	3, 2, 2, 2, 965, 966, 3, 2, 2, 2, 966, 967, 3, 2, 2, 2, 967, 968, 7, 30,
	2, 2, 968, 969, 7, 63, 2, 2, 969, 93, 3, 2, 2, 2, 970, 976, 5, 96, 49,
	2, 971, 976, 5, 100, 51, 2, 972, 976, 5, 102, 52, 2, 973, 976, 5, 104,
	53, 2, 974, 976, 5, 106, 54, 2, 975, 970, 3, 2, 2, 2, 975, 971, 3, 2, 2,
	2, 975, 972, 3, 2, 2, 2, 975, 973, 3, 2, 2, 2, 975, 974, 3, 2, 2, 2, 976,
	95, 3, 2, 2, 2, 977, 978, 7, 87, 2, 2, 978, 979, 7, 108, 2, 2, 979, 980,
	5, 140, 71, 2, 980, 981, 7, 147, 2, 2, 981, 986, 5, 140, 71, 2, 982, 983,
	7, 145, 2, 2, 983, 985, 5, 140, 71, 2, 984, 982, 3, 2, 2, 2, 985, 988,
	3, 2, 2, 2, 986, 984, 3, 2, 2, 2, 986, 987, 3, 2, 2, 2, 987, 989, 3, 2,
	2, 2, 988, 986, 3, 2, 2, 2, 989, 990, 7, 148, 2, 2, 990, 991, 7, 109, 2,
	2, 991, 992, 7, 147, 2, 2, 992, 997, 5, 98, 50, 2, 993, 994, 7, 145, 2,
	2, 994, 996, 5, 98, 50, 2, 995, 993, 3, 2, 2, 2, 996, 999, 3, 2, 2, 2,
	997, 995, 3, 2, 2, 2, 997, 998, 3, 2, 2, 2, 998, 1000, 3, 2, 2, 2, 999,
	997, 3, 2, 2, 2, 1000, 1002, 7, 148, 2, 2, 1001, 1003, 7, 146, 2, 2, 1002,
	1001, 3, 2, 2, 2, 1002, 1003, 3, 2, 2, 2, 1003, 97, 3, 2, 2, 2, 1004, 1007,
	5, 62, 32, 2, 1005, 1007, 5, 222, 112, 2, 1006, 1004, 3, 2, 2, 2, 1006,
	1005, 3, 2, 2, 2, 1007, 99, 3, 2, 2, 2, 1008, 1009, 7, 86, 2, 2, 1009,
	1010, 7, 43, 2, 2, 1010, 1011, 5, 140, 71, 2, 1011, 1013, 5, 110, 56, 2,
	1012, 1014, 7, 146, 2, 2, 1013, 1012, 3, 2, 2, 2, 1013, 1014, 3, 2, 2,
	2, 1014, 101, 3, 2, 2, 2, 1015, 1016, 9, 14, 2, 2, 1016, 1017, 5, 112,
	57, 2, 1017, 1018, 7, 108, 2, 2, 1018, 1023, 5, 222, 112, 2, 1019, 1020,
	7, 145, 2, 2, 1020, 1022, 5, 222, 112, 2, 1021, 1019, 3, 2, 2, 2, 1022,
	1025, 3, 2, 2, 2, 1023, 1021, 3, 2, 2, 2, 1023, 1024, 3, 2, 2, 2, 1024,
	1026, 3, 2, 2, 2, 1025, 1023, 3, 2, 2, 2, 1026, 1027, 7, 43, 2, 2, 1027,
	1032, 5, 140, 71, 2, 1028, 1029, 7, 145, 2, 2, 1029, 1031, 5, 140, 71,
	2, 1030, 1028, 3, 2, 2, 2, 1031, 1034, 3, 2, 2, 2, 1032, 1030, 3, 2, 2,
	2, 1032, 1033, 3, 2, 2, 2, 1033, 1036, 3, 2, 2, 2, 1034, 1032, 3, 2, 2,
	2, 1035, 1037, 5, 110, 56, 2, 1036, 1035, 3, 2, 2, 2, 1036, 1037, 3, 2,
	2, 2, 1037, 1040, 3, 2, 2, 2, 1038, 1039, 7, 82, 2, 2, 1039, 1041, 5, 140,
	71, 2, 1040, 1038, 3, 2, 2, 2, 1040, 1041, 3, 2, 2, 2, 1041, 1043, 3, 2,
	2, 2, 1042, 1044, 7, 146, 2, 2, 1043, 1042, 3, 2, 2, 2, 1043, 1044, 3,
	2, 2, 2, 1044, 103, 3, 2, 2, 2, 1045, 1046, 9, 15, 2, 2, 1046, 1047, 5,
	140, 71, 2, 1047, 1048, 7, 115, 2, 2, 1048, 1053, 5, 108, 55, 2, 1049,
	1050, 7, 145, 2, 2, 1050, 1052, 5, 108, 55, 2, 1051, 1049, 3, 2, 2, 2,
	1052, 1055, 3, 2, 2, 2, 1053, 1051, 3, 2, 2, 2, 1053, 1054, 3, 2, 2, 2,
	1054, 1057, 3, 2, 2, 2, 1055, 1053, 3, 2, 2, 2, 1056, 1058, 5, 110, 56,
	2, 1057, 1056, 3, 2, 2, 2, 1057, 1058, 3, 2, 2, 2, 1058, 105, 3, 2, 2,
	2, 1059, 1065, 9, 16, 2, 2, 1060, 1063, 7, 82, 2, 2, 1061, 1064, 7, 103,
	2, 2, 1062, 1064, 5, 220, 111, 2, 1063, 1061, 3, 2, 2, 2, 1063, 1062, 3,
	2, 2, 2, 1064, 1066, 3, 2, 2, 2, 1065, 1060, 3, 2, 2, 2, 1065, 1066, 3,
	2, 2, 2, 1066, 1067, 3, 2, 2, 2, 1067, 1068, 7, 146, 2, 2, 1068, 107, 3,
	2, 2, 2, 1069, 1070, 5, 140, 71, 2, 1070, 1071, 7, 122, 2, 2, 1071, 1072,
	5, 222, 112, 2, 1072, 1081, 3, 2, 2, 2, 1073, 1074, 5, 140, 71, 2, 1074,
	1076, 7, 66, 2, 2, 1075, 1077, 7, 92, 2, 2, 1076, 1075, 3, 2, 2, 2, 1076,
	1077, 3, 2, 2, 2, 1077, 1078, 3, 2, 2, 2, 1078, 1079, 7, 45, 2, 2, 1079,
	1081, 3, 2, 2, 2, 1080, 1069, 3, 2, 2, 2, 1080, 1073, 3, 2, 2, 2, 1081,
	109, 3, 2, 2, 2, 1082, 1083, 7, 110, 2, 2, 1083, 1088, 5, 108, 55, 2, 1084,
	1085, 7, 145, 2, 2, 1085, 1087, 5, 108, 55, 2, 1086, 1084, 3, 2, 2, 2,
	1087, 1090, 3, 2, 2, 2, 1088, 1086, 3, 2, 2, 2, 1088, 1089, 3, 2, 2, 2,
	1089, 1094, 3, 2, 2, 2, 1090, 1088, 3, 2, 2, 2, 1091, 1092, 7, 110, 2,
	2, 1092, 1094, 5, 68, 35, 2, 1093, 1082, 3, 2, 2, 2, 1093, 1091, 3, 2,
	2, 2, 1094, 111, 3, 2, 2, 2, 1095, 1100, 5, 140, 71, 2, 1096, 1097, 7,
	145, 2, 2, 1097, 1099, 5, 140, 71, 2, 1098, 1096, 3, 2, 2, 2, 1099, 1102,
	3, 2, 2, 2, 1100, 1098, 3, 2, 2, 2, 1100, 1101, 3, 2, 2, 2, 1101, 1105,
	3, 2, 2, 2, 1102, 1100, 3, 2, 2, 2, 1103, 1105, 5, 156, 79, 2, 1104, 1095,
	3, 2, 2, 2, 1104, 1103, 3, 2, 2, 2, 1105, 113, 3, 2, 2, 2, 1106, 1108,
	7, 111, 2, 2, 1107, 1109, 7, 82, 2, 2, 1108, 1107, 3, 2, 2, 2, 1108, 1109,
	3, 2, 2, 2, 1109, 1112, 3, 2, 2, 2, 1110, 1113, 7, 103, 2, 2, 1111, 1113,
	5, 140, 71, 2, 1112, 1110, 3, 2, 2, 2, 1112, 1111, 3, 2, 2, 2, 1112, 1113,
	3, 2, 2, 2, 1113, 1115, 3, 2, 2, 2, 1114, 1116, 7, 146, 2, 2, 1115, 1114,
	3, 2, 2, 2, 1115, 1116, 3, 2, 2, 2, 1116, 115, 3, 2, 2, 2, 1117, 1119,
	7, 105, 2, 2, 1118, 1120, 7, 104, 2, 2, 1119, 1118, 3, 2, 2, 2, 1119, 1120,
	3, 2, 2, 2, 1120, 1123, 3, 2, 2, 2, 1121, 1124, 5, 140, 71, 2, 1122, 1124,
	5, 62, 32, 2, 1123, 1121, 3, 2, 2, 2, 1123, 1122, 3, 2, 2, 2, 1124, 1126,
	3, 2, 2, 2, 1125, 1127, 7, 146, 2, 2, 1126, 1125, 3, 2, 2, 2, 1126, 1127,
	3, 2, 2, 2, 1127, 1161, 3, 2, 2, 2, 1128, 1130, 7, 105, 2, 2, 1129, 1131,
	7, 104, 2, 2, 1130, 1129, 3, 2, 2, 2, 1130, 1131, 3, 2, 2, 2, 1131, 1132,
	3, 2, 2, 2, 1132, 1138, 5, 222, 112, 2, 1133, 1136, 7, 82, 2, 2, 1134,
	1137, 7, 103, 2, 2, 1135, 1137, 5, 140, 71, 2, 1136, 1134, 3, 2, 2, 2,
	1136, 1135, 3, 2, 2, 2, 1137, 1139, 3, 2, 2, 2, 1138, 1133, 3, 2, 2, 2,
	1138, 1139, 3, 2, 2, 2, 1139, 1140, 3, 2, 2, 2, 1140, 1141, 7, 146, 2,
	2, 1141, 1161, 3, 2, 2, 2, 1142, 1144, 7, 105, 2, 2, 1143, 1145, 7, 48,
	2, 2, 1144, 1143, 3, 2, 2, 2, 1144, 1145, 3, 2, 2, 2, 1145, 1146, 3, 2,
	2, 2, 1146, 1155, 5, 210, 106, 2, 1147, 1149, 7, 82, 2, 2, 1148, 1150,
	7, 102, 2, 2, 1149, 1148, 3, 2, 2, 2, 1149, 1150, 3, 2, 2, 2, 1150, 1153,
	3, 2, 2, 2, 1151, 1154, 7, 103, 2, 2, 1152, 1154, 5, 210, 106, 2, 1153,
	1151, 3, 2, 2, 2, 1153, 1152, 3, 2, 2, 2, 1154, 1156, 3, 2, 2, 2, 1155,
	1147, 3, 2, 2, 2, 1155, 1156, 3, 2, 2, 2, 1156, 1158, 3, 2, 2, 2, 1157,
	1159, 7, 146, 2, 2, 1158, 1157, 3, 2, 2, 2, 1158, 1159, 3, 2, 2, 2, 1159,
	1161, 3, 2, 2, 2, 1160, 1117, 3, 2, 2, 2, 1160, 1128, 3, 2, 2, 2, 1160,
	1142, 3, 2, 2, 2, 1161, 117, 3, 2, 2, 2, 1162, 1163, 7, 71, 2, 2, 1163,
	1164, 5, 140, 71, 2, 1164, 1165, 7, 146, 2, 2, 1165, 119, 3, 2, 2, 2, 1166,
	1167, 7, 106, 2, 2, 1167, 1169, 5, 140, 71, 2, 1168, 1170, 7, 48, 2, 2,
	1169, 1168, 3, 2, 2, 2, 1169, 1170, 3, 2, 2, 2, 1170, 1171, 3, 2, 2, 2,
	1171, 1172, 7, 107, 2, 2, 1172, 1173, 7, 70, 2, 2, 1173, 1175, 5, 140,
	71, 2, 1174, 1176, 7, 146, 2, 2, 1175, 1174, 3, 2, 2, 2, 1175, 1176, 3,
	2, 2, 2, 1176, 121, 3, 2, 2, 2, 1177, 1178, 7, 106, 2, 2, 1178, 1180, 5,
	140, 71, 2, 1179, 1181, 7, 48, 2, 2, 1180, 1179, 3, 2, 2, 2, 1180, 1181,
	3, 2, 2, 2, 1181, 1182, 3, 2, 2, 2, 1182, 1183, 7, 112, 2, 2, 1183, 1184,
	7, 70, 2, 2, 1184, 1185, 5, 140, 71, 2, 1185, 1186, 7, 146, 2, 2, 1186,
	123, 3, 2, 2, 2, 1187, 1189, 7, 57, 2, 2, 1188, 1190, 7, 48, 2, 2, 1189,
	1188, 3, 2, 2, 2, 1189, 1190, 3, 2, 2, 2, 1190, 1191, 3, 2, 2, 2, 1191,
	1197, 5, 140, 71, 2, 1192, 1195, 7, 82, 2, 2, 1193, 1196, 7, 102, 2, 2,
	1194, 1196, 5, 210, 106, 2, 1195, 1193, 3, 2, 2, 2, 1195, 1194, 3, 2, 2,
	2, 1196, 1198, 3, 2, 2, 2, 1197, 1192, 3, 2, 2, 2, 1197, 1198, 3, 2, 2,
	2, 1198, 1200, 3, 2, 2, 2, 1199, 1201, 5, 210, 106, 2, 1200, 1199, 3, 2,
	2, 2, 1200, 1201, 3, 2, 2, 2, 1201, 1203, 3, 2, 2, 2, 1202, 1204, 7, 146,
	2, 2, 1203, 1202, 3, 2, 2, 2, 1203, 1204, 3, 2, 2, 2, 1204, 125, 3, 2,
	2, 2, 1205, 1206, 7, 71, 2, 2, 1206, 1207, 5, 140, 71, 2, 1207, 127, 3,
	2, 2, 2, 1208, 1209, 7, 114, 2, 2, 1209, 1210, 5, 140, 71, 2, 1210, 1211,
	7, 108, 2, 2, 1211, 1213, 5, 222, 112, 2, 1212, 1214, 7, 146, 2, 2, 1213,
	1212, 3, 2, 2, 2, 1213, 1214, 3, 2, 2, 2, 1214, 1226, 3, 2, 2, 2, 1215,
	1216, 7, 114, 2, 2, 1216, 1217, 5, 210, 106, 2, 1217, 1219, 7, 82, 2, 2,
	1218, 1220, 7, 102, 2, 2, 1219, 1218, 3, 2, 2, 2, 1219, 1220, 3, 2, 2,
	2, 1220, 1221, 3, 2, 2, 2, 1221, 1223, 5, 210, 106, 2, 1222, 1224, 7, 146,
	2, 2, 1223, 1222, 3, 2, 2, 2, 1223, 1224, 3, 2, 2, 2, 1224, 1226, 3, 2,
	2, 2, 1225, 1208, 3, 2, 2, 2, 1225, 1215, 3, 2, 2, 2, 1226, 129, 3, 2,
	2, 2, 1227, 1228, 7, 113, 2, 2, 1228, 1229, 5, 140, 71, 2, 1229, 1230,
	7, 43, 2, 2, 1230, 1231, 5, 222, 112, 2, 1231, 1234, 7, 82, 2, 2, 1232,
	1235, 7, 103, 2, 2, 1233, 1235, 5, 220, 111, 2, 1234, 1232, 3, 2, 2, 2,
	1234, 1233, 3, 2, 2, 2, 1235, 1236, 3, 2, 2, 2, 1236, 1237, 7, 146, 2,
	2, 1237, 131, 3, 2, 2, 2, 1238, 1243, 5, 140, 71, 2, 1239, 1240, 7, 128,
	2, 2, 1240, 1244, 7, 128, 2, 2, 1241, 1242, 7, 129, 2, 2, 1242, 1244, 7,
	129, 2, 2, 1243, 1239, 3, 2, 2, 2, 1243, 1241, 3, 2, 2, 2, 1244, 133, 3,
	2, 2, 2, 1245, 1260, 5, 62, 32, 2, 1246, 1251, 5, 60, 31, 2, 1247, 1248,
	7, 145, 2, 2, 1248, 1250, 5, 60, 31, 2, 1249, 1247, 3, 2, 2, 2, 1250, 1253,
	3, 2, 2, 2, 1251, 1249, 3, 2, 2, 2, 1251, 1252, 3, 2, 2, 2, 1252, 1260,
	3, 2, 2, 2, 1253, 1251, 3, 2, 2, 2, 1254, 1260, 5, 156, 79, 2, 1255, 1260,
	5, 136, 69, 2, 1256, 1260, 5, 172, 87, 2, 1257, 1260, 5, 162, 82, 2, 1258,
	1260, 5, 168, 85, 2, 1259, 1245, 3, 2, 2, 2, 1259, 1246, 3, 2, 2, 2, 1259,
	1254, 3, 2, 2, 2, 1259, 1255, 3, 2, 2, 2, 1259, 1256, 3, 2, 2, 2, 1259,
	1257, 3, 2, 2, 2, 1259, 1258, 3, 2, 2, 2, 1260, 135, 3, 2, 2, 2, 1261,
	1262, 5, 210, 106, 2, 1262, 1263, 7, 157, 2, 2, 1263, 1265, 3, 2, 2, 2,
	1264, 1261, 3, 2, 2, 2, 1264, 1265, 3, 2, 2, 2, 1265, 1266, 3, 2, 2, 2,
	1266, 1267, 7, 88, 2, 2, 1267, 1269, 7, 147, 2, 2, 1268, 1270, 5, 64, 33,
	2, 1269, 1268, 3, 2, 2, 2, 1269, 1270, 3, 2, 2, 2, 1270, 1271, 3, 2, 2,
	2, 1271, 1278, 7, 148, 2, 2, 1272, 1273, 7, 88, 2, 2, 1273, 1274, 5, 210,
	106, 2, 1274, 1275, 7, 108, 2, 2, 1275, 1276, 5, 210, 106, 2, 1276, 1278,
	3, 2, 2, 2, 1277, 1264, 3, 2, 2, 2, 1277, 1272, 3, 2, 2, 2, 1278, 137,
	3, 2, 2, 2, 1279, 1280, 7, 154, 2, 2, 1280, 1281, 5, 140, 71, 2, 1281,
	1282, 7, 122, 2, 2, 1282, 1283, 5, 222, 112, 2, 1283, 1284, 7, 146, 2,
	2, 1284, 1297, 3, 2, 2, 2, 1285, 1286, 5, 156, 79, 2, 1286, 1287, 7, 157,
	2, 2, 1287, 1289, 3, 2, 2, 2, 1288, 1285, 3, 2, 2, 2, 1288, 1289, 3, 2,
	2, 2, 1289, 1290, 3, 2, 2, 2, 1290, 1291, 5, 140, 71, 2, 1291, 1292, 9,
	17, 2, 2, 1292, 1294, 5, 134, 68, 2, 1293, 1295, 7, 146, 2, 2, 1294, 1293,
	3, 2, 2, 2, 1294, 1295, 3, 2, 2, 2, 1295, 1297, 3, 2, 2, 2, 1296, 1279,
	3, 2, 2, 2, 1296, 1288, 3, 2, 2, 2, 1297, 139, 3, 2, 2, 2, 1298, 1299,
	5, 210, 106, 2, 1299, 141, 3, 2, 2, 2, 1300, 1302, 7, 89, 2, 2, 1301, 1303,
	5, 60, 31, 2, 1302, 1301, 3, 2, 2, 2, 1302, 1303, 3, 2, 2, 2, 1303, 143,
	3, 2, 2, 2, 1304, 1305, 5, 140, 71, 2, 1305, 1306, 7, 157, 2, 2, 1306,
	1308, 3, 2, 2, 2, 1307, 1304, 3, 2, 2, 2, 1308, 1311, 3, 2, 2, 2, 1309,
	1307, 3, 2, 2, 2, 1309, 1310, 3, 2, 2, 2, 1310, 1313, 3, 2, 2, 2, 1311,
	1309, 3, 2, 2, 2, 1312, 1314, 7, 36, 2, 2, 1313, 1312, 3, 2, 2, 2, 1313,
	1314, 3, 2, 2, 2, 1314, 1316, 3, 2, 2, 2, 1315, 1317, 7, 83, 2, 2, 1316,
	1315, 3, 2, 2, 2, 1316, 1317, 3, 2, 2, 2, 1317, 1319, 3, 2, 2, 2, 1318,
	1320, 7, 48, 2, 2, 1319, 1318, 3, 2, 2, 2, 1319, 1320, 3, 2, 2, 2, 1320,
	1322, 3, 2, 2, 2, 1321, 1323, 7, 56, 2, 2, 1322, 1321, 3, 2, 2, 2, 1322,
	1323, 3, 2, 2, 2, 1323, 1324, 3, 2, 2, 2, 1324, 1325, 5, 146, 74, 2, 1325,
	1327, 7, 147, 2, 2, 1326, 1328, 5, 64, 33, 2, 1327, 1326, 3, 2, 2, 2, 1327,
	1328, 3, 2, 2, 2, 1328, 1329, 3, 2, 2, 2, 1329, 1337, 7, 148, 2, 2, 1330,
	1333, 7, 157, 2, 2, 1331, 1334, 5, 140, 71, 2, 1332, 1334, 5, 144, 73,
	2, 1333, 1331, 3, 2, 2, 2, 1333, 1332, 3, 2, 2, 2, 1334, 1336, 3, 2, 2,
	2, 1335, 1330, 3, 2, 2, 2, 1336, 1339, 3, 2, 2, 2, 1337, 1335, 3, 2, 2,
	2, 1337, 1338, 3, 2, 2, 2, 1338, 145, 3, 2, 2, 2, 1339, 1337, 3, 2, 2,
	2, 1340, 1346, 7, 83, 2, 2, 1341, 1346, 7, 57, 2, 2, 1342, 1346, 7, 71,
	2, 2, 1343, 1346, 5, 140, 71, 2, 1344, 1346, 5, 234, 118, 2, 1345, 1340,
	3, 2, 2, 2, 1345, 1341, 3, 2, 2, 2, 1345, 1342, 3, 2, 2, 2, 1345, 1343,
	3, 2, 2, 2, 1345, 1344, 3, 2, 2, 2, 1346, 147, 3, 2, 2, 2, 1347, 1348,
	5, 146, 74, 2, 1348, 1350, 7, 157, 2, 2, 1349, 1351, 7, 56, 2, 2, 1350,
	1349, 3, 2, 2, 2, 1350, 1351, 3, 2, 2, 2, 1351, 1353, 3, 2, 2, 2, 1352,
	1354, 7, 83, 2, 2, 1353, 1352, 3, 2, 2, 2, 1353, 1354, 3, 2, 2, 2, 1354,
	1356, 3, 2, 2, 2, 1355, 1357, 7, 48, 2, 2, 1356, 1355, 3, 2, 2, 2, 1356,
	1357, 3, 2, 2, 2, 1357, 1358, 3, 2, 2, 2, 1358, 1359, 5, 144, 73, 2, 1359,
	149, 3, 2, 2, 2, 1360, 1361, 5, 210, 106, 2, 1361, 1362, 7, 157, 2, 2,
	1362, 1363, 7, 84, 2, 2, 1363, 1364, 7, 56, 2, 2, 1364, 1365, 5, 144, 73,
	2, 1365, 1382, 3, 2, 2, 2, 1366, 1367, 5, 210, 106, 2, 1367, 1377, 7, 157,
	2, 2, 1368, 1370, 7, 48, 2, 2, 1369, 1371, 7, 56, 2, 2, 1370, 1369, 3,
	2, 2, 2, 1370, 1371, 3, 2, 2, 2, 1371, 1378, 3, 2, 2, 2, 1372, 1374, 7,
	56, 2, 2, 1373, 1375, 7, 84, 2, 2, 1374, 1373, 3, 2, 2, 2, 1374, 1375,
	3, 2, 2, 2, 1375, 1376, 3, 2, 2, 2, 1376, 1378, 7, 48, 2, 2, 1377, 1368,
	3, 2, 2, 2, 1377, 1372, 3, 2, 2, 2, 1378, 1379, 3, 2, 2, 2, 1379, 1380,
	5, 144, 73, 2, 1380, 1382, 3, 2, 2, 2, 1381, 1360, 3, 2, 2, 2, 1381, 1366,
	3, 2, 2, 2, 1382, 151, 3, 2, 2, 2, 1383, 1384, 7, 57, 2, 2, 1384, 1385,
	7, 147, 2, 2, 1385, 1386, 5, 64, 33, 2, 1386, 1387, 7, 148, 2, 2, 1387,
	153, 3, 2, 2, 2, 1388, 1389, 7, 71, 2, 2, 1389, 1390, 7, 147, 2, 2, 1390,
	1391, 5, 64, 33, 2, 1391, 1392, 7, 148, 2, 2, 1392, 1398, 3, 2, 2, 2, 1393,
	1395, 7, 94, 2, 2, 1394, 1396, 7, 71, 2, 2, 1395, 1394, 3, 2, 2, 2, 1395,
	1396, 3, 2, 2, 2, 1396, 1398, 3, 2, 2, 2, 1397, 1388, 3, 2, 2, 2, 1397,
	1393, 3, 2, 2, 2, 1398, 155, 3, 2, 2, 2, 1399, 1408, 5, 144, 73, 2, 1400,
	1408, 5, 158, 80, 2, 1401, 1408, 5, 136, 69, 2, 1402, 1408, 5, 164, 83,
	2, 1403, 1408, 5, 148, 75, 2, 1404, 1408, 5, 150, 76, 2, 1405, 1408, 5,
	152, 77, 2, 1406, 1408, 5, 154, 78, 2, 1407, 1399, 3, 2, 2, 2, 1407, 1400,
	3, 2, 2, 2, 1407, 1401, 3, 2, 2, 2, 1407, 1402, 3, 2, 2, 2, 1407, 1403,
	3, 2, 2, 2, 1407, 1404, 3, 2, 2, 2, 1407, 1405, 3, 2, 2, 2, 1407, 1406,
	3, 2, 2, 2, 1408, 157, 3, 2, 2, 2, 1409, 1410, 7, 132, 2, 2, 1410, 1411,
	5, 144, 73, 2, 1411, 159, 3, 2, 2, 2, 1412, 1413, 7, 93, 2, 2, 1413, 1422,
	5, 140, 71, 2, 1414, 1420, 7, 132, 2, 2, 1415, 1421, 7, 80, 2, 2, 1416,
	1421, 7, 81, 2, 2, 1417, 1421, 7, 57, 2, 2, 1418, 1421, 7, 71, 2, 2, 1419,
	1421, 5, 210, 106, 2, 1420, 1415, 3, 2, 2, 2, 1420, 1416, 3, 2, 2, 2, 1420,
	1417, 3, 2, 2, 2, 1420, 1418, 3, 2, 2, 2, 1420, 1419, 3, 2, 2, 2, 1421,
	1423, 3, 2, 2, 2, 1422, 1414, 3, 2, 2, 2, 1422, 1423, 3, 2, 2, 2, 1423,
	1425, 3, 2, 2, 2, 1424, 1426, 7, 146, 2, 2, 1425, 1424, 3, 2, 2, 2, 1425,
	1426, 3, 2, 2, 2, 1426, 161, 3, 2, 2, 2, 1427, 1431, 7, 93, 2, 2, 1428,
	1429, 5, 220, 111, 2, 1429, 1430, 7, 142, 2, 2, 1430, 1432, 3, 2, 2, 2,
	1431, 1428, 3, 2, 2, 2, 1431, 1432, 3, 2, 2, 2, 1432, 1435, 3, 2, 2, 2,
	1433, 1436, 5, 226, 114, 2, 1434, 1436, 5, 228, 115, 2, 1435, 1433, 3,
	2, 2, 2, 1435, 1434, 3, 2, 2, 2, 1436, 1461, 3, 2, 2, 2, 1437, 1438, 7,
	93, 2, 2, 1438, 1439, 7, 95, 2, 2, 1439, 1446, 7, 132, 2, 2, 1440, 1447,
	7, 56, 2, 2, 1441, 1447, 7, 80, 2, 2, 1442, 1447, 7, 81, 2, 2, 1443, 1447,
	7, 57, 2, 2, 1444, 1447, 7, 71, 2, 2, 1445, 1447, 5, 210, 106, 2, 1446,
	1440, 3, 2, 2, 2, 1446, 1441, 3, 2, 2, 2, 1446, 1442, 3, 2, 2, 2, 1446,
	1443, 3, 2, 2, 2, 1446, 1444, 3, 2, 2, 2, 1446, 1445, 3, 2, 2, 2, 1447,
	1449, 3, 2, 2, 2, 1448, 1450, 5, 156, 79, 2, 1449, 1448, 3, 2, 2, 2, 1449,
	1450, 3, 2, 2, 2, 1450, 1461, 3, 2, 2, 2, 1451, 1452, 7, 95, 2, 2, 1452,
	1454, 7, 132, 2, 2, 1453, 1455, 9, 18, 2, 2, 1454, 1453, 3, 2, 2, 2, 1454,
	1455, 3, 2, 2, 2, 1455, 1457, 3, 2, 2, 2, 1456, 1458, 7, 83, 2, 2, 1457,
	1456, 3, 2, 2, 2, 1457, 1458, 3, 2, 2, 2, 1458, 1459, 3, 2, 2, 2, 1459,
	1461, 5, 156, 79, 2, 1460, 1427, 3, 2, 2, 2, 1460, 1437, 3, 2, 2, 2, 1460,
	1451, 3, 2, 2, 2, 1461, 163, 3, 2, 2, 2, 1462, 1463, 5, 220, 111, 2, 1463,
	1464, 7, 157, 2, 2, 1464, 1466, 3, 2, 2, 2, 1465, 1462, 3, 2, 2, 2, 1465,
	1466, 3, 2, 2, 2, 1466, 1467, 3, 2, 2, 2, 1467, 1468, 5, 220, 111, 2, 1468,
	1470, 7, 132, 2, 2, 1469, 1471, 9, 18, 2, 2, 1470, 1469, 3, 2, 2, 2, 1470,
	1471, 3, 2, 2, 2, 1471, 1473, 3, 2, 2, 2, 1472, 1474, 9, 19, 2, 2, 1473,
	1472, 3, 2, 2, 2, 1473, 1474, 3, 2, 2, 2, 1474, 1475, 3, 2, 2, 2, 1475,
	1476, 5, 156, 79, 2, 1476, 165, 3, 2, 2, 2, 1477, 1479, 5, 140, 71, 2,
	1478, 1477, 3, 2, 2, 2, 1478, 1479, 3, 2, 2, 2, 1479, 1480, 3, 2, 2, 2,
	1480, 1482, 7, 56, 2, 2, 1481, 1483, 5, 156, 79, 2, 1482, 1481, 3, 2, 2,
	2, 1482, 1483, 3, 2, 2, 2, 1483, 167, 3, 2, 2, 2, 1484, 1485, 5, 166, 84,
	2, 1485, 169, 3, 2, 2, 2, 1486, 1487, 7, 80, 2, 2, 1487, 1488, 7, 82, 2,
	2, 1488, 1507, 5, 60, 31, 2, 1489, 1491, 7, 80, 2, 2, 1490, 1492, 7, 82,
	2, 2, 1491, 1490, 3, 2, 2, 2, 1491, 1492, 3, 2, 2, 2, 1492, 1496, 3, 2,
	2, 2, 1493, 1494, 5, 220, 111, 2, 1494, 1495, 7, 157, 2, 2, 1495, 1497,
	3, 2, 2, 2, 1496, 1493, 3, 2, 2, 2, 1496, 1497, 3, 2, 2, 2, 1497, 1498,
	3, 2, 2, 2, 1498, 1504, 5, 232, 117, 2, 1499, 1501, 7, 147, 2, 2, 1500,
	1502, 5, 64, 33, 2, 1501, 1500, 3, 2, 2, 2, 1501, 1502, 3, 2, 2, 2, 1502,
	1503, 3, 2, 2, 2, 1503, 1505, 7, 148, 2, 2, 1504, 1499, 3, 2, 2, 2, 1504,
	1505, 3, 2, 2, 2, 1505, 1507, 3, 2, 2, 2, 1506, 1486, 3, 2, 2, 2, 1506,
	1489, 3, 2, 2, 2, 1507, 171, 3, 2, 2, 2, 1508, 1509, 5, 170, 86, 2, 1509,
	173, 3, 2, 2, 2, 1510, 1511, 7, 81, 2, 2, 1511, 1512, 5, 60, 31, 2, 1512,
	175, 3, 2, 2, 2, 1513, 1514, 5, 174, 88, 2, 1514, 177, 3, 2, 2, 2, 1515,
	1516, 7, 70, 2, 2, 1516, 1517, 5, 140, 71, 2, 1517, 1518, 7, 122, 2, 2,
	1518, 1519, 5, 60, 31, 2, 1519, 1520, 7, 42, 2, 2, 1520, 1523, 5, 60, 31,
	2, 1521, 1522, 7, 75, 2, 2, 1522, 1524, 5, 60, 31, 2, 1523, 1521, 3, 2,
	2, 2, 1523, 1524, 3, 2, 2, 2, 1524, 1528, 3, 2, 2, 2, 1525, 1527, 5, 82,
	42, 2, 1526, 1525, 3, 2, 2, 2, 1527, 1530, 3, 2, 2, 2, 1528, 1526, 3, 2,
	2, 2, 1528, 1529, 3, 2, 2, 2, 1529, 1534, 3, 2, 2, 2, 1530, 1528, 3, 2,
	2, 2, 1531, 1535, 7, 72, 2, 2, 1532, 1533, 7, 30, 2, 2, 1533, 1535, 7,
	70, 2, 2, 1534, 1531, 3, 2, 2, 2, 1534, 1532, 3, 2, 2, 2, 1535, 179, 3,
	2, 2, 2, 1536, 1537, 7, 68, 2, 2, 1537, 1538, 9, 20, 2, 2, 1538, 1545,
	5, 66, 34, 2, 1539, 1541, 5, 82, 42, 2, 1540, 1542, 7, 146, 2, 2, 1541,
	1540, 3, 2, 2, 2, 1541, 1542, 3, 2, 2, 2, 1542, 1544, 3, 2, 2, 2, 1543,
	1539, 3, 2, 2, 2, 1544, 1547, 3, 2, 2, 2, 1545, 1543, 3, 2, 2, 2, 1545,
	1546, 3, 2, 2, 2, 1546, 1548, 3, 2, 2, 2, 1547, 1545, 3, 2, 2, 2, 1548,
	1549, 7, 73, 2, 2, 1549, 181, 3, 2, 2, 2, 1550, 1554, 7, 68, 2, 2, 1551,
	1553, 5, 82, 42, 2, 1552, 1551, 3, 2, 2, 2, 1553, 1556, 3, 2, 2, 2, 1554,
	1552, 3, 2, 2, 2, 1554, 1555, 3, 2, 2, 2, 1555, 1557, 3, 2, 2, 2, 1556,
	1554, 3, 2, 2, 2, 1557, 1558, 7, 73, 2, 2, 1558, 1559, 9, 20, 2, 2, 1559,
	1560, 5, 66, 34, 2, 1560, 183, 3, 2, 2, 2, 1561, 1562, 7, 60, 2, 2, 1562,
	1563, 5, 66, 34, 2, 1563, 1570, 7, 61, 2, 2, 1564, 1566, 5, 82, 42, 2,
	1565, 1567, 7, 146, 2, 2, 1566, 1565, 3, 2, 2, 2, 1566, 1567, 3, 2, 2,
	2, 1567, 1569, 3, 2, 2, 2, 1568, 1564, 3, 2, 2, 2, 1569, 1572, 3, 2, 2,
	2, 1570, 1568, 3, 2, 2, 2, 1570, 1571, 3, 2, 2, 2, 1571, 1576, 3, 2, 2,
	2, 1572, 1570, 3, 2, 2, 2, 1573, 1575, 5, 186, 94, 2, 1574, 1573, 3, 2,
	2, 2, 1575, 1578, 3, 2, 2, 2, 1576, 1574, 3, 2, 2, 2, 1576, 1577, 3, 2,
	2, 2, 1577, 1580, 3, 2, 2, 2, 1578, 1576, 3, 2, 2, 2, 1579, 1581, 5, 188,
	95, 2, 1580, 1579, 3, 2, 2, 2, 1580, 1581, 3, 2, 2, 2, 1581, 1582, 3, 2,
	2, 2, 1582, 1583, 7, 30, 2, 2, 1583, 1585, 7, 60, 2, 2, 1584, 1586, 7,
	146, 2, 2, 1585, 1584, 3, 2, 2, 2, 1585, 1586, 3, 2, 2, 2, 1586, 185, 3,
	2, 2, 2, 1587, 1588, 7, 62, 2, 2, 1588, 1589, 5, 66, 34, 2, 1589, 1596,
	7, 61, 2, 2, 1590, 1592, 5, 82, 42, 2, 1591, 1593, 7, 146, 2, 2, 1592,
	1591, 3, 2, 2, 2, 1592, 1593, 3, 2, 2, 2, 1593, 1595, 3, 2, 2, 2, 1594,
	1590, 3, 2, 2, 2, 1595, 1598, 3, 2, 2, 2, 1596, 1594, 3, 2, 2, 2, 1596,
	1597, 3, 2, 2, 2, 1597, 187, 3, 2, 2, 2, 1598, 1596, 3, 2, 2, 2, 1599,
	1606, 7, 59, 2, 2, 1600, 1602, 5, 82, 42, 2, 1601, 1603, 7, 146, 2, 2,
	1602, 1601, 3, 2, 2, 2, 1602, 1603, 3, 2, 2, 2, 1603, 1605, 3, 2, 2, 2,
	1604, 1600, 3, 2, 2, 2, 1605, 1608, 3, 2, 2, 2, 1606, 1604, 3, 2, 2, 2,
	1606, 1607, 3, 2, 2, 2, 1607, 189, 3, 2, 2, 2, 1608, 1606, 3, 2, 2, 2,
	1609, 1610, 7, 60, 2, 2, 1610, 1611, 5, 66, 34, 2, 1611, 1612, 7, 61, 2,
	2, 1612, 1615, 5, 82, 42, 2, 1613, 1614, 7, 59, 2, 2, 1614, 1616, 5, 82,
	42, 2, 1615, 1613, 3, 2, 2, 2, 1615, 1616, 3, 2, 2, 2, 1616, 1618, 3, 2,
	2, 2, 1617, 1619, 7, 146, 2, 2, 1618, 1617, 3, 2, 2, 2, 1618, 1619, 3,
	2, 2, 2, 1619, 191, 3, 2, 2, 2, 1620, 1621, 7, 67, 2, 2, 1621, 193, 3,
	2, 2, 2, 1622, 1623, 7, 67, 2, 2, 1623, 195, 3, 2, 2, 2, 1624, 1625, 5,
	228, 115, 2, 1625, 1626, 7, 157, 2, 2, 1626, 1628, 3, 2, 2, 2, 1627, 1624,
	3, 2, 2, 2, 1627, 1628, 3, 2, 2, 2, 1628, 1629, 3, 2, 2, 2, 1629, 1631,
	9, 19, 2, 2, 1630, 1632, 7, 56, 2, 2, 1631, 1630, 3, 2, 2, 2, 1631, 1632,
	3, 2, 2, 2, 1632, 1633, 3, 2, 2, 2, 1633, 1634, 5, 218, 110, 2, 1634, 1636,
	7, 147, 2, 2, 1635, 1637, 5, 64, 33, 2, 1636, 1635, 3, 2, 2, 2, 1636, 1637,
	3, 2, 2, 2, 1637, 1638, 3, 2, 2, 2, 1638, 1639, 7, 148, 2, 2, 1639, 197,
	3, 2, 2, 2, 1640, 1641, 7, 64, 2, 2, 1641, 199, 3, 2, 2, 2, 1642, 1643,
	7, 65, 2, 2, 1643, 1644, 7, 47, 2, 2, 1644, 1648, 5, 60, 31, 2, 1645, 1649,
	5, 204, 103, 2, 1646, 1649, 5, 206, 104, 2, 1647, 1649, 5, 202, 102, 2,
	1648, 1645, 3, 2, 2, 2, 1648, 1646, 3, 2, 2, 2, 1648, 1647, 3, 2, 2, 2,
	1649, 1650, 3, 2, 2, 2, 1650, 1648, 3, 2, 2, 2, 1650, 1651, 3, 2, 2, 2,
	1651, 1652, 3, 2, 2, 2, 1652, 1653, 7, 30, 2, 2, 1653, 1654, 7, 65, 2,
	2, 1654, 201, 3, 2, 2, 2, 1655, 1656, 7, 47, 2, 2, 1656, 1659, 5, 60, 31,
	2, 1657, 1658, 7, 42, 2, 2, 1658, 1660, 5, 60, 31, 2, 1659, 1657, 3, 2,
	2, 2, 1659, 1660, 3, 2, 2, 2, 1660, 1669, 3, 2, 2, 2, 1661, 1662, 7, 145,
	2, 2, 1662, 1665, 5, 60, 31, 2, 1663, 1664, 7, 42, 2, 2, 1664, 1666, 5,
	60, 31, 2, 1665, 1663, 3, 2, 2, 2, 1665, 1666, 3, 2, 2, 2, 1666, 1668,
	3, 2, 2, 2, 1667, 1661, 3, 2, 2, 2, 1668, 1671, 3, 2, 2, 2, 1669, 1667,
	3, 2, 2, 2, 1669, 1670, 3, 2, 2, 2, 1670, 1678, 3, 2, 2, 2, 1671, 1669,
	3, 2, 2, 2, 1672, 1674, 5, 82, 42, 2, 1673, 1675, 7, 146, 2, 2, 1674, 1673,
	3, 2, 2, 2, 1674, 1675, 3, 2, 2, 2, 1675, 1677, 3, 2, 2, 2, 1676, 1672,
	3, 2, 2, 2, 1677, 1680, 3, 2, 2, 2, 1678, 1676, 3, 2, 2, 2, 1678, 1679,
	3, 2, 2, 2, 1679, 203, 3, 2, 2, 2, 1680, 1678, 3, 2, 2, 2, 1681, 1682,
	7, 47, 2, 2, 1682, 1683, 7, 66, 2, 2, 1683, 1684, 9, 12, 2, 2, 1684, 1691,
	5, 60, 31, 2, 1685, 1687, 5, 82, 42, 2, 1686, 1688, 7, 146, 2, 2, 1687,
	1686, 3, 2, 2, 2, 1687, 1688, 3, 2, 2, 2, 1688, 1690, 3, 2, 2, 2, 1689,
	1685, 3, 2, 2, 2, 1690, 1693, 3, 2, 2, 2, 1691, 1689, 3, 2, 2, 2, 1691,
	1692, 3, 2, 2, 2, 1692, 205, 3, 2, 2, 2, 1693, 1691, 3, 2, 2, 2, 1694,
	1695, 7, 47, 2, 2, 1695, 1702, 7, 59, 2, 2, 1696, 1698, 5, 82, 42, 2, 1697,
	1699, 7, 146, 2, 2, 1698, 1697, 3, 2, 2, 2, 1698, 1699, 3, 2, 2, 2, 1699,
	1701, 3, 2, 2, 2, 1700, 1696, 3, 2, 2, 2, 1701, 1704, 3, 2, 2, 2, 1702,
	1700, 3, 2, 2, 2, 1702, 1703, 3, 2, 2, 2, 1703, 207, 3, 2, 2, 2, 1704,
	1702, 3, 2, 2, 2, 1705, 1706, 5, 220, 111, 2, 1706, 1707, 7, 149, 2, 2,
	1707, 209, 3, 2, 2, 2, 1708, 1713, 5, 218, 110, 2, 1709, 1710, 7, 157,
	2, 2, 1710, 1712, 5, 218, 110, 2, 1711, 1709, 3, 2, 2, 2, 1712, 1715, 3,
	2, 2, 2, 1713, 1711, 3, 2, 2, 2, 1713, 1714, 3, 2, 2, 2, 1714, 1717, 3,
	2, 2, 2, 1715, 1713, 3, 2, 2, 2, 1716, 1718, 5, 214, 108, 2, 1717, 1716,
	3, 2, 2, 2, 1717, 1718, 3, 2, 2, 2, 1718, 1726, 3, 2, 2, 2, 1719, 1720,
	7, 157, 2, 2, 1720, 1722, 5, 218, 110, 2, 1721, 1723, 5, 214, 108, 2, 1722,
	1721, 3, 2, 2, 2, 1722, 1723, 3, 2, 2, 2, 1723, 1725, 3, 2, 2, 2, 1724,
	1719, 3, 2, 2, 2, 1725, 1728, 3, 2, 2, 2, 1726, 1724, 3, 2, 2, 2, 1726,
	1727, 3, 2, 2, 2, 1727, 211, 3, 2, 2, 2, 1728, 1726, 3, 2, 2, 2, 1729,
	1738, 9, 4, 2, 2, 1730, 1734, 7, 128, 2, 2, 1731, 1735, 5, 140, 71, 2,
	1732, 1735, 7, 143, 2, 2, 1733, 1735, 7, 144, 2, 2, 1734, 1731, 3, 2, 2,
	2, 1734, 1732, 3, 2, 2, 2, 1734, 1733, 3, 2, 2, 2, 1735, 1737, 3, 2, 2,
	2, 1736, 1730, 3, 2, 2, 2, 1737, 1740, 3, 2, 2, 2, 1738, 1736, 3, 2, 2,
	2, 1738, 1739, 3, 2, 2, 2, 1739, 213, 3, 2, 2, 2, 1740, 1738, 3, 2, 2,
	2, 1741, 1744, 7, 140, 2, 2, 1742, 1745, 5, 210, 106, 2, 1743, 1745, 5,
	62, 32, 2, 1744, 1742, 3, 2, 2, 2, 1744, 1743, 3, 2, 2, 2, 1745, 1753,
	3, 2, 2, 2, 1746, 1749, 7, 145, 2, 2, 1747, 1750, 5, 210, 106, 2, 1748,
	1750, 5, 62, 32, 2, 1749, 1747, 3, 2, 2, 2, 1749, 1748, 3, 2, 2, 2, 1750,
	1752, 3, 2, 2, 2, 1751, 1746, 3, 2, 2, 2, 1752, 1755, 3, 2, 2, 2, 1753,
	1751, 3, 2, 2, 2, 1753, 1754, 3, 2, 2, 2, 1754, 1756, 3, 2, 2, 2, 1755,
	1753, 3, 2, 2, 2, 1756, 1757, 7, 141, 2, 2, 1757, 1771, 3, 2, 2, 2, 1758,
	1761, 7, 140, 2, 2, 1759, 1762, 5, 210, 106, 2, 1760, 1762, 5, 156, 79,
	2, 1761, 1759, 3, 2, 2, 2, 1761, 1760, 3, 2, 2, 2, 1761, 1762, 3, 2, 2,
	2, 1762, 1767, 3, 2, 2, 2, 1763, 1765, 5, 216, 109, 2, 1764, 1763, 3, 2,
	2, 2, 1764, 1765, 3, 2, 2, 2, 1765, 1766, 3, 2, 2, 2, 1766, 1768, 7, 156,
	2, 2, 1767, 1764, 3, 2, 2, 2, 1767, 1768, 3, 2, 2, 2, 1768, 1769, 3, 2,
	2, 2, 1769, 1771, 7, 141, 2, 2, 1770, 1741, 3, 2, 2, 2, 1770, 1758, 3,
	2, 2, 2, 1771, 215, 3, 2, 2, 2, 1772, 1773, 9, 21, 2, 2, 1773, 217, 3,
	2, 2, 2, 1774, 1792, 5, 220, 111, 2, 1775, 1792, 7, 85, 2, 2, 1776, 1792,
	7, 40, 2, 2, 1777, 1792, 7, 46, 2, 2, 1778, 1792, 7, 86, 2, 2, 1779, 1792,
	7, 57, 2, 2, 1780, 1792, 7, 71, 2, 2, 1781, 1792, 7, 58, 2, 2, 1782, 1792,
	7, 87, 2, 2, 1783, 1792, 7, 20, 2, 2, 1784, 1792, 7, 38, 2, 2, 1785, 1792,
	7, 103, 2, 2, 1786, 1792, 7, 80, 2, 2, 1787, 1792, 7, 109, 2, 2, 1788,
	1792, 7, 25, 2, 2, 1789, 1792, 7, 97, 2, 2, 1790, 1792, 7, 9, 2, 2, 1791,
	1774, 3, 2, 2, 2, 1791, 1775, 3, 2, 2, 2, 1791, 1776, 3, 2, 2, 2, 1791,
	1777, 3, 2, 2, 2, 1791, 1778, 3, 2, 2, 2, 1791, 1779, 3, 2, 2, 2, 1791,
	1780, 3, 2, 2, 2, 1791, 1781, 3, 2, 2, 2, 1791, 1782, 3, 2, 2, 2, 1791,
	1783, 3, 2, 2, 2, 1791, 1784, 3, 2, 2, 2, 1791, 1785, 3, 2, 2, 2, 1791,
	1786, 3, 2, 2, 2, 1791, 1787, 3, 2, 2, 2, 1791, 1788, 3, 2, 2, 2, 1791,
	1789, 3, 2, 2, 2, 1791, 1790, 3, 2, 2, 2, 1792, 219, 3, 2, 2, 2, 1793,
	1795, 7, 155, 2, 2, 1794, 1793, 3, 2, 2, 2, 1794, 1795, 3, 2, 2, 2, 1795,
	1796, 3, 2, 2, 2, 1796, 1797, 7, 161, 2, 2, 1797, 221, 3, 2, 2, 2, 1798,
	1799, 7, 149, 2, 2, 1799, 1800, 5, 210, 106, 2, 1800, 223, 3, 2, 2, 2,
	1801, 1811, 5, 230, 116, 2, 1802, 1808, 5, 220, 111, 2, 1803, 1805, 7,
	147, 2, 2, 1804, 1806, 5, 64, 33, 2, 1805, 1804, 3, 2, 2, 2, 1805, 1806,
	3, 2, 2, 2, 1806, 1807, 3, 2, 2, 2, 1807, 1809, 7, 148, 2, 2, 1808, 1803,
	3, 2, 2, 2, 1808, 1809, 3, 2, 2, 2, 1809, 1811, 3, 2, 2, 2, 1810, 1801,
	3, 2, 2, 2, 1810, 1802, 3, 2, 2, 2, 1811, 225, 3, 2, 2, 2, 1812, 1815,
	5, 210, 106, 2, 1813, 1815, 7, 88, 2, 2, 1814, 1812, 3, 2, 2, 2, 1814,
	1813, 3, 2, 2, 2, 1815, 1816, 3, 2, 2, 2, 1816, 1818, 7, 147, 2, 2, 1817,
	1819, 5, 64, 33, 2, 1818, 1817, 3, 2, 2, 2, 1818, 1819, 3, 2, 2, 2, 1819,
	1820, 3, 2, 2, 2, 1820, 1821, 7, 148, 2, 2, 1821, 227, 3, 2, 2, 2, 1822,
	1823, 5, 210, 106, 2, 1823, 229, 3, 2, 2, 2, 1824, 1825, 5, 220, 111, 2,
	1825, 1826, 7, 140, 2, 2, 1826, 1827, 5, 64, 33, 2, 1827, 1828, 7, 141,
	2, 2, 1828, 231, 3, 2, 2, 2, 1829, 1832, 5, 234, 118, 2, 1830, 1832, 5,
	220, 111, 2, 1831, 1829, 3, 2, 2, 2, 1831, 1830, 3, 2, 2, 2, 1832, 233,
	3, 2, 2, 2, 1833, 1834, 9, 22, 2, 2, 1834, 235, 3, 2, 2, 2, 275, 239, 244,
	260, 266, 268, 274, 282, 287, 290, 296, 300, 302, 313, 315, 328, 333, 336,
	340, 343, 346, 349, 355, 359, 366, 371, 377, 382, 387, 391, 394, 400, 408,
	418, 423, 426, 430, 435, 438, 442, 445, 448, 451, 458, 461, 464, 469, 474,
	490, 492, 498, 502, 504, 507, 510, 514, 518, 525, 530, 537, 544, 547, 552,
	557, 562, 565, 569, 573, 585, 588, 592, 596, 606, 609, 613, 616, 624, 628,
	633, 638, 643, 647, 650, 653, 657, 661, 686, 696, 703, 711, 720, 723, 728,
	733, 744, 751, 758, 765, 772, 775, 782, 787, 793, 800, 807, 814, 821, 825,
	830, 842, 884, 896, 900, 907, 911, 925, 930, 934, 943, 947, 952, 958, 962,
	965, 975, 986, 997, 1002, 1006, 1013, 1023, 1032, 1036, 1040, 1043, 1053,
	1057, 1063, 1065, 1076, 1080, 1088, 1093, 1100, 1104, 1108, 1112, 1115,
	1119, 1123, 1126, 1130, 1136, 1138, 1144, 1149, 1153, 1155, 1158, 1160,
	1169, 1175, 1180, 1189, 1195, 1197, 1200, 1203, 1213, 1219, 1223, 1225,
	1234, 1243, 1251, 1259, 1264, 1269, 1277, 1288, 1294, 1296, 1302, 1309,
	1313, 1316, 1319, 1322, 1327, 1333, 1337, 1345, 1350, 1353, 1356, 1370,
	1374, 1377, 1381, 1395, 1397, 1407, 1420, 1422, 1425, 1431, 1435, 1446,
	1449, 1454, 1457, 1460, 1465, 1470, 1473, 1478, 1482, 1491, 1496, 1501,
	1504, 1506, 1523, 1528, 1534, 1541, 1545, 1554, 1566, 1570, 1576, 1580,
	1585, 1592, 1596, 1602, 1606, 1615, 1618, 1627, 1631, 1636, 1648, 1650,
	1659, 1665, 1669, 1674, 1678, 1687, 1691, 1698, 1702, 1713, 1717, 1722,
	1726, 1734, 1738, 1744, 1749, 1753, 1761, 1764, 1767, 1770, 1791, 1794,
	1805, 1808, 1810, 1814, 1818, 1831,
}
var literalNames = []string{
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "'='", "'>'", "'>='", "'<'",
	"'<='", "'<>'", "'+'", "'-'", "'+='", "'-='", "'::'", "'*'", "'/'", "'*='",
	"'/='", "'^'", "'{'", "'}'", "'['", "']'", "'`'", "", "", "','", "';'",
	"'('", "')'", "':'", "'\"'", "'???'", "'||'", "'...'", "'@'", "'_'", "",
	"'.'",
}
var symbolicNames = []string{
	"", "ANY", "BLOB", "BOOLEAN", "BYTE", "CHARACTER", "CHAR", "DATE_TYPE",
	"DATETIME", "DECIMAL", "DEC", "DOUBLE", "INTEGER", "INT", "LONG", "LONGLONG",
	"REAL", "STRING", "TIME_TYPE", "UNSIGNEDINTEGER", "UINT", "UNSIGNEDLONG",
	"ULONG", "WINDOW", "TRUE", "FALSE", "GLOBAL", "SHARED", "END", "INDIRECT",
	"VARIABLES", "FORWARD", "PUBLIC", "PRIVATE", "FUNCTION", "SUBROUTINE",
	"READONLY", "PROTOTYPES", "TYPE", "ON", "TO", "FROM", "REF", "NULL_", "UPDATE",
	"CASE", "DYNAMIC", "WITHIN", "PRIVATEWRITE", "PROTECTED", "PRIVATEREAD",
	"PROTECTEDREAD", "PROTECTEDWRITE", "LOCAL", "EVENT", "OPEN", "GOTO", "ELSE",
	"IF", "THEN", "ELSEIF", "TRY", "EXIT", "CHOOSE", "IS", "CONTINUE", "DO",
	"WHILE", "FOR", "CLOSE", "NEXT", "LOOP", "UNTIL", "STEP", "CATCH", "FINALLY",
	"THROW", "RELEASE", "CREATE", "DESTROY", "USING", "POST", "TRIGGER", "SELECT",
	"DELETE", "INSERT", "DESCRIBE", "RETURN", "OR", "AND", "NOT", "CALL", "HALT",
	"SUPER", "LIBRARY", "SYSTEM", "RPCFUNC", "ALIAS", "THROWS", "AUTOINSTANTIATE",
	"DESCRIPTOR", "SQLCA", "IMMEDIATE", "EXECUTE", "DECLARE", "PROCEDURE",
	"INTO", "VALUES", "WHERE", "COMMIT", "CURSOR", "PREPARE", "FETCH", "SET",
	"CONNECT", "DISCONNECT", "CONSTANT", "SELECTBLOB", "UPDATEBLOB", "ROLLBACK",
	"EQ", "GT", "GTE", "LT", "LTE", "GTLT", "PLUS", "MINUS", "PLUSEQ", "MINUSEQ",
	"COLONCOLON", "MULT", "DIV", "MULTEQ", "DIVEQ", "CARAT", "LCURLY", "RCURLY",
	"LBRACE", "RBRACE", "TICK", "DQUOTED_STRING", "QUOTED_STRING", "COMMA",
	"SEMI", "LPAREN", "RPAREN", "COLON", "DQUOTE", "TQ", "DOUBLE_PIPE", "DOTDOTDOT",
	"AT", "UNDERSCORE", "NUMBER", "DOT", "DATE", "TIME", "ENUM", "ID", "EXPORT_HEADER",
	"LINE_CONTINUATION", "SL_COMMENT", "ML_COMMENT", "WS",
}

var ruleNames = []string{
	"start_rule", "body_rule", "forward_decl", "datatype_decl", "type_variables_decl",
	"global_variables_decl", "variable_decl", "variable_decl_sub", "variable_decl_sub0",
	"variable_decl_sub1", "variable_decl_sub2", "variable_decl_event", "decimal_decl_sub",
	"array_decl_sub", "constant_decl_sub", "constant_decl", "function_forward_decl",
	"function_forward_decl_alias", "parameter_sub", "parameters_list_sub",
	"functions_forward_decl", "function_body", "on_body", "event_forward_decl",
	"event_body", "access_type", "access_modif", "access_modif_part", "scope_modif",
	"expression", "value", "expression_list", "boolean_expression", "condition_or",
	"condition_and", "condition_not", "condition_comparison", "add_expr", "mul_expr",
	"unary_sign_expr", "statement", "public_statement", "throw_statement",
	"goto_statement", "statement_sub", "try_catch_statement", "sql_statement",
	"sql_insert_statement", "sql_values", "sql_delete_statement", "sql_select_statement",
	"sql_update_statement", "sql_connect_statement", "set_value", "where_clause",
	"select_clause", "sql_commit_statement", "execute_statement", "close_sql_statement",
	"declare_procedure_statement", "declare_cursor_statement", "open_cursor_statement",
	"close_cursor_statement", "fetch_into_statement", "prepare_sql_stateent",
	"increment_decrement_statement", "assignment_rhs", "describe_function_call",
	"assignment_statement", "variable_name", "return_statement", "function_call_expression_sub",
	"function_name", "function_event_call", "function_virtual_call_expression_sub",
	"open_call_sub", "close_call_sub", "function_call_statement", "ancestor_function_call",
	"call_statement", "super_call_statement", "ancestor_event_call_statement",
	"event_call_statement_sub", "event_call_statement", "create_call_sub",
	"create_call_statement", "destroy_call_sub", "destroy_call_statement",
	"for_loop_statement", "do_while_loop_statement", "do_loop_while_statement",
	"if_statement", "elseif_statement", "else_statement", "if_simple_statement",
	"continue_statement", "continue_sub", "post_event", "exit_statement", "choose_statement",
	"choose_case_value_sub", "choose_case_cond_sub", "choose_case_else_sub",
	"label_stat", "identifier", "string_literal", "identifier_array", "operator",
	"identifier_name_ex", "identifier_name", "bind_param", "atom_sub", "atom_sub_call1",
	"atom_sub_member1", "array_access_atom", "data_type_name", "dataTypeSub",
}

type PowerBuilderParser struct {
	*antlr.BaseParser
}

// NewPowerBuilderParser produces a new parser instance for the optional input antlr.TokenStream.
//
// The *PowerBuilderParser instance produced may be reused by calling the SetInputStream method.
// The initial parser configuration is expensive to construct, and the object is not thread-safe;
// however, if used within a Golang sync.Pool, the construction cost amortizes well and the
// objects can be used in a thread-safe manner.
func NewPowerBuilderParser(input antlr.TokenStream) *PowerBuilderParser {
	this := new(PowerBuilderParser)
	deserializer := antlr.NewATNDeserializer(nil)
	deserializedATN := deserializer.DeserializeFromUInt16(parserATN)
	decisionToDFA := make([]*antlr.DFA, len(deserializedATN.DecisionToState))
	for index, ds := range deserializedATN.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(ds, index)
	}
	this.BaseParser = antlr.NewBaseParser(input)

	this.Interpreter = antlr.NewParserATNSimulator(this, deserializedATN, decisionToDFA, antlr.NewPredictionContextCache())
	this.RuleNames = ruleNames
	this.LiteralNames = literalNames
	this.SymbolicNames = symbolicNames
	this.GrammarFileName = "PowerBuilderParser.g4"

	return this
}

// PowerBuilderParser tokens.
const (
	PowerBuilderParserEOF               = antlr.TokenEOF
	PowerBuilderParserANY               = 1
	PowerBuilderParserBLOB              = 2
	PowerBuilderParserBOOLEAN           = 3
	PowerBuilderParserBYTE              = 4
	PowerBuilderParserCHARACTER         = 5
	PowerBuilderParserCHAR              = 6
	PowerBuilderParserDATE_TYPE         = 7
	PowerBuilderParserDATETIME          = 8
	PowerBuilderParserDECIMAL           = 9
	PowerBuilderParserDEC               = 10
	PowerBuilderParserDOUBLE            = 11
	PowerBuilderParserINTEGER           = 12
	PowerBuilderParserINT               = 13
	PowerBuilderParserLONG              = 14
	PowerBuilderParserLONGLONG          = 15
	PowerBuilderParserREAL              = 16
	PowerBuilderParserSTRING            = 17
	PowerBuilderParserTIME_TYPE         = 18
	PowerBuilderParserUNSIGNEDINTEGER   = 19
	PowerBuilderParserUINT              = 20
	PowerBuilderParserUNSIGNEDLONG      = 21
	PowerBuilderParserULONG             = 22
	PowerBuilderParserWINDOW            = 23
	PowerBuilderParserTRUE              = 24
	PowerBuilderParserFALSE             = 25
	PowerBuilderParserGLOBAL            = 26
	PowerBuilderParserSHARED            = 27
	PowerBuilderParserEND               = 28
	PowerBuilderParserINDIRECT          = 29
	PowerBuilderParserVARIABLES         = 30
	PowerBuilderParserFORWARD           = 31
	PowerBuilderParserPUBLIC            = 32
	PowerBuilderParserPRIVATE           = 33
	PowerBuilderParserFUNCTION          = 34
	PowerBuilderParserSUBROUTINE        = 35
	PowerBuilderParserREADONLY          = 36
	PowerBuilderParserPROTOTYPES        = 37
	PowerBuilderParserTYPE              = 38
	PowerBuilderParserON                = 39
	PowerBuilderParserTO                = 40
	PowerBuilderParserFROM              = 41
	PowerBuilderParserREF               = 42
	PowerBuilderParserNULL_             = 43
	PowerBuilderParserUPDATE            = 44
	PowerBuilderParserCASE              = 45
	PowerBuilderParserDYNAMIC           = 46
	PowerBuilderParserWITHIN            = 47
	PowerBuilderParserPRIVATEWRITE      = 48
	PowerBuilderParserPROTECTED         = 49
	PowerBuilderParserPRIVATEREAD       = 50
	PowerBuilderParserPROTECTEDREAD     = 51
	PowerBuilderParserPROTECTEDWRITE    = 52
	PowerBuilderParserLOCAL             = 53
	PowerBuilderParserEVENT             = 54
	PowerBuilderParserOPEN              = 55
	PowerBuilderParserGOTO              = 56
	PowerBuilderParserELSE              = 57
	PowerBuilderParserIF                = 58
	PowerBuilderParserTHEN              = 59
	PowerBuilderParserELSEIF            = 60
	PowerBuilderParserTRY               = 61
	PowerBuilderParserEXIT              = 62
	PowerBuilderParserCHOOSE            = 63
	PowerBuilderParserIS                = 64
	PowerBuilderParserCONTINUE          = 65
	PowerBuilderParserDO                = 66
	PowerBuilderParserWHILE             = 67
	PowerBuilderParserFOR               = 68
	PowerBuilderParserCLOSE             = 69
	PowerBuilderParserNEXT              = 70
	PowerBuilderParserLOOP              = 71
	PowerBuilderParserUNTIL             = 72
	PowerBuilderParserSTEP              = 73
	PowerBuilderParserCATCH             = 74
	PowerBuilderParserFINALLY           = 75
	PowerBuilderParserTHROW             = 76
	PowerBuilderParserRELEASE           = 77
	PowerBuilderParserCREATE            = 78
	PowerBuilderParserDESTROY           = 79
	PowerBuilderParserUSING             = 80
	PowerBuilderParserPOST              = 81
	PowerBuilderParserTRIGGER           = 82
	PowerBuilderParserSELECT            = 83
	PowerBuilderParserDELETE            = 84
	PowerBuilderParserINSERT            = 85
	PowerBuilderParserDESCRIBE          = 86
	PowerBuilderParserRETURN            = 87
	PowerBuilderParserOR                = 88
	PowerBuilderParserAND               = 89
	PowerBuilderParserNOT               = 90
	PowerBuilderParserCALL              = 91
	PowerBuilderParserHALT              = 92
	PowerBuilderParserSUPER             = 93
	PowerBuilderParserLIBRARY           = 94
	PowerBuilderParserSYSTEM            = 95
	PowerBuilderParserRPCFUNC           = 96
	PowerBuilderParserALIAS             = 97
	PowerBuilderParserTHROWS            = 98
	PowerBuilderParserAUTOINSTANTIATE   = 99
	PowerBuilderParserDESCRIPTOR        = 100
	PowerBuilderParserSQLCA             = 101
	PowerBuilderParserIMMEDIATE         = 102
	PowerBuilderParserEXECUTE           = 103
	PowerBuilderParserDECLARE           = 104
	PowerBuilderParserPROCEDURE         = 105
	PowerBuilderParserINTO              = 106
	PowerBuilderParserVALUES            = 107
	PowerBuilderParserWHERE             = 108
	PowerBuilderParserCOMMIT            = 109
	PowerBuilderParserCURSOR            = 110
	PowerBuilderParserPREPARE           = 111
	PowerBuilderParserFETCH             = 112
	PowerBuilderParserSET               = 113
	PowerBuilderParserCONNECT           = 114
	PowerBuilderParserDISCONNECT        = 115
	PowerBuilderParserCONSTANT          = 116
	PowerBuilderParserSELECTBLOB        = 117
	PowerBuilderParserUPDATEBLOB        = 118
	PowerBuilderParserROLLBACK          = 119
	PowerBuilderParserEQ                = 120
	PowerBuilderParserGT                = 121
	PowerBuilderParserGTE               = 122
	PowerBuilderParserLT                = 123
	PowerBuilderParserLTE               = 124
	PowerBuilderParserGTLT              = 125
	PowerBuilderParserPLUS              = 126
	PowerBuilderParserMINUS             = 127
	PowerBuilderParserPLUSEQ            = 128
	PowerBuilderParserMINUSEQ           = 129
	PowerBuilderParserCOLONCOLON        = 130
	PowerBuilderParserMULT              = 131
	PowerBuilderParserDIV               = 132
	PowerBuilderParserMULTEQ            = 133
	PowerBuilderParserDIVEQ             = 134
	PowerBuilderParserCARAT             = 135
	PowerBuilderParserLCURLY            = 136
	PowerBuilderParserRCURLY            = 137
	PowerBuilderParserLBRACE            = 138
	PowerBuilderParserRBRACE            = 139
	PowerBuilderParserTICK              = 140
	PowerBuilderParserDQUOTED_STRING    = 141
	PowerBuilderParserQUOTED_STRING     = 142
	PowerBuilderParserCOMMA             = 143
	PowerBuilderParserSEMI              = 144
	PowerBuilderParserLPAREN            = 145
	PowerBuilderParserRPAREN            = 146
	PowerBuilderParserCOLON             = 147
	PowerBuilderParserDQUOTE            = 148
	PowerBuilderParserTQ                = 149
	PowerBuilderParserDOUBLE_PIPE       = 150
	PowerBuilderParserDOTDOTDOT         = 151
	PowerBuilderParserAT                = 152
	PowerBuilderParserUNDERSCORE        = 153
	PowerBuilderParserNUMBER            = 154
	PowerBuilderParserDOT               = 155
	PowerBuilderParserDATE              = 156
	PowerBuilderParserTIME              = 157
	PowerBuilderParserENUM              = 158
	PowerBuilderParserID                = 159
	PowerBuilderParserEXPORT_HEADER     = 160
	PowerBuilderParserLINE_CONTINUATION = 161
	PowerBuilderParserSL_COMMENT        = 162
	PowerBuilderParserML_COMMENT        = 163
	PowerBuilderParserWS                = 164
)

// PowerBuilderParser rules.
const (
	PowerBuilderParserRULE_start_rule                           = 0
	PowerBuilderParserRULE_body_rule                            = 1
	PowerBuilderParserRULE_forward_decl                         = 2
	PowerBuilderParserRULE_datatype_decl                        = 3
	PowerBuilderParserRULE_type_variables_decl                  = 4
	PowerBuilderParserRULE_global_variables_decl                = 5
	PowerBuilderParserRULE_variable_decl                        = 6
	PowerBuilderParserRULE_variable_decl_sub                    = 7
	PowerBuilderParserRULE_variable_decl_sub0                   = 8
	PowerBuilderParserRULE_variable_decl_sub1                   = 9
	PowerBuilderParserRULE_variable_decl_sub2                   = 10
	PowerBuilderParserRULE_variable_decl_event                  = 11
	PowerBuilderParserRULE_decimal_decl_sub                     = 12
	PowerBuilderParserRULE_array_decl_sub                       = 13
	PowerBuilderParserRULE_constant_decl_sub                    = 14
	PowerBuilderParserRULE_constant_decl                        = 15
	PowerBuilderParserRULE_function_forward_decl                = 16
	PowerBuilderParserRULE_function_forward_decl_alias          = 17
	PowerBuilderParserRULE_parameter_sub                        = 18
	PowerBuilderParserRULE_parameters_list_sub                  = 19
	PowerBuilderParserRULE_functions_forward_decl               = 20
	PowerBuilderParserRULE_function_body                        = 21
	PowerBuilderParserRULE_on_body                              = 22
	PowerBuilderParserRULE_event_forward_decl                   = 23
	PowerBuilderParserRULE_event_body                           = 24
	PowerBuilderParserRULE_access_type                          = 25
	PowerBuilderParserRULE_access_modif                         = 26
	PowerBuilderParserRULE_access_modif_part                    = 27
	PowerBuilderParserRULE_scope_modif                          = 28
	PowerBuilderParserRULE_expression                           = 29
	PowerBuilderParserRULE_value                                = 30
	PowerBuilderParserRULE_expression_list                      = 31
	PowerBuilderParserRULE_boolean_expression                   = 32
	PowerBuilderParserRULE_condition_or                         = 33
	PowerBuilderParserRULE_condition_and                        = 34
	PowerBuilderParserRULE_condition_not                        = 35
	PowerBuilderParserRULE_condition_comparison                 = 36
	PowerBuilderParserRULE_add_expr                             = 37
	PowerBuilderParserRULE_mul_expr                             = 38
	PowerBuilderParserRULE_unary_sign_expr                      = 39
	PowerBuilderParserRULE_statement                            = 40
	PowerBuilderParserRULE_public_statement                     = 41
	PowerBuilderParserRULE_throw_statement                      = 42
	PowerBuilderParserRULE_goto_statement                       = 43
	PowerBuilderParserRULE_statement_sub                        = 44
	PowerBuilderParserRULE_try_catch_statement                  = 45
	PowerBuilderParserRULE_sql_statement                        = 46
	PowerBuilderParserRULE_sql_insert_statement                 = 47
	PowerBuilderParserRULE_sql_values                           = 48
	PowerBuilderParserRULE_sql_delete_statement                 = 49
	PowerBuilderParserRULE_sql_select_statement                 = 50
	PowerBuilderParserRULE_sql_update_statement                 = 51
	PowerBuilderParserRULE_sql_connect_statement                = 52
	PowerBuilderParserRULE_set_value                            = 53
	PowerBuilderParserRULE_where_clause                         = 54
	PowerBuilderParserRULE_select_clause                        = 55
	PowerBuilderParserRULE_sql_commit_statement                 = 56
	PowerBuilderParserRULE_execute_statement                    = 57
	PowerBuilderParserRULE_close_sql_statement                  = 58
	PowerBuilderParserRULE_declare_procedure_statement          = 59
	PowerBuilderParserRULE_declare_cursor_statement             = 60
	PowerBuilderParserRULE_open_cursor_statement                = 61
	PowerBuilderParserRULE_close_cursor_statement               = 62
	PowerBuilderParserRULE_fetch_into_statement                 = 63
	PowerBuilderParserRULE_prepare_sql_stateent                 = 64
	PowerBuilderParserRULE_increment_decrement_statement        = 65
	PowerBuilderParserRULE_assignment_rhs                       = 66
	PowerBuilderParserRULE_describe_function_call               = 67
	PowerBuilderParserRULE_assignment_statement                 = 68
	PowerBuilderParserRULE_variable_name                        = 69
	PowerBuilderParserRULE_return_statement                     = 70
	PowerBuilderParserRULE_function_call_expression_sub         = 71
	PowerBuilderParserRULE_function_name                        = 72
	PowerBuilderParserRULE_function_event_call                  = 73
	PowerBuilderParserRULE_function_virtual_call_expression_sub = 74
	PowerBuilderParserRULE_open_call_sub                        = 75
	PowerBuilderParserRULE_close_call_sub                       = 76
	PowerBuilderParserRULE_function_call_statement              = 77
	PowerBuilderParserRULE_ancestor_function_call               = 78
	PowerBuilderParserRULE_call_statement                       = 79
	PowerBuilderParserRULE_super_call_statement                 = 80
	PowerBuilderParserRULE_ancestor_event_call_statement        = 81
	PowerBuilderParserRULE_event_call_statement_sub             = 82
	PowerBuilderParserRULE_event_call_statement                 = 83
	PowerBuilderParserRULE_create_call_sub                      = 84
	PowerBuilderParserRULE_create_call_statement                = 85
	PowerBuilderParserRULE_destroy_call_sub                     = 86
	PowerBuilderParserRULE_destroy_call_statement               = 87
	PowerBuilderParserRULE_for_loop_statement                   = 88
	PowerBuilderParserRULE_do_while_loop_statement              = 89
	PowerBuilderParserRULE_do_loop_while_statement              = 90
	PowerBuilderParserRULE_if_statement                         = 91
	PowerBuilderParserRULE_elseif_statement                     = 92
	PowerBuilderParserRULE_else_statement                       = 93
	PowerBuilderParserRULE_if_simple_statement                  = 94
	PowerBuilderParserRULE_continue_statement                   = 95
	PowerBuilderParserRULE_continue_sub                         = 96
	PowerBuilderParserRULE_post_event                           = 97
	PowerBuilderParserRULE_exit_statement                       = 98
	PowerBuilderParserRULE_choose_statement                     = 99
	PowerBuilderParserRULE_choose_case_value_sub                = 100
	PowerBuilderParserRULE_choose_case_cond_sub                 = 101
	PowerBuilderParserRULE_choose_case_else_sub                 = 102
	PowerBuilderParserRULE_label_stat                           = 103
	PowerBuilderParserRULE_identifier                           = 104
	PowerBuilderParserRULE_string_literal                       = 105
	PowerBuilderParserRULE_identifier_array                     = 106
	PowerBuilderParserRULE_operator                             = 107
	PowerBuilderParserRULE_identifier_name_ex                   = 108
	PowerBuilderParserRULE_identifier_name                      = 109
	PowerBuilderParserRULE_bind_param                           = 110
	PowerBuilderParserRULE_atom_sub                             = 111
	PowerBuilderParserRULE_atom_sub_call1                       = 112
	PowerBuilderParserRULE_atom_sub_member1                     = 113
	PowerBuilderParserRULE_array_access_atom                    = 114
	PowerBuilderParserRULE_data_type_name                       = 115
	PowerBuilderParserRULE_dataTypeSub                          = 116
)

// IStart_ruleContext is an interface to support dynamic dispatch.
type IStart_ruleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStart_ruleContext differentiates from other interfaces.
	IsStart_ruleContext()
}

type Start_ruleContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStart_ruleContext() *Start_ruleContext {
	var p = new(Start_ruleContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_start_rule
	return p
}

func (*Start_ruleContext) IsStart_ruleContext() {}

func NewStart_ruleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Start_ruleContext {
	var p = new(Start_ruleContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_start_rule

	return p
}

func (s *Start_ruleContext) GetParser() antlr.Parser { return s.parser }

func (s *Start_ruleContext) EOF() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserEOF, 0)
}

func (s *Start_ruleContext) RELEASE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserRELEASE, 0)
}

func (s *Start_ruleContext) NUMBER() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserNUMBER, 0)
}

func (s *Start_ruleContext) SEMI() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserSEMI, 0)
}

func (s *Start_ruleContext) AllBody_rule() []IBody_ruleContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBody_ruleContext)(nil)).Elem())
	var tst = make([]IBody_ruleContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBody_ruleContext)
		}
	}

	return tst
}

func (s *Start_ruleContext) Body_rule(i int) IBody_ruleContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBody_ruleContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBody_ruleContext)
}

func (s *Start_ruleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Start_ruleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Start_ruleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterStart_rule(s)
	}
}

func (s *Start_ruleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitStart_rule(s)
	}
}

func (p *PowerBuilderParser) Start_rule() (localctx IStart_ruleContext) {
	this := p
	_ = this

	localctx = NewStart_ruleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, PowerBuilderParserRULE_start_rule)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(237)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PowerBuilderParserRELEASE {
		{
			p.SetState(234)
			p.Match(PowerBuilderParserRELEASE)
		}
		{
			p.SetState(235)
			p.Match(PowerBuilderParserNUMBER)
		}
		{
			p.SetState(236)
			p.Match(PowerBuilderParserSEMI)
		}

	}
	p.SetState(240)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<PowerBuilderParserANY)|(1<<PowerBuilderParserBLOB)|(1<<PowerBuilderParserBOOLEAN)|(1<<PowerBuilderParserBYTE)|(1<<PowerBuilderParserCHARACTER)|(1<<PowerBuilderParserCHAR)|(1<<PowerBuilderParserDATE_TYPE)|(1<<PowerBuilderParserDATETIME)|(1<<PowerBuilderParserDECIMAL)|(1<<PowerBuilderParserDEC)|(1<<PowerBuilderParserDOUBLE)|(1<<PowerBuilderParserINTEGER)|(1<<PowerBuilderParserINT)|(1<<PowerBuilderParserLONG)|(1<<PowerBuilderParserLONGLONG)|(1<<PowerBuilderParserREAL)|(1<<PowerBuilderParserSTRING)|(1<<PowerBuilderParserTIME_TYPE)|(1<<PowerBuilderParserUNSIGNEDINTEGER)|(1<<PowerBuilderParserUINT)|(1<<PowerBuilderParserUNSIGNEDLONG)|(1<<PowerBuilderParserULONG)|(1<<PowerBuilderParserWINDOW)|(1<<PowerBuilderParserGLOBAL)|(1<<PowerBuilderParserSHARED)|(1<<PowerBuilderParserINDIRECT)|(1<<PowerBuilderParserFORWARD))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(PowerBuilderParserPUBLIC-32))|(1<<(PowerBuilderParserPRIVATE-32))|(1<<(PowerBuilderParserFUNCTION-32))|(1<<(PowerBuilderParserSUBROUTINE-32))|(1<<(PowerBuilderParserTYPE-32))|(1<<(PowerBuilderParserON-32))|(1<<(PowerBuilderParserPRIVATEWRITE-32))|(1<<(PowerBuilderParserPROTECTED-32))|(1<<(PowerBuilderParserPRIVATEREAD-32))|(1<<(PowerBuilderParserPROTECTEDREAD-32))|(1<<(PowerBuilderParserPROTECTEDWRITE-32))|(1<<(PowerBuilderParserLOCAL-32))|(1<<(PowerBuilderParserEVENT-32)))) != 0) || _la == PowerBuilderParserCONSTANT || _la == PowerBuilderParserUNDERSCORE || _la == PowerBuilderParserID {
		{
			p.SetState(239)
			p.Body_rule()
		}

		p.SetState(242)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(244)
		p.Match(PowerBuilderParserEOF)
	}

	return localctx
}

// IBody_ruleContext is an interface to support dynamic dispatch.
type IBody_ruleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBody_ruleContext differentiates from other interfaces.
	IsBody_ruleContext()
}

type Body_ruleContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBody_ruleContext() *Body_ruleContext {
	var p = new(Body_ruleContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_body_rule
	return p
}

func (*Body_ruleContext) IsBody_ruleContext() {}

func NewBody_ruleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Body_ruleContext {
	var p = new(Body_ruleContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_body_rule

	return p
}

func (s *Body_ruleContext) GetParser() antlr.Parser { return s.parser }

func (s *Body_ruleContext) Datatype_decl() IDatatype_declContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDatatype_declContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDatatype_declContext)
}

func (s *Body_ruleContext) Access_modif() IAccess_modifContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAccess_modifContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAccess_modifContext)
}

func (s *Body_ruleContext) Forward_decl() IForward_declContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IForward_declContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IForward_declContext)
}

func (s *Body_ruleContext) Type_variables_decl() IType_variables_declContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_variables_declContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_variables_declContext)
}

func (s *Body_ruleContext) Global_variables_decl() IGlobal_variables_declContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGlobal_variables_declContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGlobal_variables_declContext)
}

func (s *Body_ruleContext) Variable_decl() IVariable_declContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_declContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariable_declContext)
}

func (s *Body_ruleContext) Constant_decl() IConstant_declContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstant_declContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstant_declContext)
}

func (s *Body_ruleContext) Function_forward_decl() IFunction_forward_declContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_forward_declContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_forward_declContext)
}

func (s *Body_ruleContext) Functions_forward_decl() IFunctions_forward_declContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctions_forward_declContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctions_forward_declContext)
}

func (s *Body_ruleContext) Function_body() IFunction_bodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_bodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_bodyContext)
}

func (s *Body_ruleContext) On_body() IOn_bodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOn_bodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOn_bodyContext)
}

func (s *Body_ruleContext) Event_body() IEvent_bodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEvent_bodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEvent_bodyContext)
}

func (s *Body_ruleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Body_ruleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Body_ruleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterBody_rule(s)
	}
}

func (s *Body_ruleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitBody_rule(s)
	}
}

func (p *PowerBuilderParser) Body_rule() (localctx IBody_ruleContext) {
	this := p
	_ = this

	localctx = NewBody_ruleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, PowerBuilderParserRULE_body_rule)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(258)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 2, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(246)
			p.Datatype_decl()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(247)
			p.Access_modif()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(248)
			p.Forward_decl()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(249)
			p.Type_variables_decl()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(250)
			p.Global_variables_decl()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(251)
			p.Variable_decl()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(252)
			p.Constant_decl()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(253)
			p.Function_forward_decl()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(254)
			p.Functions_forward_decl()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(255)
			p.Function_body()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(256)
			p.On_body()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(257)
			p.Event_body()
		}

	}

	return localctx
}

// IForward_declContext is an interface to support dynamic dispatch.
type IForward_declContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsForward_declContext differentiates from other interfaces.
	IsForward_declContext()
}

type Forward_declContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForward_declContext() *Forward_declContext {
	var p = new(Forward_declContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_forward_decl
	return p
}

func (*Forward_declContext) IsForward_declContext() {}

func NewForward_declContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Forward_declContext {
	var p = new(Forward_declContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_forward_decl

	return p
}

func (s *Forward_declContext) GetParser() antlr.Parser { return s.parser }

func (s *Forward_declContext) AllFORWARD() []antlr.TerminalNode {
	return s.GetTokens(PowerBuilderParserFORWARD)
}

func (s *Forward_declContext) FORWARD(i int) antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserFORWARD, i)
}

func (s *Forward_declContext) END() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserEND, 0)
}

func (s *Forward_declContext) AllDatatype_decl() []IDatatype_declContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDatatype_declContext)(nil)).Elem())
	var tst = make([]IDatatype_declContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDatatype_declContext)
		}
	}

	return tst
}

func (s *Forward_declContext) Datatype_decl(i int) IDatatype_declContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDatatype_declContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDatatype_declContext)
}

func (s *Forward_declContext) AllVariable_decl() []IVariable_declContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVariable_declContext)(nil)).Elem())
	var tst = make([]IVariable_declContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVariable_declContext)
		}
	}

	return tst
}

func (s *Forward_declContext) Variable_decl(i int) IVariable_declContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_declContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVariable_declContext)
}

func (s *Forward_declContext) AllGlobal_variables_decl() []IGlobal_variables_declContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IGlobal_variables_declContext)(nil)).Elem())
	var tst = make([]IGlobal_variables_declContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IGlobal_variables_declContext)
		}
	}

	return tst
}

func (s *Forward_declContext) Global_variables_decl(i int) IGlobal_variables_declContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGlobal_variables_declContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IGlobal_variables_declContext)
}

func (s *Forward_declContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Forward_declContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Forward_declContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterForward_decl(s)
	}
}

func (s *Forward_declContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitForward_decl(s)
	}
}

func (p *PowerBuilderParser) Forward_decl() (localctx IForward_declContext) {
	this := p
	_ = this

	localctx = NewForward_declContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, PowerBuilderParserRULE_forward_decl)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(260)
		p.Match(PowerBuilderParserFORWARD)
	}
	p.SetState(264)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<PowerBuilderParserANY)|(1<<PowerBuilderParserBLOB)|(1<<PowerBuilderParserBOOLEAN)|(1<<PowerBuilderParserBYTE)|(1<<PowerBuilderParserCHARACTER)|(1<<PowerBuilderParserCHAR)|(1<<PowerBuilderParserDATE_TYPE)|(1<<PowerBuilderParserDATETIME)|(1<<PowerBuilderParserDECIMAL)|(1<<PowerBuilderParserDEC)|(1<<PowerBuilderParserDOUBLE)|(1<<PowerBuilderParserINTEGER)|(1<<PowerBuilderParserINT)|(1<<PowerBuilderParserLONG)|(1<<PowerBuilderParserLONGLONG)|(1<<PowerBuilderParserREAL)|(1<<PowerBuilderParserSTRING)|(1<<PowerBuilderParserTIME_TYPE)|(1<<PowerBuilderParserUNSIGNEDINTEGER)|(1<<PowerBuilderParserUINT)|(1<<PowerBuilderParserUNSIGNEDLONG)|(1<<PowerBuilderParserULONG)|(1<<PowerBuilderParserWINDOW)|(1<<PowerBuilderParserGLOBAL)|(1<<PowerBuilderParserSHARED)|(1<<PowerBuilderParserINDIRECT))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(PowerBuilderParserPUBLIC-32))|(1<<(PowerBuilderParserPRIVATE-32))|(1<<(PowerBuilderParserTYPE-32))|(1<<(PowerBuilderParserPRIVATEWRITE-32))|(1<<(PowerBuilderParserPROTECTED-32))|(1<<(PowerBuilderParserPRIVATEREAD-32))|(1<<(PowerBuilderParserPROTECTEDREAD-32))|(1<<(PowerBuilderParserPROTECTEDWRITE-32))|(1<<(PowerBuilderParserLOCAL-32))|(1<<(PowerBuilderParserEVENT-32)))) != 0) || _la == PowerBuilderParserUNDERSCORE || _la == PowerBuilderParserID {
		p.SetState(264)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 3, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(261)
				p.Datatype_decl()
			}

		case 2:
			{
				p.SetState(262)
				p.Variable_decl()
			}

		case 3:
			{
				p.SetState(263)
				p.Global_variables_decl()
			}

		}

		p.SetState(266)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(268)
		p.Match(PowerBuilderParserEND)
	}
	{
		p.SetState(269)
		p.Match(PowerBuilderParserFORWARD)
	}

	return localctx
}

// IDatatype_declContext is an interface to support dynamic dispatch.
type IDatatype_declContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDatatype_declContext differentiates from other interfaces.
	IsDatatype_declContext()
}

type Datatype_declContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDatatype_declContext() *Datatype_declContext {
	var p = new(Datatype_declContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_datatype_decl
	return p
}

func (*Datatype_declContext) IsDatatype_declContext() {}

func NewDatatype_declContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Datatype_declContext {
	var p = new(Datatype_declContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_datatype_decl

	return p
}

func (s *Datatype_declContext) GetParser() antlr.Parser { return s.parser }

func (s *Datatype_declContext) AllTYPE() []antlr.TerminalNode {
	return s.GetTokens(PowerBuilderParserTYPE)
}

func (s *Datatype_declContext) TYPE(i int) antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserTYPE, i)
}

func (s *Datatype_declContext) AllIdentifier_name() []IIdentifier_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifier_nameContext)(nil)).Elem())
	var tst = make([]IIdentifier_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifier_nameContext)
		}
	}

	return tst
}

func (s *Datatype_declContext) Identifier_name(i int) IIdentifier_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_nameContext)
}

func (s *Datatype_declContext) FROM() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserFROM, 0)
}

func (s *Datatype_declContext) Data_type_name() IData_type_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_type_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_type_nameContext)
}

func (s *Datatype_declContext) END() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserEND, 0)
}

func (s *Datatype_declContext) Scope_modif() IScope_modifContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IScope_modifContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IScope_modifContext)
}

func (s *Datatype_declContext) TICK() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserTICK, 0)
}

func (s *Datatype_declContext) WITHIN() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserWITHIN, 0)
}

func (s *Datatype_declContext) AUTOINSTANTIATE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserAUTOINSTANTIATE, 0)
}

func (s *Datatype_declContext) DESCRIPTOR() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserDESCRIPTOR, 0)
}

func (s *Datatype_declContext) AllDQUOTED_STRING() []antlr.TerminalNode {
	return s.GetTokens(PowerBuilderParserDQUOTED_STRING)
}

func (s *Datatype_declContext) DQUOTED_STRING(i int) antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserDQUOTED_STRING, i)
}

func (s *Datatype_declContext) EQ() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserEQ, 0)
}

func (s *Datatype_declContext) AllVariable_decl() []IVariable_declContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVariable_declContext)(nil)).Elem())
	var tst = make([]IVariable_declContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVariable_declContext)
		}
	}

	return tst
}

func (s *Datatype_declContext) Variable_decl(i int) IVariable_declContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_declContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVariable_declContext)
}

func (s *Datatype_declContext) AllEvent_forward_decl() []IEvent_forward_declContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEvent_forward_declContext)(nil)).Elem())
	var tst = make([]IEvent_forward_declContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEvent_forward_declContext)
		}
	}

	return tst
}

func (s *Datatype_declContext) Event_forward_decl(i int) IEvent_forward_declContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEvent_forward_declContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEvent_forward_declContext)
}

func (s *Datatype_declContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Datatype_declContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Datatype_declContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterDatatype_decl(s)
	}
}

func (s *Datatype_declContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitDatatype_decl(s)
	}
}

func (p *PowerBuilderParser) Datatype_decl() (localctx IDatatype_declContext) {
	this := p
	_ = this

	localctx = NewDatatype_declContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, PowerBuilderParserRULE_datatype_decl)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(272)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PowerBuilderParserGLOBAL || _la == PowerBuilderParserLOCAL {
		{
			p.SetState(271)
			p.Scope_modif()
		}

	}
	{
		p.SetState(274)
		p.Match(PowerBuilderParserTYPE)
	}
	{
		p.SetState(275)
		p.Identifier_name()
	}
	{
		p.SetState(276)
		p.Match(PowerBuilderParserFROM)
	}
	p.SetState(280)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 6, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(277)
			p.Identifier_name()
		}
		{
			p.SetState(278)
			p.Match(PowerBuilderParserTICK)
		}

	}
	{
		p.SetState(282)
		p.Data_type_name()
	}
	p.SetState(285)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PowerBuilderParserWITHIN {
		{
			p.SetState(283)
			p.Match(PowerBuilderParserWITHIN)
		}
		{
			p.SetState(284)
			p.Identifier_name()
		}

	}
	p.SetState(288)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PowerBuilderParserAUTOINSTANTIATE {
		{
			p.SetState(287)
			p.Match(PowerBuilderParserAUTOINSTANTIATE)
		}

	}
	p.SetState(294)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PowerBuilderParserDESCRIPTOR {
		{
			p.SetState(290)
			p.Match(PowerBuilderParserDESCRIPTOR)
		}
		{
			p.SetState(291)
			p.Match(PowerBuilderParserDQUOTED_STRING)
		}
		{
			p.SetState(292)
			p.Match(PowerBuilderParserEQ)
		}
		{
			p.SetState(293)
			p.Match(PowerBuilderParserDQUOTED_STRING)
		}

	}
	p.SetState(300)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<PowerBuilderParserANY)|(1<<PowerBuilderParserBLOB)|(1<<PowerBuilderParserBOOLEAN)|(1<<PowerBuilderParserBYTE)|(1<<PowerBuilderParserCHARACTER)|(1<<PowerBuilderParserCHAR)|(1<<PowerBuilderParserDATE_TYPE)|(1<<PowerBuilderParserDATETIME)|(1<<PowerBuilderParserDECIMAL)|(1<<PowerBuilderParserDEC)|(1<<PowerBuilderParserDOUBLE)|(1<<PowerBuilderParserINTEGER)|(1<<PowerBuilderParserINT)|(1<<PowerBuilderParserLONG)|(1<<PowerBuilderParserLONGLONG)|(1<<PowerBuilderParserREAL)|(1<<PowerBuilderParserSTRING)|(1<<PowerBuilderParserTIME_TYPE)|(1<<PowerBuilderParserUNSIGNEDINTEGER)|(1<<PowerBuilderParserUINT)|(1<<PowerBuilderParserUNSIGNEDLONG)|(1<<PowerBuilderParserULONG)|(1<<PowerBuilderParserWINDOW)|(1<<PowerBuilderParserGLOBAL)|(1<<PowerBuilderParserINDIRECT))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(PowerBuilderParserPUBLIC-32))|(1<<(PowerBuilderParserPRIVATE-32))|(1<<(PowerBuilderParserPRIVATEWRITE-32))|(1<<(PowerBuilderParserPROTECTED-32))|(1<<(PowerBuilderParserPRIVATEREAD-32))|(1<<(PowerBuilderParserPROTECTEDREAD-32))|(1<<(PowerBuilderParserPROTECTEDWRITE-32))|(1<<(PowerBuilderParserLOCAL-32))|(1<<(PowerBuilderParserEVENT-32)))) != 0) || _la == PowerBuilderParserUNDERSCORE || _la == PowerBuilderParserID {
		p.SetState(298)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 10, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(296)
				p.Variable_decl()
			}

		case 2:
			{
				p.SetState(297)
				p.Event_forward_decl()
			}

		}

		p.SetState(302)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(303)
		p.Match(PowerBuilderParserEND)
	}
	{
		p.SetState(304)
		p.Match(PowerBuilderParserTYPE)
	}

	return localctx
}

// IType_variables_declContext is an interface to support dynamic dispatch.
type IType_variables_declContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsType_variables_declContext differentiates from other interfaces.
	IsType_variables_declContext()
}

type Type_variables_declContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyType_variables_declContext() *Type_variables_declContext {
	var p = new(Type_variables_declContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_type_variables_decl
	return p
}

func (*Type_variables_declContext) IsType_variables_declContext() {}

func NewType_variables_declContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Type_variables_declContext {
	var p = new(Type_variables_declContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_type_variables_decl

	return p
}

func (s *Type_variables_declContext) GetParser() antlr.Parser { return s.parser }

func (s *Type_variables_declContext) TYPE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserTYPE, 0)
}

func (s *Type_variables_declContext) AllVARIABLES() []antlr.TerminalNode {
	return s.GetTokens(PowerBuilderParserVARIABLES)
}

func (s *Type_variables_declContext) VARIABLES(i int) antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserVARIABLES, i)
}

func (s *Type_variables_declContext) END() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserEND, 0)
}

func (s *Type_variables_declContext) AllVariable_decl() []IVariable_declContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVariable_declContext)(nil)).Elem())
	var tst = make([]IVariable_declContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVariable_declContext)
		}
	}

	return tst
}

func (s *Type_variables_declContext) Variable_decl(i int) IVariable_declContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_declContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVariable_declContext)
}

func (s *Type_variables_declContext) AllConstant_decl() []IConstant_declContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IConstant_declContext)(nil)).Elem())
	var tst = make([]IConstant_declContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IConstant_declContext)
		}
	}

	return tst
}

func (s *Type_variables_declContext) Constant_decl(i int) IConstant_declContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstant_declContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IConstant_declContext)
}

func (s *Type_variables_declContext) AllPublic_statement() []IPublic_statementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPublic_statementContext)(nil)).Elem())
	var tst = make([]IPublic_statementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPublic_statementContext)
		}
	}

	return tst
}

func (s *Type_variables_declContext) Public_statement(i int) IPublic_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPublic_statementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPublic_statementContext)
}

func (s *Type_variables_declContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Type_variables_declContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Type_variables_declContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterType_variables_decl(s)
	}
}

func (s *Type_variables_declContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitType_variables_decl(s)
	}
}

func (p *PowerBuilderParser) Type_variables_decl() (localctx IType_variables_declContext) {
	this := p
	_ = this

	localctx = NewType_variables_declContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, PowerBuilderParserRULE_type_variables_decl)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(306)
		p.Match(PowerBuilderParserTYPE)
	}
	{
		p.SetState(307)
		p.Match(PowerBuilderParserVARIABLES)
	}
	p.SetState(313)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<PowerBuilderParserANY)|(1<<PowerBuilderParserBLOB)|(1<<PowerBuilderParserBOOLEAN)|(1<<PowerBuilderParserBYTE)|(1<<PowerBuilderParserCHARACTER)|(1<<PowerBuilderParserCHAR)|(1<<PowerBuilderParserDATE_TYPE)|(1<<PowerBuilderParserDATETIME)|(1<<PowerBuilderParserDECIMAL)|(1<<PowerBuilderParserDEC)|(1<<PowerBuilderParserDOUBLE)|(1<<PowerBuilderParserINTEGER)|(1<<PowerBuilderParserINT)|(1<<PowerBuilderParserLONG)|(1<<PowerBuilderParserLONGLONG)|(1<<PowerBuilderParserREAL)|(1<<PowerBuilderParserSTRING)|(1<<PowerBuilderParserTIME_TYPE)|(1<<PowerBuilderParserUNSIGNEDINTEGER)|(1<<PowerBuilderParserUINT)|(1<<PowerBuilderParserUNSIGNEDLONG)|(1<<PowerBuilderParserULONG)|(1<<PowerBuilderParserWINDOW)|(1<<PowerBuilderParserGLOBAL)|(1<<PowerBuilderParserINDIRECT))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(PowerBuilderParserPUBLIC-32))|(1<<(PowerBuilderParserPRIVATE-32))|(1<<(PowerBuilderParserPRIVATEWRITE-32))|(1<<(PowerBuilderParserPROTECTED-32))|(1<<(PowerBuilderParserPRIVATEREAD-32))|(1<<(PowerBuilderParserPROTECTEDREAD-32))|(1<<(PowerBuilderParserPROTECTEDWRITE-32))|(1<<(PowerBuilderParserLOCAL-32))|(1<<(PowerBuilderParserEVENT-32)))) != 0) || _la == PowerBuilderParserCONSTANT || _la == PowerBuilderParserUNDERSCORE || _la == PowerBuilderParserID {
		p.SetState(311)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 12, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(308)
				p.Variable_decl()
			}

		case 2:
			{
				p.SetState(309)
				p.Constant_decl()
			}

		case 3:
			{
				p.SetState(310)
				p.Public_statement()
			}

		}

		p.SetState(315)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(316)
		p.Match(PowerBuilderParserEND)
	}
	{
		p.SetState(317)
		p.Match(PowerBuilderParserVARIABLES)
	}

	return localctx
}

// IGlobal_variables_declContext is an interface to support dynamic dispatch.
type IGlobal_variables_declContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGlobal_variables_declContext differentiates from other interfaces.
	IsGlobal_variables_declContext()
}

type Global_variables_declContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGlobal_variables_declContext() *Global_variables_declContext {
	var p = new(Global_variables_declContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_global_variables_decl
	return p
}

func (*Global_variables_declContext) IsGlobal_variables_declContext() {}

func NewGlobal_variables_declContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Global_variables_declContext {
	var p = new(Global_variables_declContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_global_variables_decl

	return p
}

func (s *Global_variables_declContext) GetParser() antlr.Parser { return s.parser }

func (s *Global_variables_declContext) GLOBAL() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserGLOBAL, 0)
}

func (s *Global_variables_declContext) AllVariable_decl() []IVariable_declContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVariable_declContext)(nil)).Elem())
	var tst = make([]IVariable_declContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVariable_declContext)
		}
	}

	return tst
}

func (s *Global_variables_declContext) Variable_decl(i int) IVariable_declContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_declContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVariable_declContext)
}

func (s *Global_variables_declContext) AllVARIABLES() []antlr.TerminalNode {
	return s.GetTokens(PowerBuilderParserVARIABLES)
}

func (s *Global_variables_declContext) VARIABLES(i int) antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserVARIABLES, i)
}

func (s *Global_variables_declContext) END() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserEND, 0)
}

func (s *Global_variables_declContext) SHARED() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserSHARED, 0)
}

func (s *Global_variables_declContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Global_variables_declContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Global_variables_declContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterGlobal_variables_decl(s)
	}
}

func (s *Global_variables_declContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitGlobal_variables_decl(s)
	}
}

func (p *PowerBuilderParser) Global_variables_decl() (localctx IGlobal_variables_declContext) {
	this := p
	_ = this

	localctx = NewGlobal_variables_declContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, PowerBuilderParserRULE_global_variables_decl)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(331)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 15, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(319)
			p.Match(PowerBuilderParserGLOBAL)
		}
		{
			p.SetState(320)
			p.Variable_decl()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(321)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PowerBuilderParserGLOBAL || _la == PowerBuilderParserSHARED) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(322)
			p.Match(PowerBuilderParserVARIABLES)
		}
		p.SetState(326)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<PowerBuilderParserANY)|(1<<PowerBuilderParserBLOB)|(1<<PowerBuilderParserBOOLEAN)|(1<<PowerBuilderParserBYTE)|(1<<PowerBuilderParserCHARACTER)|(1<<PowerBuilderParserCHAR)|(1<<PowerBuilderParserDATE_TYPE)|(1<<PowerBuilderParserDATETIME)|(1<<PowerBuilderParserDECIMAL)|(1<<PowerBuilderParserDEC)|(1<<PowerBuilderParserDOUBLE)|(1<<PowerBuilderParserINTEGER)|(1<<PowerBuilderParserINT)|(1<<PowerBuilderParserLONG)|(1<<PowerBuilderParserLONGLONG)|(1<<PowerBuilderParserREAL)|(1<<PowerBuilderParserSTRING)|(1<<PowerBuilderParserTIME_TYPE)|(1<<PowerBuilderParserUNSIGNEDINTEGER)|(1<<PowerBuilderParserUINT)|(1<<PowerBuilderParserUNSIGNEDLONG)|(1<<PowerBuilderParserULONG)|(1<<PowerBuilderParserWINDOW)|(1<<PowerBuilderParserGLOBAL)|(1<<PowerBuilderParserINDIRECT))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(PowerBuilderParserPUBLIC-32))|(1<<(PowerBuilderParserPRIVATE-32))|(1<<(PowerBuilderParserPRIVATEWRITE-32))|(1<<(PowerBuilderParserPROTECTED-32))|(1<<(PowerBuilderParserPRIVATEREAD-32))|(1<<(PowerBuilderParserPROTECTEDREAD-32))|(1<<(PowerBuilderParserPROTECTEDWRITE-32))|(1<<(PowerBuilderParserLOCAL-32))|(1<<(PowerBuilderParserEVENT-32)))) != 0) || _la == PowerBuilderParserUNDERSCORE || _la == PowerBuilderParserID {
			{
				p.SetState(323)
				p.Variable_decl()
			}

			p.SetState(328)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(329)
			p.Match(PowerBuilderParserEND)
		}
		{
			p.SetState(330)
			p.Match(PowerBuilderParserVARIABLES)
		}

	}

	return localctx
}

// IVariable_declContext is an interface to support dynamic dispatch.
type IVariable_declContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVariable_declContext differentiates from other interfaces.
	IsVariable_declContext()
}

type Variable_declContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariable_declContext() *Variable_declContext {
	var p = new(Variable_declContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_variable_decl
	return p
}

func (*Variable_declContext) IsVariable_declContext() {}

func NewVariable_declContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Variable_declContext {
	var p = new(Variable_declContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_variable_decl

	return p
}

func (s *Variable_declContext) GetParser() antlr.Parser { return s.parser }

func (s *Variable_declContext) Variable_decl_sub() IVariable_decl_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_decl_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariable_decl_subContext)
}

func (s *Variable_declContext) Access_type() IAccess_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAccess_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAccess_typeContext)
}

func (s *Variable_declContext) SEMI() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserSEMI, 0)
}

func (s *Variable_declContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Variable_declContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Variable_declContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterVariable_decl(s)
	}
}

func (s *Variable_declContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitVariable_decl(s)
	}
}

func (p *PowerBuilderParser) Variable_decl() (localctx IVariable_declContext) {
	this := p
	_ = this

	localctx = NewVariable_declContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, PowerBuilderParserRULE_variable_decl)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(334)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 16, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(333)
			p.Access_type()
		}

	}
	{
		p.SetState(336)
		p.Variable_decl_sub()
	}
	p.SetState(338)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 17, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(337)
			p.Match(PowerBuilderParserSEMI)
		}

	}

	return localctx
}

// IVariable_decl_subContext is an interface to support dynamic dispatch.
type IVariable_decl_subContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVariable_decl_subContext differentiates from other interfaces.
	IsVariable_decl_subContext()
}

type Variable_decl_subContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariable_decl_subContext() *Variable_decl_subContext {
	var p = new(Variable_decl_subContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_variable_decl_sub
	return p
}

func (*Variable_decl_subContext) IsVariable_decl_subContext() {}

func NewVariable_decl_subContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Variable_decl_subContext {
	var p = new(Variable_decl_subContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_variable_decl_sub

	return p
}

func (s *Variable_decl_subContext) GetParser() antlr.Parser { return s.parser }

func (s *Variable_decl_subContext) Variable_decl_sub0() IVariable_decl_sub0Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_decl_sub0Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariable_decl_sub0Context)
}

func (s *Variable_decl_subContext) Variable_decl_sub1() IVariable_decl_sub1Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_decl_sub1Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariable_decl_sub1Context)
}

func (s *Variable_decl_subContext) Variable_decl_sub2() IVariable_decl_sub2Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_decl_sub2Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariable_decl_sub2Context)
}

func (s *Variable_decl_subContext) Variable_decl_event() IVariable_decl_eventContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_decl_eventContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariable_decl_eventContext)
}

func (s *Variable_decl_subContext) INDIRECT() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserINDIRECT, 0)
}

func (s *Variable_decl_subContext) Access_modif_part() IAccess_modif_partContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAccess_modif_partContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAccess_modif_partContext)
}

func (s *Variable_decl_subContext) Scope_modif() IScope_modifContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IScope_modifContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IScope_modifContext)
}

func (s *Variable_decl_subContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Variable_decl_subContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Variable_decl_subContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterVariable_decl_sub(s)
	}
}

func (s *Variable_decl_subContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitVariable_decl_sub(s)
	}
}

func (p *PowerBuilderParser) Variable_decl_sub() (localctx IVariable_decl_subContext) {
	this := p
	_ = this

	localctx = NewVariable_decl_subContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, PowerBuilderParserRULE_variable_decl_sub)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(341)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PowerBuilderParserINDIRECT {
		{
			p.SetState(340)
			p.Match(PowerBuilderParserINDIRECT)
		}

	}
	p.SetState(344)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if ((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(PowerBuilderParserPUBLIC-32))|(1<<(PowerBuilderParserPRIVATE-32))|(1<<(PowerBuilderParserPRIVATEWRITE-32))|(1<<(PowerBuilderParserPROTECTED-32))|(1<<(PowerBuilderParserPRIVATEREAD-32))|(1<<(PowerBuilderParserPROTECTEDREAD-32))|(1<<(PowerBuilderParserPROTECTEDWRITE-32)))) != 0 {
		{
			p.SetState(343)
			p.Access_modif_part()
		}

	}
	p.SetState(347)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PowerBuilderParserGLOBAL || _la == PowerBuilderParserLOCAL {
		{
			p.SetState(346)
			p.Scope_modif()
		}

	}
	p.SetState(353)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 21, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(349)
			p.Variable_decl_sub0()
		}

	case 2:
		{
			p.SetState(350)
			p.Variable_decl_sub1()
		}

	case 3:
		{
			p.SetState(351)
			p.Variable_decl_sub2()
		}

	case 4:
		{
			p.SetState(352)
			p.Variable_decl_event()
		}

	}

	return localctx
}

// IVariable_decl_sub0Context is an interface to support dynamic dispatch.
type IVariable_decl_sub0Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVariable_decl_sub0Context differentiates from other interfaces.
	IsVariable_decl_sub0Context()
}

type Variable_decl_sub0Context struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariable_decl_sub0Context() *Variable_decl_sub0Context {
	var p = new(Variable_decl_sub0Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_variable_decl_sub0
	return p
}

func (*Variable_decl_sub0Context) IsVariable_decl_sub0Context() {}

func NewVariable_decl_sub0Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Variable_decl_sub0Context {
	var p = new(Variable_decl_sub0Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_variable_decl_sub0

	return p
}

func (s *Variable_decl_sub0Context) GetParser() antlr.Parser { return s.parser }

func (s *Variable_decl_sub0Context) Data_type_name() IData_type_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_type_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_type_nameContext)
}

func (s *Variable_decl_sub0Context) AllVariable_name() []IVariable_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVariable_nameContext)(nil)).Elem())
	var tst = make([]IVariable_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVariable_nameContext)
		}
	}

	return tst
}

func (s *Variable_decl_sub0Context) Variable_name(i int) IVariable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVariable_nameContext)
}

func (s *Variable_decl_sub0Context) Decimal_decl_sub() IDecimal_decl_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimal_decl_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimal_decl_subContext)
}

func (s *Variable_decl_sub0Context) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PowerBuilderParserCOMMA)
}

func (s *Variable_decl_sub0Context) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserCOMMA, i)
}

func (s *Variable_decl_sub0Context) EQ() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserEQ, 0)
}

func (s *Variable_decl_sub0Context) Assignment_rhs() IAssignment_rhsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignment_rhsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignment_rhsContext)
}

func (s *Variable_decl_sub0Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Variable_decl_sub0Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Variable_decl_sub0Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterVariable_decl_sub0(s)
	}
}

func (s *Variable_decl_sub0Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitVariable_decl_sub0(s)
	}
}

func (p *PowerBuilderParser) Variable_decl_sub0() (localctx IVariable_decl_sub0Context) {
	this := p
	_ = this

	localctx = NewVariable_decl_sub0Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, PowerBuilderParserRULE_variable_decl_sub0)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(355)
		p.Data_type_name()
	}
	p.SetState(357)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PowerBuilderParserLCURLY {
		{
			p.SetState(356)
			p.Decimal_decl_sub()
		}

	}
	{
		p.SetState(359)
		p.Variable_name()
	}
	p.SetState(364)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == PowerBuilderParserCOMMA {
		{
			p.SetState(360)
			p.Match(PowerBuilderParserCOMMA)
		}
		{
			p.SetState(361)
			p.Variable_name()
		}

		p.SetState(366)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(369)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PowerBuilderParserEQ {
		{
			p.SetState(367)
			p.Match(PowerBuilderParserEQ)
		}
		{
			p.SetState(368)
			p.Assignment_rhs()
		}

	}

	return localctx
}

// IVariable_decl_sub1Context is an interface to support dynamic dispatch.
type IVariable_decl_sub1Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVariable_decl_sub1Context differentiates from other interfaces.
	IsVariable_decl_sub1Context()
}

type Variable_decl_sub1Context struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariable_decl_sub1Context() *Variable_decl_sub1Context {
	var p = new(Variable_decl_sub1Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_variable_decl_sub1
	return p
}

func (*Variable_decl_sub1Context) IsVariable_decl_sub1Context() {}

func NewVariable_decl_sub1Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Variable_decl_sub1Context {
	var p = new(Variable_decl_sub1Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_variable_decl_sub1

	return p
}

func (s *Variable_decl_sub1Context) GetParser() antlr.Parser { return s.parser }

func (s *Variable_decl_sub1Context) AllData_type_name() []IData_type_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IData_type_nameContext)(nil)).Elem())
	var tst = make([]IData_type_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IData_type_nameContext)
		}
	}

	return tst
}

func (s *Variable_decl_sub1Context) Data_type_name(i int) IData_type_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_type_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IData_type_nameContext)
}

func (s *Variable_decl_sub1Context) AllAssignment_statement() []IAssignment_statementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAssignment_statementContext)(nil)).Elem())
	var tst = make([]IAssignment_statementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAssignment_statementContext)
		}
	}

	return tst
}

func (s *Variable_decl_sub1Context) Assignment_statement(i int) IAssignment_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignment_statementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAssignment_statementContext)
}

func (s *Variable_decl_sub1Context) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PowerBuilderParserCOMMA)
}

func (s *Variable_decl_sub1Context) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserCOMMA, i)
}

func (s *Variable_decl_sub1Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Variable_decl_sub1Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Variable_decl_sub1Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterVariable_decl_sub1(s)
	}
}

func (s *Variable_decl_sub1Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitVariable_decl_sub1(s)
	}
}

func (p *PowerBuilderParser) Variable_decl_sub1() (localctx IVariable_decl_sub1Context) {
	this := p
	_ = this

	localctx = NewVariable_decl_sub1Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, PowerBuilderParserRULE_variable_decl_sub1)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(371)
		p.Data_type_name()
	}
	{
		p.SetState(372)
		p.Assignment_statement()
	}
	p.SetState(380)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == PowerBuilderParserCOMMA {
		{
			p.SetState(373)
			p.Match(PowerBuilderParserCOMMA)
		}
		p.SetState(375)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 25, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(374)
				p.Data_type_name()
			}

		}
		{
			p.SetState(377)
			p.Assignment_statement()
		}

		p.SetState(382)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IVariable_decl_sub2Context is an interface to support dynamic dispatch.
type IVariable_decl_sub2Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVariable_decl_sub2Context differentiates from other interfaces.
	IsVariable_decl_sub2Context()
}

type Variable_decl_sub2Context struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariable_decl_sub2Context() *Variable_decl_sub2Context {
	var p = new(Variable_decl_sub2Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_variable_decl_sub2
	return p
}

func (*Variable_decl_sub2Context) IsVariable_decl_sub2Context() {}

func NewVariable_decl_sub2Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Variable_decl_sub2Context {
	var p = new(Variable_decl_sub2Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_variable_decl_sub2

	return p
}

func (s *Variable_decl_sub2Context) GetParser() antlr.Parser { return s.parser }

func (s *Variable_decl_sub2Context) Data_type_name() IData_type_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_type_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_type_nameContext)
}

func (s *Variable_decl_sub2Context) Identifier_name_ex() IIdentifier_name_exContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_name_exContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_name_exContext)
}

func (s *Variable_decl_sub2Context) Decimal_decl_sub() IDecimal_decl_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimal_decl_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimal_decl_subContext)
}

func (s *Variable_decl_sub2Context) Array_decl_sub() IArray_decl_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArray_decl_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArray_decl_subContext)
}

func (s *Variable_decl_sub2Context) LCURLY() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserLCURLY, 0)
}

func (s *Variable_decl_sub2Context) Expression_list() IExpression_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_listContext)
}

func (s *Variable_decl_sub2Context) RCURLY() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserRCURLY, 0)
}

func (s *Variable_decl_sub2Context) EQ() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserEQ, 0)
}

func (s *Variable_decl_sub2Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Variable_decl_sub2Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Variable_decl_sub2Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterVariable_decl_sub2(s)
	}
}

func (s *Variable_decl_sub2Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitVariable_decl_sub2(s)
	}
}

func (p *PowerBuilderParser) Variable_decl_sub2() (localctx IVariable_decl_sub2Context) {
	this := p
	_ = this

	localctx = NewVariable_decl_sub2Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, PowerBuilderParserRULE_variable_decl_sub2)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(383)
		p.Data_type_name()
	}
	p.SetState(385)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PowerBuilderParserLCURLY {
		{
			p.SetState(384)
			p.Decimal_decl_sub()
		}

	}
	{
		p.SetState(387)
		p.Identifier_name_ex()
	}
	p.SetState(389)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PowerBuilderParserLBRACE {
		{
			p.SetState(388)
			p.Array_decl_sub()
		}

	}
	p.SetState(398)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PowerBuilderParserEQ || _la == PowerBuilderParserLCURLY {
		p.SetState(392)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PowerBuilderParserEQ {
			{
				p.SetState(391)
				p.Match(PowerBuilderParserEQ)
			}

		}
		{
			p.SetState(394)
			p.Match(PowerBuilderParserLCURLY)
		}
		{
			p.SetState(395)
			p.Expression_list()
		}
		{
			p.SetState(396)
			p.Match(PowerBuilderParserRCURLY)
		}

	}

	return localctx
}

// IVariable_decl_eventContext is an interface to support dynamic dispatch.
type IVariable_decl_eventContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVariable_decl_eventContext differentiates from other interfaces.
	IsVariable_decl_eventContext()
}

type Variable_decl_eventContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariable_decl_eventContext() *Variable_decl_eventContext {
	var p = new(Variable_decl_eventContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_variable_decl_event
	return p
}

func (*Variable_decl_eventContext) IsVariable_decl_eventContext() {}

func NewVariable_decl_eventContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Variable_decl_eventContext {
	var p = new(Variable_decl_eventContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_variable_decl_event

	return p
}

func (s *Variable_decl_eventContext) GetParser() antlr.Parser { return s.parser }

func (s *Variable_decl_eventContext) EVENT() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserEVENT, 0)
}

func (s *Variable_decl_eventContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Variable_decl_eventContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserLPAREN, 0)
}

func (s *Variable_decl_eventContext) Expression_list() IExpression_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_listContext)
}

func (s *Variable_decl_eventContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserRPAREN, 0)
}

func (s *Variable_decl_eventContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Variable_decl_eventContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Variable_decl_eventContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterVariable_decl_event(s)
	}
}

func (s *Variable_decl_eventContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitVariable_decl_event(s)
	}
}

func (p *PowerBuilderParser) Variable_decl_event() (localctx IVariable_decl_eventContext) {
	this := p
	_ = this

	localctx = NewVariable_decl_eventContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, PowerBuilderParserRULE_variable_decl_event)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(400)
		p.Match(PowerBuilderParserEVENT)
	}
	{
		p.SetState(401)
		p.Identifier()
	}
	p.SetState(406)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PowerBuilderParserLPAREN {
		{
			p.SetState(402)
			p.Match(PowerBuilderParserLPAREN)
		}
		{
			p.SetState(403)
			p.Expression_list()
		}
		{
			p.SetState(404)
			p.Match(PowerBuilderParserRPAREN)
		}

	}

	return localctx
}

// IDecimal_decl_subContext is an interface to support dynamic dispatch.
type IDecimal_decl_subContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDecimal_decl_subContext differentiates from other interfaces.
	IsDecimal_decl_subContext()
}

type Decimal_decl_subContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDecimal_decl_subContext() *Decimal_decl_subContext {
	var p = new(Decimal_decl_subContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_decimal_decl_sub
	return p
}

func (*Decimal_decl_subContext) IsDecimal_decl_subContext() {}

func NewDecimal_decl_subContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Decimal_decl_subContext {
	var p = new(Decimal_decl_subContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_decimal_decl_sub

	return p
}

func (s *Decimal_decl_subContext) GetParser() antlr.Parser { return s.parser }

func (s *Decimal_decl_subContext) LCURLY() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserLCURLY, 0)
}

func (s *Decimal_decl_subContext) NUMBER() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserNUMBER, 0)
}

func (s *Decimal_decl_subContext) RCURLY() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserRCURLY, 0)
}

func (s *Decimal_decl_subContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Decimal_decl_subContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Decimal_decl_subContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterDecimal_decl_sub(s)
	}
}

func (s *Decimal_decl_subContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitDecimal_decl_sub(s)
	}
}

func (p *PowerBuilderParser) Decimal_decl_sub() (localctx IDecimal_decl_subContext) {
	this := p
	_ = this

	localctx = NewDecimal_decl_subContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, PowerBuilderParserRULE_decimal_decl_sub)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(408)
		p.Match(PowerBuilderParserLCURLY)
	}
	{
		p.SetState(409)
		p.Match(PowerBuilderParserNUMBER)
	}
	{
		p.SetState(410)
		p.Match(PowerBuilderParserRCURLY)
	}

	return localctx
}

// IArray_decl_subContext is an interface to support dynamic dispatch.
type IArray_decl_subContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArray_decl_subContext differentiates from other interfaces.
	IsArray_decl_subContext()
}

type Array_decl_subContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArray_decl_subContext() *Array_decl_subContext {
	var p = new(Array_decl_subContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_array_decl_sub
	return p
}

func (*Array_decl_subContext) IsArray_decl_subContext() {}

func NewArray_decl_subContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Array_decl_subContext {
	var p = new(Array_decl_subContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_array_decl_sub

	return p
}

func (s *Array_decl_subContext) GetParser() antlr.Parser { return s.parser }

func (s *Array_decl_subContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserLBRACE, 0)
}

func (s *Array_decl_subContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserRBRACE, 0)
}

func (s *Array_decl_subContext) AllNUMBER() []antlr.TerminalNode {
	return s.GetTokens(PowerBuilderParserNUMBER)
}

func (s *Array_decl_subContext) NUMBER(i int) antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserNUMBER, i)
}

func (s *Array_decl_subContext) AllTO() []antlr.TerminalNode {
	return s.GetTokens(PowerBuilderParserTO)
}

func (s *Array_decl_subContext) TO(i int) antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserTO, i)
}

func (s *Array_decl_subContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PowerBuilderParserCOMMA)
}

func (s *Array_decl_subContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserCOMMA, i)
}

func (s *Array_decl_subContext) AllPLUS() []antlr.TerminalNode {
	return s.GetTokens(PowerBuilderParserPLUS)
}

func (s *Array_decl_subContext) PLUS(i int) antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserPLUS, i)
}

func (s *Array_decl_subContext) AllMINUS() []antlr.TerminalNode {
	return s.GetTokens(PowerBuilderParserMINUS)
}

func (s *Array_decl_subContext) MINUS(i int) antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserMINUS, i)
}

func (s *Array_decl_subContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Array_decl_subContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Array_decl_subContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterArray_decl_sub(s)
	}
}

func (s *Array_decl_subContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitArray_decl_sub(s)
	}
}

func (p *PowerBuilderParser) Array_decl_sub() (localctx IArray_decl_subContext) {
	this := p
	_ = this

	localctx = NewArray_decl_subContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, PowerBuilderParserRULE_array_decl_sub)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(446)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 40, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(412)
			p.Match(PowerBuilderParserLBRACE)
		}
		{
			p.SetState(413)
			p.Match(PowerBuilderParserRBRACE)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(414)
			p.Match(PowerBuilderParserLBRACE)
		}
		p.SetState(443)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if ((_la-126)&-(0x1f+1)) == 0 && ((1<<uint((_la-126)))&((1<<(PowerBuilderParserPLUS-126))|(1<<(PowerBuilderParserMINUS-126))|(1<<(PowerBuilderParserNUMBER-126)))) != 0 {
			p.SetState(416)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == PowerBuilderParserPLUS || _la == PowerBuilderParserMINUS {
				{
					p.SetState(415)
					_la = p.GetTokenStream().LA(1)

					if !(_la == PowerBuilderParserPLUS || _la == PowerBuilderParserMINUS) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}

			}
			{
				p.SetState(418)
				p.Match(PowerBuilderParserNUMBER)
			}
			p.SetState(424)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == PowerBuilderParserTO {
				{
					p.SetState(419)
					p.Match(PowerBuilderParserTO)
				}
				p.SetState(421)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == PowerBuilderParserPLUS || _la == PowerBuilderParserMINUS {
					{
						p.SetState(420)
						_la = p.GetTokenStream().LA(1)

						if !(_la == PowerBuilderParserPLUS || _la == PowerBuilderParserMINUS) {
							p.GetErrorHandler().RecoverInline(p)
						} else {
							p.GetErrorHandler().ReportMatch(p)
							p.Consume()
						}
					}

				}
				{
					p.SetState(423)
					p.Match(PowerBuilderParserNUMBER)
				}

			}
			p.SetState(440)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == PowerBuilderParserCOMMA {
				{
					p.SetState(426)
					p.Match(PowerBuilderParserCOMMA)
				}
				p.SetState(428)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == PowerBuilderParserPLUS || _la == PowerBuilderParserMINUS {
					{
						p.SetState(427)
						_la = p.GetTokenStream().LA(1)

						if !(_la == PowerBuilderParserPLUS || _la == PowerBuilderParserMINUS) {
							p.GetErrorHandler().RecoverInline(p)
						} else {
							p.GetErrorHandler().ReportMatch(p)
							p.Consume()
						}
					}

				}
				{
					p.SetState(430)
					p.Match(PowerBuilderParserNUMBER)
				}
				p.SetState(436)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == PowerBuilderParserTO {
					{
						p.SetState(431)
						p.Match(PowerBuilderParserTO)
					}
					p.SetState(433)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == PowerBuilderParserPLUS || _la == PowerBuilderParserMINUS {
						{
							p.SetState(432)
							_la = p.GetTokenStream().LA(1)

							if !(_la == PowerBuilderParserPLUS || _la == PowerBuilderParserMINUS) {
								p.GetErrorHandler().RecoverInline(p)
							} else {
								p.GetErrorHandler().ReportMatch(p)
								p.Consume()
							}
						}

					}
					{
						p.SetState(435)
						p.Match(PowerBuilderParserNUMBER)
					}

				}

				p.SetState(442)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		{
			p.SetState(445)
			p.Match(PowerBuilderParserRBRACE)
		}

	}

	return localctx
}

// IConstant_decl_subContext is an interface to support dynamic dispatch.
type IConstant_decl_subContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConstant_decl_subContext differentiates from other interfaces.
	IsConstant_decl_subContext()
}

type Constant_decl_subContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstant_decl_subContext() *Constant_decl_subContext {
	var p = new(Constant_decl_subContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_constant_decl_sub
	return p
}

func (*Constant_decl_subContext) IsConstant_decl_subContext() {}

func NewConstant_decl_subContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Constant_decl_subContext {
	var p = new(Constant_decl_subContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_constant_decl_sub

	return p
}

func (s *Constant_decl_subContext) GetParser() antlr.Parser { return s.parser }

func (s *Constant_decl_subContext) CONSTANT() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserCONSTANT, 0)
}

func (s *Constant_decl_subContext) Variable_decl_sub() IVariable_decl_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_decl_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariable_decl_subContext)
}

func (s *Constant_decl_subContext) Access_type() IAccess_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAccess_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAccess_typeContext)
}

func (s *Constant_decl_subContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Constant_decl_subContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Constant_decl_subContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterConstant_decl_sub(s)
	}
}

func (s *Constant_decl_subContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitConstant_decl_sub(s)
	}
}

func (p *PowerBuilderParser) Constant_decl_sub() (localctx IConstant_decl_subContext) {
	this := p
	_ = this

	localctx = NewConstant_decl_subContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, PowerBuilderParserRULE_constant_decl_sub)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(449)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if ((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(PowerBuilderParserPUBLIC-32))|(1<<(PowerBuilderParserPRIVATE-32))|(1<<(PowerBuilderParserPROTECTED-32)))) != 0 {
		{
			p.SetState(448)
			p.Access_type()
		}

	}
	{
		p.SetState(451)
		p.Match(PowerBuilderParserCONSTANT)
	}
	{
		p.SetState(452)
		p.Variable_decl_sub()
	}

	return localctx
}

// IConstant_declContext is an interface to support dynamic dispatch.
type IConstant_declContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConstant_declContext differentiates from other interfaces.
	IsConstant_declContext()
}

type Constant_declContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstant_declContext() *Constant_declContext {
	var p = new(Constant_declContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_constant_decl
	return p
}

func (*Constant_declContext) IsConstant_declContext() {}

func NewConstant_declContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Constant_declContext {
	var p = new(Constant_declContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_constant_decl

	return p
}

func (s *Constant_declContext) GetParser() antlr.Parser { return s.parser }

func (s *Constant_declContext) Constant_decl_sub() IConstant_decl_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstant_decl_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstant_decl_subContext)
}

func (s *Constant_declContext) SEMI() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserSEMI, 0)
}

func (s *Constant_declContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Constant_declContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Constant_declContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterConstant_decl(s)
	}
}

func (s *Constant_declContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitConstant_decl(s)
	}
}

func (p *PowerBuilderParser) Constant_decl() (localctx IConstant_declContext) {
	this := p
	_ = this

	localctx = NewConstant_declContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, PowerBuilderParserRULE_constant_decl)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(454)
		p.Constant_decl_sub()
	}
	p.SetState(456)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 42, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(455)
			p.Match(PowerBuilderParserSEMI)
		}

	}

	return localctx
}

// IFunction_forward_declContext is an interface to support dynamic dispatch.
type IFunction_forward_declContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunction_forward_declContext differentiates from other interfaces.
	IsFunction_forward_declContext()
}

type Function_forward_declContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunction_forward_declContext() *Function_forward_declContext {
	var p = new(Function_forward_declContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_function_forward_decl
	return p
}

func (*Function_forward_declContext) IsFunction_forward_declContext() {}

func NewFunction_forward_declContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_forward_declContext {
	var p = new(Function_forward_declContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_function_forward_decl

	return p
}

func (s *Function_forward_declContext) GetParser() antlr.Parser { return s.parser }

func (s *Function_forward_declContext) Identifier_name() IIdentifier_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_nameContext)
}

func (s *Function_forward_declContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserLPAREN, 0)
}

func (s *Function_forward_declContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserRPAREN, 0)
}

func (s *Function_forward_declContext) Function_forward_decl_alias() IFunction_forward_decl_aliasContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_forward_decl_aliasContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_forward_decl_aliasContext)
}

func (s *Function_forward_declContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserFUNCTION, 0)
}

func (s *Function_forward_declContext) Data_type_name() IData_type_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_type_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_type_nameContext)
}

func (s *Function_forward_declContext) SUBROUTINE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserSUBROUTINE, 0)
}

func (s *Function_forward_declContext) Access_modif_part() IAccess_modif_partContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAccess_modif_partContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAccess_modif_partContext)
}

func (s *Function_forward_declContext) Scope_modif() IScope_modifContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IScope_modifContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IScope_modifContext)
}

func (s *Function_forward_declContext) Parameters_list_sub() IParameters_list_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameters_list_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameters_list_subContext)
}

func (s *Function_forward_declContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_forward_declContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Function_forward_declContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterFunction_forward_decl(s)
	}
}

func (s *Function_forward_declContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitFunction_forward_decl(s)
	}
}

func (p *PowerBuilderParser) Function_forward_decl() (localctx IFunction_forward_declContext) {
	this := p
	_ = this

	localctx = NewFunction_forward_declContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, PowerBuilderParserRULE_function_forward_decl)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(459)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if ((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(PowerBuilderParserPUBLIC-32))|(1<<(PowerBuilderParserPRIVATE-32))|(1<<(PowerBuilderParserPRIVATEWRITE-32))|(1<<(PowerBuilderParserPROTECTED-32))|(1<<(PowerBuilderParserPRIVATEREAD-32))|(1<<(PowerBuilderParserPROTECTEDREAD-32))|(1<<(PowerBuilderParserPROTECTEDWRITE-32)))) != 0 {
		{
			p.SetState(458)
			p.Access_modif_part()
		}

	}
	p.SetState(462)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PowerBuilderParserGLOBAL || _la == PowerBuilderParserLOCAL {
		{
			p.SetState(461)
			p.Scope_modif()
		}

	}
	p.SetState(467)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PowerBuilderParserFUNCTION:
		{
			p.SetState(464)
			p.Match(PowerBuilderParserFUNCTION)
		}
		{
			p.SetState(465)
			p.Data_type_name()
		}

	case PowerBuilderParserSUBROUTINE:
		{
			p.SetState(466)
			p.Match(PowerBuilderParserSUBROUTINE)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(469)
		p.Identifier_name()
	}
	{
		p.SetState(470)
		p.Match(PowerBuilderParserLPAREN)
	}
	p.SetState(472)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<PowerBuilderParserANY)|(1<<PowerBuilderParserBLOB)|(1<<PowerBuilderParserBOOLEAN)|(1<<PowerBuilderParserBYTE)|(1<<PowerBuilderParserCHARACTER)|(1<<PowerBuilderParserCHAR)|(1<<PowerBuilderParserDATE_TYPE)|(1<<PowerBuilderParserDATETIME)|(1<<PowerBuilderParserDECIMAL)|(1<<PowerBuilderParserDEC)|(1<<PowerBuilderParserDOUBLE)|(1<<PowerBuilderParserINTEGER)|(1<<PowerBuilderParserINT)|(1<<PowerBuilderParserLONG)|(1<<PowerBuilderParserLONGLONG)|(1<<PowerBuilderParserREAL)|(1<<PowerBuilderParserSTRING)|(1<<PowerBuilderParserTIME_TYPE)|(1<<PowerBuilderParserUNSIGNEDINTEGER)|(1<<PowerBuilderParserUINT)|(1<<PowerBuilderParserUNSIGNEDLONG)|(1<<PowerBuilderParserULONG)|(1<<PowerBuilderParserWINDOW))) != 0) || _la == PowerBuilderParserREADONLY || _la == PowerBuilderParserREF || _la == PowerBuilderParserUNDERSCORE || _la == PowerBuilderParserID {
		{
			p.SetState(471)
			p.Parameters_list_sub()
		}

	}
	{
		p.SetState(474)
		p.Match(PowerBuilderParserRPAREN)
	}
	{
		p.SetState(475)
		p.Function_forward_decl_alias()
	}

	return localctx
}

// IFunction_forward_decl_aliasContext is an interface to support dynamic dispatch.
type IFunction_forward_decl_aliasContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunction_forward_decl_aliasContext differentiates from other interfaces.
	IsFunction_forward_decl_aliasContext()
}

type Function_forward_decl_aliasContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunction_forward_decl_aliasContext() *Function_forward_decl_aliasContext {
	var p = new(Function_forward_decl_aliasContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_function_forward_decl_alias
	return p
}

func (*Function_forward_decl_aliasContext) IsFunction_forward_decl_aliasContext() {}

func NewFunction_forward_decl_aliasContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_forward_decl_aliasContext {
	var p = new(Function_forward_decl_aliasContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_function_forward_decl_alias

	return p
}

func (s *Function_forward_decl_aliasContext) GetParser() antlr.Parser { return s.parser }

func (s *Function_forward_decl_aliasContext) ALIAS() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserALIAS, 0)
}

func (s *Function_forward_decl_aliasContext) FOR() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserFOR, 0)
}

func (s *Function_forward_decl_aliasContext) Identifier_name() IIdentifier_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_nameContext)
}

func (s *Function_forward_decl_aliasContext) LIBRARY() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserLIBRARY, 0)
}

func (s *Function_forward_decl_aliasContext) AllDQUOTED_STRING() []antlr.TerminalNode {
	return s.GetTokens(PowerBuilderParserDQUOTED_STRING)
}

func (s *Function_forward_decl_aliasContext) DQUOTED_STRING(i int) antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserDQUOTED_STRING, i)
}

func (s *Function_forward_decl_aliasContext) AllQUOTED_STRING() []antlr.TerminalNode {
	return s.GetTokens(PowerBuilderParserQUOTED_STRING)
}

func (s *Function_forward_decl_aliasContext) QUOTED_STRING(i int) antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserQUOTED_STRING, i)
}

func (s *Function_forward_decl_aliasContext) RPCFUNC() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserRPCFUNC, 0)
}

func (s *Function_forward_decl_aliasContext) THROWS() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserTHROWS, 0)
}

func (s *Function_forward_decl_aliasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_forward_decl_aliasContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Function_forward_decl_aliasContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterFunction_forward_decl_alias(s)
	}
}

func (s *Function_forward_decl_aliasContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitFunction_forward_decl_alias(s)
	}
}

func (p *PowerBuilderParser) Function_forward_decl_alias() (localctx IFunction_forward_decl_aliasContext) {
	this := p
	_ = this

	localctx = NewFunction_forward_decl_aliasContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, PowerBuilderParserRULE_function_forward_decl_alias)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(502)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 51, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(477)
			p.Match(PowerBuilderParserALIAS)
		}
		{
			p.SetState(478)
			p.Match(PowerBuilderParserFOR)
		}
		{
			p.SetState(479)
			p.Identifier_name()
		}
		{
			p.SetState(480)
			p.Match(PowerBuilderParserLIBRARY)
		}
		{
			p.SetState(481)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PowerBuilderParserDQUOTED_STRING || _la == PowerBuilderParserQUOTED_STRING) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(490)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PowerBuilderParserLIBRARY {
			{
				p.SetState(483)
				p.Match(PowerBuilderParserLIBRARY)
			}
			{
				p.SetState(484)
				_la = p.GetTokenStream().LA(1)

				if !(_la == PowerBuilderParserDQUOTED_STRING || _la == PowerBuilderParserQUOTED_STRING) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			p.SetState(488)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == PowerBuilderParserALIAS {
				{
					p.SetState(485)
					p.Match(PowerBuilderParserALIAS)
				}
				{
					p.SetState(486)
					p.Match(PowerBuilderParserFOR)
				}
				{
					p.SetState(487)
					_la = p.GetTokenStream().LA(1)

					if !(_la == PowerBuilderParserDQUOTED_STRING || _la == PowerBuilderParserQUOTED_STRING) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}

			}

		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		p.SetState(496)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PowerBuilderParserRPCFUNC {
			{
				p.SetState(492)
				p.Match(PowerBuilderParserRPCFUNC)
			}
			{
				p.SetState(493)
				p.Match(PowerBuilderParserALIAS)
			}
			{
				p.SetState(494)
				p.Match(PowerBuilderParserFOR)
			}
			{
				p.SetState(495)
				_la = p.GetTokenStream().LA(1)

				if !(_la == PowerBuilderParserDQUOTED_STRING || _la == PowerBuilderParserQUOTED_STRING) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		p.SetState(500)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PowerBuilderParserTHROWS {
			{
				p.SetState(498)
				p.Match(PowerBuilderParserTHROWS)
			}
			{
				p.SetState(499)
				p.Identifier_name()
			}

		}

	}

	return localctx
}

// IParameter_subContext is an interface to support dynamic dispatch.
type IParameter_subContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParameter_subContext differentiates from other interfaces.
	IsParameter_subContext()
}

type Parameter_subContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParameter_subContext() *Parameter_subContext {
	var p = new(Parameter_subContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_parameter_sub
	return p
}

func (*Parameter_subContext) IsParameter_subContext() {}

func NewParameter_subContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Parameter_subContext {
	var p = new(Parameter_subContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_parameter_sub

	return p
}

func (s *Parameter_subContext) GetParser() antlr.Parser { return s.parser }

func (s *Parameter_subContext) Data_type_name() IData_type_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_type_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_type_nameContext)
}

func (s *Parameter_subContext) Identifier_name() IIdentifier_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_nameContext)
}

func (s *Parameter_subContext) READONLY() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserREADONLY, 0)
}

func (s *Parameter_subContext) REF() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserREF, 0)
}

func (s *Parameter_subContext) Decimal_decl_sub() IDecimal_decl_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimal_decl_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimal_decl_subContext)
}

func (s *Parameter_subContext) Array_decl_sub() IArray_decl_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArray_decl_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArray_decl_subContext)
}

func (s *Parameter_subContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Parameter_subContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Parameter_subContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterParameter_sub(s)
	}
}

func (s *Parameter_subContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitParameter_sub(s)
	}
}

func (p *PowerBuilderParser) Parameter_sub() (localctx IParameter_subContext) {
	this := p
	_ = this

	localctx = NewParameter_subContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, PowerBuilderParserRULE_parameter_sub)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(505)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PowerBuilderParserREADONLY {
		{
			p.SetState(504)
			p.Match(PowerBuilderParserREADONLY)
		}

	}
	p.SetState(508)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PowerBuilderParserREF {
		{
			p.SetState(507)
			p.Match(PowerBuilderParserREF)
		}

	}
	{
		p.SetState(510)
		p.Data_type_name()
	}
	p.SetState(512)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PowerBuilderParserLCURLY {
		{
			p.SetState(511)
			p.Decimal_decl_sub()
		}

	}
	{
		p.SetState(514)
		p.Identifier_name()
	}
	p.SetState(516)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PowerBuilderParserLBRACE {
		{
			p.SetState(515)
			p.Array_decl_sub()
		}

	}

	return localctx
}

// IParameters_list_subContext is an interface to support dynamic dispatch.
type IParameters_list_subContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParameters_list_subContext differentiates from other interfaces.
	IsParameters_list_subContext()
}

type Parameters_list_subContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParameters_list_subContext() *Parameters_list_subContext {
	var p = new(Parameters_list_subContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_parameters_list_sub
	return p
}

func (*Parameters_list_subContext) IsParameters_list_subContext() {}

func NewParameters_list_subContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Parameters_list_subContext {
	var p = new(Parameters_list_subContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_parameters_list_sub

	return p
}

func (s *Parameters_list_subContext) GetParser() antlr.Parser { return s.parser }

func (s *Parameters_list_subContext) AllParameter_sub() []IParameter_subContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IParameter_subContext)(nil)).Elem())
	var tst = make([]IParameter_subContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IParameter_subContext)
		}
	}

	return tst
}

func (s *Parameters_list_subContext) Parameter_sub(i int) IParameter_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameter_subContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IParameter_subContext)
}

func (s *Parameters_list_subContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PowerBuilderParserCOMMA)
}

func (s *Parameters_list_subContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserCOMMA, i)
}

func (s *Parameters_list_subContext) DOTDOTDOT() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserDOTDOTDOT, 0)
}

func (s *Parameters_list_subContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Parameters_list_subContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Parameters_list_subContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterParameters_list_sub(s)
	}
}

func (s *Parameters_list_subContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitParameters_list_sub(s)
	}
}

func (p *PowerBuilderParser) Parameters_list_sub() (localctx IParameters_list_subContext) {
	this := p
	_ = this

	localctx = NewParameters_list_subContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, PowerBuilderParserRULE_parameters_list_sub)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(518)
		p.Parameter_sub()
	}
	p.SetState(523)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 56, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(519)
				p.Match(PowerBuilderParserCOMMA)
			}
			{
				p.SetState(520)
				p.Parameter_sub()
			}

		}
		p.SetState(525)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 56, p.GetParserRuleContext())
	}
	p.SetState(528)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PowerBuilderParserCOMMA {
		{
			p.SetState(526)
			p.Match(PowerBuilderParserCOMMA)
		}
		{
			p.SetState(527)
			p.Match(PowerBuilderParserDOTDOTDOT)
		}

	}

	return localctx
}

// IFunctions_forward_declContext is an interface to support dynamic dispatch.
type IFunctions_forward_declContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctions_forward_declContext differentiates from other interfaces.
	IsFunctions_forward_declContext()
}

type Functions_forward_declContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctions_forward_declContext() *Functions_forward_declContext {
	var p = new(Functions_forward_declContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_functions_forward_decl
	return p
}

func (*Functions_forward_declContext) IsFunctions_forward_declContext() {}

func NewFunctions_forward_declContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Functions_forward_declContext {
	var p = new(Functions_forward_declContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_functions_forward_decl

	return p
}

func (s *Functions_forward_declContext) GetParser() antlr.Parser { return s.parser }

func (s *Functions_forward_declContext) AllPROTOTYPES() []antlr.TerminalNode {
	return s.GetTokens(PowerBuilderParserPROTOTYPES)
}

func (s *Functions_forward_declContext) PROTOTYPES(i int) antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserPROTOTYPES, i)
}

func (s *Functions_forward_declContext) END() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserEND, 0)
}

func (s *Functions_forward_declContext) FORWARD() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserFORWARD, 0)
}

func (s *Functions_forward_declContext) TYPE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserTYPE, 0)
}

func (s *Functions_forward_declContext) AllFunction_forward_decl() []IFunction_forward_declContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunction_forward_declContext)(nil)).Elem())
	var tst = make([]IFunction_forward_declContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunction_forward_declContext)
		}
	}

	return tst
}

func (s *Functions_forward_declContext) Function_forward_decl(i int) IFunction_forward_declContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_forward_declContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunction_forward_declContext)
}

func (s *Functions_forward_declContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Functions_forward_declContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Functions_forward_declContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterFunctions_forward_decl(s)
	}
}

func (s *Functions_forward_declContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitFunctions_forward_decl(s)
	}
}

func (p *PowerBuilderParser) Functions_forward_decl() (localctx IFunctions_forward_declContext) {
	this := p
	_ = this

	localctx = NewFunctions_forward_declContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, PowerBuilderParserRULE_functions_forward_decl)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(530)
		_la = p.GetTokenStream().LA(1)

		if !(_la == PowerBuilderParserFORWARD || _la == PowerBuilderParserTYPE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(531)
		p.Match(PowerBuilderParserPROTOTYPES)
	}
	p.SetState(535)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ((_la-26)&-(0x1f+1)) == 0 && ((1<<uint((_la-26)))&((1<<(PowerBuilderParserGLOBAL-26))|(1<<(PowerBuilderParserPUBLIC-26))|(1<<(PowerBuilderParserPRIVATE-26))|(1<<(PowerBuilderParserFUNCTION-26))|(1<<(PowerBuilderParserSUBROUTINE-26))|(1<<(PowerBuilderParserPRIVATEWRITE-26))|(1<<(PowerBuilderParserPROTECTED-26))|(1<<(PowerBuilderParserPRIVATEREAD-26))|(1<<(PowerBuilderParserPROTECTEDREAD-26))|(1<<(PowerBuilderParserPROTECTEDWRITE-26))|(1<<(PowerBuilderParserLOCAL-26)))) != 0 {
		{
			p.SetState(532)
			p.Function_forward_decl()
		}

		p.SetState(537)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(538)
		p.Match(PowerBuilderParserEND)
	}
	{
		p.SetState(539)
		p.Match(PowerBuilderParserPROTOTYPES)
	}

	return localctx
}

// IFunction_bodyContext is an interface to support dynamic dispatch.
type IFunction_bodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunction_bodyContext differentiates from other interfaces.
	IsFunction_bodyContext()
}

type Function_bodyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunction_bodyContext() *Function_bodyContext {
	var p = new(Function_bodyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_function_body
	return p
}

func (*Function_bodyContext) IsFunction_bodyContext() {}

func NewFunction_bodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_bodyContext {
	var p = new(Function_bodyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_function_body

	return p
}

func (s *Function_bodyContext) GetParser() antlr.Parser { return s.parser }

func (s *Function_bodyContext) AllIdentifier_name() []IIdentifier_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifier_nameContext)(nil)).Elem())
	var tst = make([]IIdentifier_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifier_nameContext)
		}
	}

	return tst
}

func (s *Function_bodyContext) Identifier_name(i int) IIdentifier_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_nameContext)
}

func (s *Function_bodyContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserLPAREN, 0)
}

func (s *Function_bodyContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserRPAREN, 0)
}

func (s *Function_bodyContext) END() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserEND, 0)
}

func (s *Function_bodyContext) AllFUNCTION() []antlr.TerminalNode {
	return s.GetTokens(PowerBuilderParserFUNCTION)
}

func (s *Function_bodyContext) FUNCTION(i int) antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserFUNCTION, i)
}

func (s *Function_bodyContext) AllSUBROUTINE() []antlr.TerminalNode {
	return s.GetTokens(PowerBuilderParserSUBROUTINE)
}

func (s *Function_bodyContext) SUBROUTINE(i int) antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserSUBROUTINE, i)
}

func (s *Function_bodyContext) Data_type_name() IData_type_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_type_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_type_nameContext)
}

func (s *Function_bodyContext) Access_type() IAccess_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAccess_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAccess_typeContext)
}

func (s *Function_bodyContext) Scope_modif() IScope_modifContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IScope_modifContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IScope_modifContext)
}

func (s *Function_bodyContext) Parameters_list_sub() IParameters_list_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameters_list_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameters_list_subContext)
}

func (s *Function_bodyContext) THROWS() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserTHROWS, 0)
}

func (s *Function_bodyContext) AllSEMI() []antlr.TerminalNode {
	return s.GetTokens(PowerBuilderParserSEMI)
}

func (s *Function_bodyContext) SEMI(i int) antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserSEMI, i)
}

func (s *Function_bodyContext) AllStatement() []IStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatementContext)(nil)).Elem())
	var tst = make([]IStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatementContext)
		}
	}

	return tst
}

func (s *Function_bodyContext) Statement(i int) IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *Function_bodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_bodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Function_bodyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterFunction_body(s)
	}
}

func (s *Function_bodyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitFunction_body(s)
	}
}

func (p *PowerBuilderParser) Function_body() (localctx IFunction_bodyContext) {
	this := p
	_ = this

	localctx = NewFunction_bodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, PowerBuilderParserRULE_function_body)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(542)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if ((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(PowerBuilderParserPUBLIC-32))|(1<<(PowerBuilderParserPRIVATE-32))|(1<<(PowerBuilderParserPROTECTED-32)))) != 0 {
		{
			p.SetState(541)
			p.Access_type()
		}

	}
	p.SetState(545)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PowerBuilderParserGLOBAL || _la == PowerBuilderParserLOCAL {
		{
			p.SetState(544)
			p.Scope_modif()
		}

	}
	p.SetState(550)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PowerBuilderParserFUNCTION:
		{
			p.SetState(547)
			p.Match(PowerBuilderParserFUNCTION)
		}
		{
			p.SetState(548)
			p.Data_type_name()
		}

	case PowerBuilderParserSUBROUTINE:
		{
			p.SetState(549)
			p.Match(PowerBuilderParserSUBROUTINE)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(552)
		p.Identifier_name()
	}
	{
		p.SetState(553)
		p.Match(PowerBuilderParserLPAREN)
	}
	p.SetState(555)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<PowerBuilderParserANY)|(1<<PowerBuilderParserBLOB)|(1<<PowerBuilderParserBOOLEAN)|(1<<PowerBuilderParserBYTE)|(1<<PowerBuilderParserCHARACTER)|(1<<PowerBuilderParserCHAR)|(1<<PowerBuilderParserDATE_TYPE)|(1<<PowerBuilderParserDATETIME)|(1<<PowerBuilderParserDECIMAL)|(1<<PowerBuilderParserDEC)|(1<<PowerBuilderParserDOUBLE)|(1<<PowerBuilderParserINTEGER)|(1<<PowerBuilderParserINT)|(1<<PowerBuilderParserLONG)|(1<<PowerBuilderParserLONGLONG)|(1<<PowerBuilderParserREAL)|(1<<PowerBuilderParserSTRING)|(1<<PowerBuilderParserTIME_TYPE)|(1<<PowerBuilderParserUNSIGNEDINTEGER)|(1<<PowerBuilderParserUINT)|(1<<PowerBuilderParserUNSIGNEDLONG)|(1<<PowerBuilderParserULONG)|(1<<PowerBuilderParserWINDOW))) != 0) || _la == PowerBuilderParserREADONLY || _la == PowerBuilderParserREF || _la == PowerBuilderParserUNDERSCORE || _la == PowerBuilderParserID {
		{
			p.SetState(554)
			p.Parameters_list_sub()
		}

	}
	{
		p.SetState(557)
		p.Match(PowerBuilderParserRPAREN)
	}
	p.SetState(560)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PowerBuilderParserTHROWS {
		{
			p.SetState(558)
			p.Match(PowerBuilderParserTHROWS)
		}
		{
			p.SetState(559)
			p.Identifier_name()
		}

	}
	p.SetState(563)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PowerBuilderParserSEMI {
		{
			p.SetState(562)
			p.Match(PowerBuilderParserSEMI)
		}

	}
	p.SetState(571)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<PowerBuilderParserANY)|(1<<PowerBuilderParserBLOB)|(1<<PowerBuilderParserBOOLEAN)|(1<<PowerBuilderParserBYTE)|(1<<PowerBuilderParserCHARACTER)|(1<<PowerBuilderParserCHAR)|(1<<PowerBuilderParserDATE_TYPE)|(1<<PowerBuilderParserDATETIME)|(1<<PowerBuilderParserDECIMAL)|(1<<PowerBuilderParserDEC)|(1<<PowerBuilderParserDOUBLE)|(1<<PowerBuilderParserINTEGER)|(1<<PowerBuilderParserINT)|(1<<PowerBuilderParserLONG)|(1<<PowerBuilderParserLONGLONG)|(1<<PowerBuilderParserREAL)|(1<<PowerBuilderParserSTRING)|(1<<PowerBuilderParserTIME_TYPE)|(1<<PowerBuilderParserUNSIGNEDINTEGER)|(1<<PowerBuilderParserUINT)|(1<<PowerBuilderParserUNSIGNEDLONG)|(1<<PowerBuilderParserULONG)|(1<<PowerBuilderParserWINDOW)|(1<<PowerBuilderParserGLOBAL)|(1<<PowerBuilderParserINDIRECT))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(PowerBuilderParserPUBLIC-32))|(1<<(PowerBuilderParserPRIVATE-32))|(1<<(PowerBuilderParserFUNCTION-32))|(1<<(PowerBuilderParserREADONLY-32))|(1<<(PowerBuilderParserTYPE-32))|(1<<(PowerBuilderParserUPDATE-32))|(1<<(PowerBuilderParserDYNAMIC-32))|(1<<(PowerBuilderParserPRIVATEWRITE-32))|(1<<(PowerBuilderParserPROTECTED-32))|(1<<(PowerBuilderParserPRIVATEREAD-32))|(1<<(PowerBuilderParserPROTECTEDREAD-32))|(1<<(PowerBuilderParserPROTECTEDWRITE-32))|(1<<(PowerBuilderParserLOCAL-32))|(1<<(PowerBuilderParserEVENT-32))|(1<<(PowerBuilderParserOPEN-32))|(1<<(PowerBuilderParserGOTO-32))|(1<<(PowerBuilderParserIF-32))|(1<<(PowerBuilderParserTRY-32))|(1<<(PowerBuilderParserEXIT-32))|(1<<(PowerBuilderParserCHOOSE-32)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(PowerBuilderParserCONTINUE-65))|(1<<(PowerBuilderParserDO-65))|(1<<(PowerBuilderParserFOR-65))|(1<<(PowerBuilderParserCLOSE-65))|(1<<(PowerBuilderParserTHROW-65))|(1<<(PowerBuilderParserCREATE-65))|(1<<(PowerBuilderParserDESTROY-65))|(1<<(PowerBuilderParserPOST-65))|(1<<(PowerBuilderParserTRIGGER-65))|(1<<(PowerBuilderParserSELECT-65))|(1<<(PowerBuilderParserDELETE-65))|(1<<(PowerBuilderParserINSERT-65))|(1<<(PowerBuilderParserDESCRIBE-65))|(1<<(PowerBuilderParserRETURN-65))|(1<<(PowerBuilderParserCALL-65))|(1<<(PowerBuilderParserHALT-65))|(1<<(PowerBuilderParserSUPER-65))|(1<<(PowerBuilderParserSYSTEM-65)))) != 0) || (((_la-101)&-(0x1f+1)) == 0 && ((1<<uint((_la-101)))&((1<<(PowerBuilderParserSQLCA-101))|(1<<(PowerBuilderParserEXECUTE-101))|(1<<(PowerBuilderParserDECLARE-101))|(1<<(PowerBuilderParserVALUES-101))|(1<<(PowerBuilderParserCOMMIT-101))|(1<<(PowerBuilderParserPREPARE-101))|(1<<(PowerBuilderParserFETCH-101))|(1<<(PowerBuilderParserCONNECT-101))|(1<<(PowerBuilderParserDISCONNECT-101))|(1<<(PowerBuilderParserCONSTANT-101))|(1<<(PowerBuilderParserSELECTBLOB-101))|(1<<(PowerBuilderParserUPDATEBLOB-101))|(1<<(PowerBuilderParserROLLBACK-101))|(1<<(PowerBuilderParserCOLONCOLON-101)))) != 0) || (((_la-152)&-(0x1f+1)) == 0 && ((1<<uint((_la-152)))&((1<<(PowerBuilderParserAT-152))|(1<<(PowerBuilderParserUNDERSCORE-152))|(1<<(PowerBuilderParserID-152)))) != 0) {
		{
			p.SetState(565)
			p.Statement()
		}
		p.SetState(567)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PowerBuilderParserSEMI {
			{
				p.SetState(566)
				p.Match(PowerBuilderParserSEMI)
			}

		}

		p.SetState(573)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(574)
		p.Match(PowerBuilderParserEND)
	}
	{
		p.SetState(575)
		_la = p.GetTokenStream().LA(1)

		if !(_la == PowerBuilderParserFUNCTION || _la == PowerBuilderParserSUBROUTINE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IOn_bodyContext is an interface to support dynamic dispatch.
type IOn_bodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOn_bodyContext differentiates from other interfaces.
	IsOn_bodyContext()
}

type On_bodyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOn_bodyContext() *On_bodyContext {
	var p = new(On_bodyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_on_body
	return p
}

func (*On_bodyContext) IsOn_bodyContext() {}

func NewOn_bodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *On_bodyContext {
	var p = new(On_bodyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_on_body

	return p
}

func (s *On_bodyContext) GetParser() antlr.Parser { return s.parser }

func (s *On_bodyContext) AllON() []antlr.TerminalNode {
	return s.GetTokens(PowerBuilderParserON)
}

func (s *On_bodyContext) ON(i int) antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserON, i)
}

func (s *On_bodyContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *On_bodyContext) END() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserEND, 0)
}

func (s *On_bodyContext) DOT() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserDOT, 0)
}

func (s *On_bodyContext) OPEN() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserOPEN, 0)
}

func (s *On_bodyContext) CLOSE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserCLOSE, 0)
}

func (s *On_bodyContext) AllSEMI() []antlr.TerminalNode {
	return s.GetTokens(PowerBuilderParserSEMI)
}

func (s *On_bodyContext) SEMI(i int) antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserSEMI, i)
}

func (s *On_bodyContext) AllStatement() []IStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatementContext)(nil)).Elem())
	var tst = make([]IStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatementContext)
		}
	}

	return tst
}

func (s *On_bodyContext) Statement(i int) IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *On_bodyContext) CREATE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserCREATE, 0)
}

func (s *On_bodyContext) DESTROY() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserDESTROY, 0)
}

func (s *On_bodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *On_bodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *On_bodyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterOn_body(s)
	}
}

func (s *On_bodyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitOn_body(s)
	}
}

func (p *PowerBuilderParser) On_body() (localctx IOn_bodyContext) {
	this := p
	_ = this

	localctx = NewOn_bodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, PowerBuilderParserRULE_on_body)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(577)
		p.Match(PowerBuilderParserON)
	}
	{
		p.SetState(578)
		p.Identifier()
	}
	p.SetState(583)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 67, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(579)
			p.Match(PowerBuilderParserDOT)
		}
		{
			p.SetState(580)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PowerBuilderParserCREATE || _la == PowerBuilderParserDESTROY) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 67, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(581)
			p.Match(PowerBuilderParserOPEN)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 67, p.GetParserRuleContext()) == 3 {
		{
			p.SetState(582)
			p.Match(PowerBuilderParserCLOSE)
		}

	}
	p.SetState(586)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PowerBuilderParserSEMI {
		{
			p.SetState(585)
			p.Match(PowerBuilderParserSEMI)
		}

	}
	p.SetState(594)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<PowerBuilderParserANY)|(1<<PowerBuilderParserBLOB)|(1<<PowerBuilderParserBOOLEAN)|(1<<PowerBuilderParserBYTE)|(1<<PowerBuilderParserCHARACTER)|(1<<PowerBuilderParserCHAR)|(1<<PowerBuilderParserDATE_TYPE)|(1<<PowerBuilderParserDATETIME)|(1<<PowerBuilderParserDECIMAL)|(1<<PowerBuilderParserDEC)|(1<<PowerBuilderParserDOUBLE)|(1<<PowerBuilderParserINTEGER)|(1<<PowerBuilderParserINT)|(1<<PowerBuilderParserLONG)|(1<<PowerBuilderParserLONGLONG)|(1<<PowerBuilderParserREAL)|(1<<PowerBuilderParserSTRING)|(1<<PowerBuilderParserTIME_TYPE)|(1<<PowerBuilderParserUNSIGNEDINTEGER)|(1<<PowerBuilderParserUINT)|(1<<PowerBuilderParserUNSIGNEDLONG)|(1<<PowerBuilderParserULONG)|(1<<PowerBuilderParserWINDOW)|(1<<PowerBuilderParserGLOBAL)|(1<<PowerBuilderParserINDIRECT))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(PowerBuilderParserPUBLIC-32))|(1<<(PowerBuilderParserPRIVATE-32))|(1<<(PowerBuilderParserFUNCTION-32))|(1<<(PowerBuilderParserREADONLY-32))|(1<<(PowerBuilderParserTYPE-32))|(1<<(PowerBuilderParserUPDATE-32))|(1<<(PowerBuilderParserDYNAMIC-32))|(1<<(PowerBuilderParserPRIVATEWRITE-32))|(1<<(PowerBuilderParserPROTECTED-32))|(1<<(PowerBuilderParserPRIVATEREAD-32))|(1<<(PowerBuilderParserPROTECTEDREAD-32))|(1<<(PowerBuilderParserPROTECTEDWRITE-32))|(1<<(PowerBuilderParserLOCAL-32))|(1<<(PowerBuilderParserEVENT-32))|(1<<(PowerBuilderParserOPEN-32))|(1<<(PowerBuilderParserGOTO-32))|(1<<(PowerBuilderParserIF-32))|(1<<(PowerBuilderParserTRY-32))|(1<<(PowerBuilderParserEXIT-32))|(1<<(PowerBuilderParserCHOOSE-32)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(PowerBuilderParserCONTINUE-65))|(1<<(PowerBuilderParserDO-65))|(1<<(PowerBuilderParserFOR-65))|(1<<(PowerBuilderParserCLOSE-65))|(1<<(PowerBuilderParserTHROW-65))|(1<<(PowerBuilderParserCREATE-65))|(1<<(PowerBuilderParserDESTROY-65))|(1<<(PowerBuilderParserPOST-65))|(1<<(PowerBuilderParserTRIGGER-65))|(1<<(PowerBuilderParserSELECT-65))|(1<<(PowerBuilderParserDELETE-65))|(1<<(PowerBuilderParserINSERT-65))|(1<<(PowerBuilderParserDESCRIBE-65))|(1<<(PowerBuilderParserRETURN-65))|(1<<(PowerBuilderParserCALL-65))|(1<<(PowerBuilderParserHALT-65))|(1<<(PowerBuilderParserSUPER-65))|(1<<(PowerBuilderParserSYSTEM-65)))) != 0) || (((_la-101)&-(0x1f+1)) == 0 && ((1<<uint((_la-101)))&((1<<(PowerBuilderParserSQLCA-101))|(1<<(PowerBuilderParserEXECUTE-101))|(1<<(PowerBuilderParserDECLARE-101))|(1<<(PowerBuilderParserVALUES-101))|(1<<(PowerBuilderParserCOMMIT-101))|(1<<(PowerBuilderParserPREPARE-101))|(1<<(PowerBuilderParserFETCH-101))|(1<<(PowerBuilderParserCONNECT-101))|(1<<(PowerBuilderParserDISCONNECT-101))|(1<<(PowerBuilderParserCONSTANT-101))|(1<<(PowerBuilderParserSELECTBLOB-101))|(1<<(PowerBuilderParserUPDATEBLOB-101))|(1<<(PowerBuilderParserROLLBACK-101))|(1<<(PowerBuilderParserCOLONCOLON-101)))) != 0) || (((_la-152)&-(0x1f+1)) == 0 && ((1<<uint((_la-152)))&((1<<(PowerBuilderParserAT-152))|(1<<(PowerBuilderParserUNDERSCORE-152))|(1<<(PowerBuilderParserID-152)))) != 0) {
		{
			p.SetState(588)
			p.Statement()
		}
		p.SetState(590)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PowerBuilderParserSEMI {
			{
				p.SetState(589)
				p.Match(PowerBuilderParserSEMI)
			}

		}

		p.SetState(596)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(597)
		p.Match(PowerBuilderParserEND)
	}
	{
		p.SetState(598)
		p.Match(PowerBuilderParserON)
	}

	return localctx
}

// IEvent_forward_declContext is an interface to support dynamic dispatch.
type IEvent_forward_declContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEvent_forward_declContext differentiates from other interfaces.
	IsEvent_forward_declContext()
}

type Event_forward_declContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEvent_forward_declContext() *Event_forward_declContext {
	var p = new(Event_forward_declContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_event_forward_decl
	return p
}

func (*Event_forward_declContext) IsEvent_forward_declContext() {}

func NewEvent_forward_declContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Event_forward_declContext {
	var p = new(Event_forward_declContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_event_forward_decl

	return p
}

func (s *Event_forward_declContext) GetParser() antlr.Parser { return s.parser }

func (s *Event_forward_declContext) EVENT() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserEVENT, 0)
}

func (s *Event_forward_declContext) AllIdentifier_name() []IIdentifier_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifier_nameContext)(nil)).Elem())
	var tst = make([]IIdentifier_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifier_nameContext)
		}
	}

	return tst
}

func (s *Event_forward_declContext) Identifier_name(i int) IIdentifier_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_nameContext)
}

func (s *Event_forward_declContext) CREATE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserCREATE, 0)
}

func (s *Event_forward_declContext) DESTROY() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserDESTROY, 0)
}

func (s *Event_forward_declContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserLPAREN, 0)
}

func (s *Event_forward_declContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserRPAREN, 0)
}

func (s *Event_forward_declContext) Parameters_list_sub() IParameters_list_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameters_list_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameters_list_subContext)
}

func (s *Event_forward_declContext) TYPE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserTYPE, 0)
}

func (s *Event_forward_declContext) Data_type_name() IData_type_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_type_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_type_nameContext)
}

func (s *Event_forward_declContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Event_forward_declContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Event_forward_declContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterEvent_forward_decl(s)
	}
}

func (s *Event_forward_declContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitEvent_forward_decl(s)
	}
}

func (p *PowerBuilderParser) Event_forward_decl() (localctx IEvent_forward_declContext) {
	this := p
	_ = this

	localctx = NewEvent_forward_declContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, PowerBuilderParserRULE_event_forward_decl)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(626)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 76, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(600)
			p.Match(PowerBuilderParserEVENT)
		}
		p.SetState(604)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case PowerBuilderParserUNDERSCORE, PowerBuilderParserID:
			{
				p.SetState(601)
				p.Identifier_name()
			}

		case PowerBuilderParserCREATE:
			{
				p.SetState(602)
				p.Match(PowerBuilderParserCREATE)
			}

		case PowerBuilderParserDESTROY:
			{
				p.SetState(603)
				p.Match(PowerBuilderParserDESTROY)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(607)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 72, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(606)
				p.Identifier_name()
			}

		}
		p.SetState(614)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PowerBuilderParserLPAREN {
			{
				p.SetState(609)
				p.Match(PowerBuilderParserLPAREN)
			}
			p.SetState(611)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<PowerBuilderParserANY)|(1<<PowerBuilderParserBLOB)|(1<<PowerBuilderParserBOOLEAN)|(1<<PowerBuilderParserBYTE)|(1<<PowerBuilderParserCHARACTER)|(1<<PowerBuilderParserCHAR)|(1<<PowerBuilderParserDATE_TYPE)|(1<<PowerBuilderParserDATETIME)|(1<<PowerBuilderParserDECIMAL)|(1<<PowerBuilderParserDEC)|(1<<PowerBuilderParserDOUBLE)|(1<<PowerBuilderParserINTEGER)|(1<<PowerBuilderParserINT)|(1<<PowerBuilderParserLONG)|(1<<PowerBuilderParserLONGLONG)|(1<<PowerBuilderParserREAL)|(1<<PowerBuilderParserSTRING)|(1<<PowerBuilderParserTIME_TYPE)|(1<<PowerBuilderParserUNSIGNEDINTEGER)|(1<<PowerBuilderParserUINT)|(1<<PowerBuilderParserUNSIGNEDLONG)|(1<<PowerBuilderParserULONG)|(1<<PowerBuilderParserWINDOW))) != 0) || _la == PowerBuilderParserREADONLY || _la == PowerBuilderParserREF || _la == PowerBuilderParserUNDERSCORE || _la == PowerBuilderParserID {
				{
					p.SetState(610)
					p.Parameters_list_sub()
				}

			}
			{
				p.SetState(613)
				p.Match(PowerBuilderParserRPAREN)
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(616)
			p.Match(PowerBuilderParserEVENT)
		}
		{
			p.SetState(617)
			p.Match(PowerBuilderParserTYPE)
		}
		{
			p.SetState(618)
			p.Data_type_name()
		}
		{
			p.SetState(619)
			p.Identifier_name()
		}

		{
			p.SetState(620)
			p.Match(PowerBuilderParserLPAREN)
		}
		p.SetState(622)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<PowerBuilderParserANY)|(1<<PowerBuilderParserBLOB)|(1<<PowerBuilderParserBOOLEAN)|(1<<PowerBuilderParserBYTE)|(1<<PowerBuilderParserCHARACTER)|(1<<PowerBuilderParserCHAR)|(1<<PowerBuilderParserDATE_TYPE)|(1<<PowerBuilderParserDATETIME)|(1<<PowerBuilderParserDECIMAL)|(1<<PowerBuilderParserDEC)|(1<<PowerBuilderParserDOUBLE)|(1<<PowerBuilderParserINTEGER)|(1<<PowerBuilderParserINT)|(1<<PowerBuilderParserLONG)|(1<<PowerBuilderParserLONGLONG)|(1<<PowerBuilderParserREAL)|(1<<PowerBuilderParserSTRING)|(1<<PowerBuilderParserTIME_TYPE)|(1<<PowerBuilderParserUNSIGNEDINTEGER)|(1<<PowerBuilderParserUINT)|(1<<PowerBuilderParserUNSIGNEDLONG)|(1<<PowerBuilderParserULONG)|(1<<PowerBuilderParserWINDOW))) != 0) || _la == PowerBuilderParserREADONLY || _la == PowerBuilderParserREF || _la == PowerBuilderParserUNDERSCORE || _la == PowerBuilderParserID {
			{
				p.SetState(621)
				p.Parameters_list_sub()
			}

		}
		{
			p.SetState(624)
			p.Match(PowerBuilderParserRPAREN)
		}

	}

	return localctx
}

// IEvent_bodyContext is an interface to support dynamic dispatch.
type IEvent_bodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEvent_bodyContext differentiates from other interfaces.
	IsEvent_bodyContext()
}

type Event_bodyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEvent_bodyContext() *Event_bodyContext {
	var p = new(Event_bodyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_event_body
	return p
}

func (*Event_bodyContext) IsEvent_bodyContext() {}

func NewEvent_bodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Event_bodyContext {
	var p = new(Event_bodyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_event_body

	return p
}

func (s *Event_bodyContext) GetParser() antlr.Parser { return s.parser }

func (s *Event_bodyContext) AllEVENT() []antlr.TerminalNode {
	return s.GetTokens(PowerBuilderParserEVENT)
}

func (s *Event_bodyContext) EVENT(i int) antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserEVENT, i)
}

func (s *Event_bodyContext) END() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserEND, 0)
}

func (s *Event_bodyContext) AllIdentifier_name() []IIdentifier_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifier_nameContext)(nil)).Elem())
	var tst = make([]IIdentifier_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifier_nameContext)
		}
	}

	return tst
}

func (s *Event_bodyContext) Identifier_name(i int) IIdentifier_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_nameContext)
}

func (s *Event_bodyContext) OPEN() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserOPEN, 0)
}

func (s *Event_bodyContext) CLOSE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserCLOSE, 0)
}

func (s *Event_bodyContext) TYPE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserTYPE, 0)
}

func (s *Event_bodyContext) Data_type_name() IData_type_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_type_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_type_nameContext)
}

func (s *Event_bodyContext) COLONCOLON() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserCOLONCOLON, 0)
}

func (s *Event_bodyContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserLPAREN, 0)
}

func (s *Event_bodyContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserRPAREN, 0)
}

func (s *Event_bodyContext) AllSEMI() []antlr.TerminalNode {
	return s.GetTokens(PowerBuilderParserSEMI)
}

func (s *Event_bodyContext) SEMI(i int) antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserSEMI, i)
}

func (s *Event_bodyContext) AllStatement() []IStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatementContext)(nil)).Elem())
	var tst = make([]IStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatementContext)
		}
	}

	return tst
}

func (s *Event_bodyContext) Statement(i int) IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *Event_bodyContext) Parameters_list_sub() IParameters_list_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameters_list_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameters_list_subContext)
}

func (s *Event_bodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Event_bodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Event_bodyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterEvent_body(s)
	}
}

func (s *Event_bodyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitEvent_body(s)
	}
}

func (p *PowerBuilderParser) Event_body() (localctx IEvent_bodyContext) {
	this := p
	_ = this

	localctx = NewEvent_bodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, PowerBuilderParserRULE_event_body)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(628)
		p.Match(PowerBuilderParserEVENT)
	}
	p.SetState(631)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PowerBuilderParserTYPE {
		{
			p.SetState(629)
			p.Match(PowerBuilderParserTYPE)
		}
		{
			p.SetState(630)
			p.Data_type_name()
		}

	}
	p.SetState(636)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 78, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(633)
			p.Identifier_name()
		}
		{
			p.SetState(634)
			p.Match(PowerBuilderParserCOLONCOLON)
		}

	}
	p.SetState(641)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PowerBuilderParserUNDERSCORE, PowerBuilderParserID:
		{
			p.SetState(638)
			p.Identifier_name()
		}

	case PowerBuilderParserOPEN:
		{
			p.SetState(639)
			p.Match(PowerBuilderParserOPEN)
		}

	case PowerBuilderParserCLOSE:
		{
			p.SetState(640)
			p.Match(PowerBuilderParserCLOSE)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(648)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PowerBuilderParserLPAREN {
		{
			p.SetState(643)
			p.Match(PowerBuilderParserLPAREN)
		}
		p.SetState(645)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<PowerBuilderParserANY)|(1<<PowerBuilderParserBLOB)|(1<<PowerBuilderParserBOOLEAN)|(1<<PowerBuilderParserBYTE)|(1<<PowerBuilderParserCHARACTER)|(1<<PowerBuilderParserCHAR)|(1<<PowerBuilderParserDATE_TYPE)|(1<<PowerBuilderParserDATETIME)|(1<<PowerBuilderParserDECIMAL)|(1<<PowerBuilderParserDEC)|(1<<PowerBuilderParserDOUBLE)|(1<<PowerBuilderParserINTEGER)|(1<<PowerBuilderParserINT)|(1<<PowerBuilderParserLONG)|(1<<PowerBuilderParserLONGLONG)|(1<<PowerBuilderParserREAL)|(1<<PowerBuilderParserSTRING)|(1<<PowerBuilderParserTIME_TYPE)|(1<<PowerBuilderParserUNSIGNEDINTEGER)|(1<<PowerBuilderParserUINT)|(1<<PowerBuilderParserUNSIGNEDLONG)|(1<<PowerBuilderParserULONG)|(1<<PowerBuilderParserWINDOW))) != 0) || _la == PowerBuilderParserREADONLY || _la == PowerBuilderParserREF || _la == PowerBuilderParserUNDERSCORE || _la == PowerBuilderParserID {
			{
				p.SetState(644)
				p.Parameters_list_sub()
			}

		}
		{
			p.SetState(647)
			p.Match(PowerBuilderParserRPAREN)
		}

	}
	p.SetState(651)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PowerBuilderParserSEMI {
		{
			p.SetState(650)
			p.Match(PowerBuilderParserSEMI)
		}

	}
	p.SetState(659)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<PowerBuilderParserANY)|(1<<PowerBuilderParserBLOB)|(1<<PowerBuilderParserBOOLEAN)|(1<<PowerBuilderParserBYTE)|(1<<PowerBuilderParserCHARACTER)|(1<<PowerBuilderParserCHAR)|(1<<PowerBuilderParserDATE_TYPE)|(1<<PowerBuilderParserDATETIME)|(1<<PowerBuilderParserDECIMAL)|(1<<PowerBuilderParserDEC)|(1<<PowerBuilderParserDOUBLE)|(1<<PowerBuilderParserINTEGER)|(1<<PowerBuilderParserINT)|(1<<PowerBuilderParserLONG)|(1<<PowerBuilderParserLONGLONG)|(1<<PowerBuilderParserREAL)|(1<<PowerBuilderParserSTRING)|(1<<PowerBuilderParserTIME_TYPE)|(1<<PowerBuilderParserUNSIGNEDINTEGER)|(1<<PowerBuilderParserUINT)|(1<<PowerBuilderParserUNSIGNEDLONG)|(1<<PowerBuilderParserULONG)|(1<<PowerBuilderParserWINDOW)|(1<<PowerBuilderParserGLOBAL)|(1<<PowerBuilderParserINDIRECT))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(PowerBuilderParserPUBLIC-32))|(1<<(PowerBuilderParserPRIVATE-32))|(1<<(PowerBuilderParserFUNCTION-32))|(1<<(PowerBuilderParserREADONLY-32))|(1<<(PowerBuilderParserTYPE-32))|(1<<(PowerBuilderParserUPDATE-32))|(1<<(PowerBuilderParserDYNAMIC-32))|(1<<(PowerBuilderParserPRIVATEWRITE-32))|(1<<(PowerBuilderParserPROTECTED-32))|(1<<(PowerBuilderParserPRIVATEREAD-32))|(1<<(PowerBuilderParserPROTECTEDREAD-32))|(1<<(PowerBuilderParserPROTECTEDWRITE-32))|(1<<(PowerBuilderParserLOCAL-32))|(1<<(PowerBuilderParserEVENT-32))|(1<<(PowerBuilderParserOPEN-32))|(1<<(PowerBuilderParserGOTO-32))|(1<<(PowerBuilderParserIF-32))|(1<<(PowerBuilderParserTRY-32))|(1<<(PowerBuilderParserEXIT-32))|(1<<(PowerBuilderParserCHOOSE-32)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(PowerBuilderParserCONTINUE-65))|(1<<(PowerBuilderParserDO-65))|(1<<(PowerBuilderParserFOR-65))|(1<<(PowerBuilderParserCLOSE-65))|(1<<(PowerBuilderParserTHROW-65))|(1<<(PowerBuilderParserCREATE-65))|(1<<(PowerBuilderParserDESTROY-65))|(1<<(PowerBuilderParserPOST-65))|(1<<(PowerBuilderParserTRIGGER-65))|(1<<(PowerBuilderParserSELECT-65))|(1<<(PowerBuilderParserDELETE-65))|(1<<(PowerBuilderParserINSERT-65))|(1<<(PowerBuilderParserDESCRIBE-65))|(1<<(PowerBuilderParserRETURN-65))|(1<<(PowerBuilderParserCALL-65))|(1<<(PowerBuilderParserHALT-65))|(1<<(PowerBuilderParserSUPER-65))|(1<<(PowerBuilderParserSYSTEM-65)))) != 0) || (((_la-101)&-(0x1f+1)) == 0 && ((1<<uint((_la-101)))&((1<<(PowerBuilderParserSQLCA-101))|(1<<(PowerBuilderParserEXECUTE-101))|(1<<(PowerBuilderParserDECLARE-101))|(1<<(PowerBuilderParserVALUES-101))|(1<<(PowerBuilderParserCOMMIT-101))|(1<<(PowerBuilderParserPREPARE-101))|(1<<(PowerBuilderParserFETCH-101))|(1<<(PowerBuilderParserCONNECT-101))|(1<<(PowerBuilderParserDISCONNECT-101))|(1<<(PowerBuilderParserCONSTANT-101))|(1<<(PowerBuilderParserSELECTBLOB-101))|(1<<(PowerBuilderParserUPDATEBLOB-101))|(1<<(PowerBuilderParserROLLBACK-101))|(1<<(PowerBuilderParserCOLONCOLON-101)))) != 0) || (((_la-152)&-(0x1f+1)) == 0 && ((1<<uint((_la-152)))&((1<<(PowerBuilderParserAT-152))|(1<<(PowerBuilderParserUNDERSCORE-152))|(1<<(PowerBuilderParserID-152)))) != 0) {
		{
			p.SetState(653)
			p.Statement()
		}
		p.SetState(655)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PowerBuilderParserSEMI {
			{
				p.SetState(654)
				p.Match(PowerBuilderParserSEMI)
			}

		}

		p.SetState(661)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(662)
		p.Match(PowerBuilderParserEND)
	}
	{
		p.SetState(663)
		p.Match(PowerBuilderParserEVENT)
	}

	return localctx
}

// IAccess_typeContext is an interface to support dynamic dispatch.
type IAccess_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAccess_typeContext differentiates from other interfaces.
	IsAccess_typeContext()
}

type Access_typeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAccess_typeContext() *Access_typeContext {
	var p = new(Access_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_access_type
	return p
}

func (*Access_typeContext) IsAccess_typeContext() {}

func NewAccess_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Access_typeContext {
	var p = new(Access_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_access_type

	return p
}

func (s *Access_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Access_typeContext) PUBLIC() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserPUBLIC, 0)
}

func (s *Access_typeContext) PRIVATE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserPRIVATE, 0)
}

func (s *Access_typeContext) PROTECTED() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserPROTECTED, 0)
}

func (s *Access_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Access_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Access_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterAccess_type(s)
	}
}

func (s *Access_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitAccess_type(s)
	}
}

func (p *PowerBuilderParser) Access_type() (localctx IAccess_typeContext) {
	this := p
	_ = this

	localctx = NewAccess_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, PowerBuilderParserRULE_access_type)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(665)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(PowerBuilderParserPUBLIC-32))|(1<<(PowerBuilderParserPRIVATE-32))|(1<<(PowerBuilderParserPROTECTED-32)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IAccess_modifContext is an interface to support dynamic dispatch.
type IAccess_modifContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAccess_modifContext differentiates from other interfaces.
	IsAccess_modifContext()
}

type Access_modifContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAccess_modifContext() *Access_modifContext {
	var p = new(Access_modifContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_access_modif
	return p
}

func (*Access_modifContext) IsAccess_modifContext() {}

func NewAccess_modifContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Access_modifContext {
	var p = new(Access_modifContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_access_modif

	return p
}

func (s *Access_modifContext) GetParser() antlr.Parser { return s.parser }

func (s *Access_modifContext) Access_type() IAccess_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAccess_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAccess_typeContext)
}

func (s *Access_modifContext) COLON() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserCOLON, 0)
}

func (s *Access_modifContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Access_modifContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Access_modifContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterAccess_modif(s)
	}
}

func (s *Access_modifContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitAccess_modif(s)
	}
}

func (p *PowerBuilderParser) Access_modif() (localctx IAccess_modifContext) {
	this := p
	_ = this

	localctx = NewAccess_modifContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, PowerBuilderParserRULE_access_modif)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(667)
		p.Access_type()
	}
	{
		p.SetState(668)
		p.Match(PowerBuilderParserCOLON)
	}

	return localctx
}

// IAccess_modif_partContext is an interface to support dynamic dispatch.
type IAccess_modif_partContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAccess_modif_partContext differentiates from other interfaces.
	IsAccess_modif_partContext()
}

type Access_modif_partContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAccess_modif_partContext() *Access_modif_partContext {
	var p = new(Access_modif_partContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_access_modif_part
	return p
}

func (*Access_modif_partContext) IsAccess_modif_partContext() {}

func NewAccess_modif_partContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Access_modif_partContext {
	var p = new(Access_modif_partContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_access_modif_part

	return p
}

func (s *Access_modif_partContext) GetParser() antlr.Parser { return s.parser }

func (s *Access_modif_partContext) PUBLIC() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserPUBLIC, 0)
}

func (s *Access_modif_partContext) PRIVATE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserPRIVATE, 0)
}

func (s *Access_modif_partContext) PRIVATEREAD() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserPRIVATEREAD, 0)
}

func (s *Access_modif_partContext) PRIVATEWRITE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserPRIVATEWRITE, 0)
}

func (s *Access_modif_partContext) PROTECTED() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserPROTECTED, 0)
}

func (s *Access_modif_partContext) PROTECTEDREAD() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserPROTECTEDREAD, 0)
}

func (s *Access_modif_partContext) PROTECTEDWRITE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserPROTECTEDWRITE, 0)
}

func (s *Access_modif_partContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Access_modif_partContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Access_modif_partContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterAccess_modif_part(s)
	}
}

func (s *Access_modif_partContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitAccess_modif_part(s)
	}
}

func (p *PowerBuilderParser) Access_modif_part() (localctx IAccess_modif_partContext) {
	this := p
	_ = this

	localctx = NewAccess_modif_partContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, PowerBuilderParserRULE_access_modif_part)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(670)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(PowerBuilderParserPUBLIC-32))|(1<<(PowerBuilderParserPRIVATE-32))|(1<<(PowerBuilderParserPRIVATEWRITE-32))|(1<<(PowerBuilderParserPROTECTED-32))|(1<<(PowerBuilderParserPRIVATEREAD-32))|(1<<(PowerBuilderParserPROTECTEDREAD-32))|(1<<(PowerBuilderParserPROTECTEDWRITE-32)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IScope_modifContext is an interface to support dynamic dispatch.
type IScope_modifContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsScope_modifContext differentiates from other interfaces.
	IsScope_modifContext()
}

type Scope_modifContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyScope_modifContext() *Scope_modifContext {
	var p = new(Scope_modifContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_scope_modif
	return p
}

func (*Scope_modifContext) IsScope_modifContext() {}

func NewScope_modifContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Scope_modifContext {
	var p = new(Scope_modifContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_scope_modif

	return p
}

func (s *Scope_modifContext) GetParser() antlr.Parser { return s.parser }

func (s *Scope_modifContext) GLOBAL() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserGLOBAL, 0)
}

func (s *Scope_modifContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserLOCAL, 0)
}

func (s *Scope_modifContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Scope_modifContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Scope_modifContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterScope_modif(s)
	}
}

func (s *Scope_modifContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitScope_modif(s)
	}
}

func (p *PowerBuilderParser) Scope_modif() (localctx IScope_modifContext) {
	this := p
	_ = this

	localctx = NewScope_modifContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, PowerBuilderParserRULE_scope_modif)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(672)
		_la = p.GetTokenStream().LA(1)

		if !(_la == PowerBuilderParserGLOBAL || _la == PowerBuilderParserLOCAL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IExpressionContext is an interface to support dynamic dispatch.
type IExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionContext differentiates from other interfaces.
	IsExpressionContext()
}

type ExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionContext() *ExpressionContext {
	var p = new(ExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_expression
	return p
}

func (*ExpressionContext) IsExpressionContext() {}

func NewExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionContext {
	var p = new(ExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_expression

	return p
}

func (s *ExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionContext) Close_call_sub() IClose_call_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClose_call_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClose_call_subContext)
}

func (s *ExpressionContext) Value() IValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IValueContext)
}

func (s *ExpressionContext) Function_call_statement() IFunction_call_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_call_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_call_statementContext)
}

func (s *ExpressionContext) LCURLY() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserLCURLY, 0)
}

func (s *ExpressionContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *ExpressionContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionContext) RCURLY() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserRCURLY, 0)
}

func (s *ExpressionContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PowerBuilderParserCOMMA)
}

func (s *ExpressionContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserCOMMA, i)
}

func (s *ExpressionContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserLPAREN, 0)
}

func (s *ExpressionContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserRPAREN, 0)
}

func (s *ExpressionContext) Boolean_expression() IBoolean_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBoolean_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBoolean_expressionContext)
}

func (s *ExpressionContext) PLUS() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserPLUS, 0)
}

func (s *ExpressionContext) MINUS() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserMINUS, 0)
}

func (s *ExpressionContext) MULT() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserMULT, 0)
}

func (s *ExpressionContext) DIV() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserDIV, 0)
}

func (s *ExpressionContext) CARAT() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserCARAT, 0)
}

func (s *ExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterExpression(s)
	}
}

func (s *ExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitExpression(s)
	}
}

func (p *PowerBuilderParser) Expression() (localctx IExpressionContext) {
	return p.expression(0)
}

func (p *PowerBuilderParser) expression(_p int) (localctx IExpressionContext) {
	this := p
	_ = this

	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 58
	p.EnterRecursionRule(localctx, 58, PowerBuilderParserRULE_expression, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(694)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 86, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(675)
			p.Close_call_sub()
		}

	case 2:
		{
			p.SetState(676)
			p.Value()
		}

	case 3:
		{
			p.SetState(677)
			p.Function_call_statement()
		}

	case 4:
		{
			p.SetState(678)
			p.Match(PowerBuilderParserLCURLY)
		}
		{
			p.SetState(679)
			p.expression(0)
		}
		p.SetState(684)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == PowerBuilderParserCOMMA {
			{
				p.SetState(680)
				p.Match(PowerBuilderParserCOMMA)
			}
			{
				p.SetState(681)
				p.expression(0)
			}

			p.SetState(686)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(687)
			p.Match(PowerBuilderParserRCURLY)
		}

	case 5:
		{
			p.SetState(689)
			p.Match(PowerBuilderParserLPAREN)
		}
		{
			p.SetState(690)
			p.expression(0)
		}
		{
			p.SetState(691)
			p.Match(PowerBuilderParserRPAREN)
		}

	case 6:
		{
			p.SetState(693)
			p.Boolean_expression()
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(701)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 87, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewExpressionContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, PowerBuilderParserRULE_expression)
			p.SetState(696)

			if !(p.Precpred(p.GetParserRuleContext(), 3)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
			}
			{
				p.SetState(697)
				_la = p.GetTokenStream().LA(1)

				if !(((_la-126)&-(0x1f+1)) == 0 && ((1<<uint((_la-126)))&((1<<(PowerBuilderParserPLUS-126))|(1<<(PowerBuilderParserMINUS-126))|(1<<(PowerBuilderParserMULT-126))|(1<<(PowerBuilderParserDIV-126))|(1<<(PowerBuilderParserCARAT-126)))) != 0) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			{
				p.SetState(698)
				p.expression(4)
			}

		}
		p.SetState(703)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 87, p.GetParserRuleContext())
	}

	return localctx
}

// IValueContext is an interface to support dynamic dispatch.
type IValueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsValueContext differentiates from other interfaces.
	IsValueContext()
}

type ValueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyValueContext() *ValueContext {
	var p = new(ValueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_value
	return p
}

func (*ValueContext) IsValueContext() {}

func NewValueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ValueContext {
	var p = new(ValueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_value

	return p
}

func (s *ValueContext) GetParser() antlr.Parser { return s.parser }

func (s *ValueContext) AllString_literal() []IString_literalContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IString_literalContext)(nil)).Elem())
	var tst = make([]IString_literalContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IString_literalContext)
		}
	}

	return tst
}

func (s *ValueContext) String_literal(i int) IString_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_literalContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IString_literalContext)
}

func (s *ValueContext) AllPLUS() []antlr.TerminalNode {
	return s.GetTokens(PowerBuilderParserPLUS)
}

func (s *ValueContext) PLUS(i int) antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserPLUS, i)
}

func (s *ValueContext) ENUM() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserENUM, 0)
}

func (s *ValueContext) NUMBER() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserNUMBER, 0)
}

func (s *ValueContext) TRUE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserTRUE, 0)
}

func (s *ValueContext) FALSE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserFALSE, 0)
}

func (s *ValueContext) DATE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserDATE, 0)
}

func (s *ValueContext) TIME() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserTIME, 0)
}

func (s *ValueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ValueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ValueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterValue(s)
	}
}

func (s *ValueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitValue(s)
	}
}

func (p *PowerBuilderParser) Value() (localctx IValueContext) {
	this := p
	_ = this

	localctx = NewValueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, PowerBuilderParserRULE_value)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(718)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PowerBuilderParserDQUOTED_STRING, PowerBuilderParserQUOTED_STRING:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(704)
			p.String_literal()
		}
		p.SetState(709)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 88, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(705)
					p.Match(PowerBuilderParserPLUS)
				}
				{
					p.SetState(706)
					p.String_literal()
				}

			}
			p.SetState(711)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 88, p.GetParserRuleContext())
		}

	case PowerBuilderParserENUM:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(712)
			p.Match(PowerBuilderParserENUM)
		}

	case PowerBuilderParserNUMBER:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(713)
			p.Match(PowerBuilderParserNUMBER)
		}

	case PowerBuilderParserTRUE:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(714)
			p.Match(PowerBuilderParserTRUE)
		}

	case PowerBuilderParserFALSE:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(715)
			p.Match(PowerBuilderParserFALSE)
		}

	case PowerBuilderParserDATE:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(716)
			p.Match(PowerBuilderParserDATE)
		}

	case PowerBuilderParserTIME:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(717)
			p.Match(PowerBuilderParserTIME)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IExpression_listContext is an interface to support dynamic dispatch.
type IExpression_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpression_listContext differentiates from other interfaces.
	IsExpression_listContext()
}

type Expression_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpression_listContext() *Expression_listContext {
	var p = new(Expression_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_expression_list
	return p
}

func (*Expression_listContext) IsExpression_listContext() {}

func NewExpression_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Expression_listContext {
	var p = new(Expression_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_expression_list

	return p
}

func (s *Expression_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Expression_listContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *Expression_listContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Expression_listContext) AllREF() []antlr.TerminalNode {
	return s.GetTokens(PowerBuilderParserREF)
}

func (s *Expression_listContext) REF(i int) antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserREF, i)
}

func (s *Expression_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PowerBuilderParserCOMMA)
}

func (s *Expression_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserCOMMA, i)
}

func (s *Expression_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expression_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Expression_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterExpression_list(s)
	}
}

func (s *Expression_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitExpression_list(s)
	}
}

func (p *PowerBuilderParser) Expression_list() (localctx IExpression_listContext) {
	this := p
	_ = this

	localctx = NewExpression_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, PowerBuilderParserRULE_expression_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(721)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PowerBuilderParserREF {
		{
			p.SetState(720)
			p.Match(PowerBuilderParserREF)
		}

	}
	{
		p.SetState(723)
		p.expression(0)
	}
	p.SetState(731)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == PowerBuilderParserCOMMA {
		{
			p.SetState(724)
			p.Match(PowerBuilderParserCOMMA)
		}
		p.SetState(726)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PowerBuilderParserREF {
			{
				p.SetState(725)
				p.Match(PowerBuilderParserREF)
			}

		}
		{
			p.SetState(728)
			p.expression(0)
		}

		p.SetState(733)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IBoolean_expressionContext is an interface to support dynamic dispatch.
type IBoolean_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBoolean_expressionContext differentiates from other interfaces.
	IsBoolean_expressionContext()
}

type Boolean_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBoolean_expressionContext() *Boolean_expressionContext {
	var p = new(Boolean_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_boolean_expression
	return p
}

func (*Boolean_expressionContext) IsBoolean_expressionContext() {}

func NewBoolean_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Boolean_expressionContext {
	var p = new(Boolean_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_boolean_expression

	return p
}

func (s *Boolean_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Boolean_expressionContext) Unary_sign_expr() IUnary_sign_exprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnary_sign_exprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnary_sign_exprContext)
}

func (s *Boolean_expressionContext) Mul_expr() IMul_exprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMul_exprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMul_exprContext)
}

func (s *Boolean_expressionContext) Add_expr() IAdd_exprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAdd_exprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAdd_exprContext)
}

func (s *Boolean_expressionContext) Condition_or() ICondition_orContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICondition_orContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICondition_orContext)
}

func (s *Boolean_expressionContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserLPAREN, 0)
}

func (s *Boolean_expressionContext) Boolean_expression() IBoolean_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBoolean_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBoolean_expressionContext)
}

func (s *Boolean_expressionContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserRPAREN, 0)
}

func (s *Boolean_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Boolean_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Boolean_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterBoolean_expression(s)
	}
}

func (s *Boolean_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitBoolean_expression(s)
	}
}

func (p *PowerBuilderParser) Boolean_expression() (localctx IBoolean_expressionContext) {
	this := p
	_ = this

	localctx = NewBoolean_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, PowerBuilderParserRULE_boolean_expression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(742)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 93, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(734)
			p.Unary_sign_expr()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(735)
			p.Mul_expr()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(736)
			p.Add_expr()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(737)
			p.Condition_or()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(738)
			p.Match(PowerBuilderParserLPAREN)
		}
		{
			p.SetState(739)
			p.Boolean_expression()
		}
		{
			p.SetState(740)
			p.Match(PowerBuilderParserRPAREN)
		}

	}

	return localctx
}

// ICondition_orContext is an interface to support dynamic dispatch.
type ICondition_orContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCondition_orContext differentiates from other interfaces.
	IsCondition_orContext()
}

type Condition_orContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCondition_orContext() *Condition_orContext {
	var p = new(Condition_orContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_condition_or
	return p
}

func (*Condition_orContext) IsCondition_orContext() {}

func NewCondition_orContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Condition_orContext {
	var p = new(Condition_orContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_condition_or

	return p
}

func (s *Condition_orContext) GetParser() antlr.Parser { return s.parser }

func (s *Condition_orContext) AllCondition_and() []ICondition_andContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICondition_andContext)(nil)).Elem())
	var tst = make([]ICondition_andContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICondition_andContext)
		}
	}

	return tst
}

func (s *Condition_orContext) Condition_and(i int) ICondition_andContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICondition_andContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICondition_andContext)
}

func (s *Condition_orContext) AllOR() []antlr.TerminalNode {
	return s.GetTokens(PowerBuilderParserOR)
}

func (s *Condition_orContext) OR(i int) antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserOR, i)
}

func (s *Condition_orContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserLPAREN, 0)
}

func (s *Condition_orContext) Boolean_expression() IBoolean_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBoolean_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBoolean_expressionContext)
}

func (s *Condition_orContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserRPAREN, 0)
}

func (s *Condition_orContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Condition_orContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Condition_orContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterCondition_or(s)
	}
}

func (s *Condition_orContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitCondition_or(s)
	}
}

func (p *PowerBuilderParser) Condition_or() (localctx ICondition_orContext) {
	this := p
	_ = this

	localctx = NewCondition_orContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, PowerBuilderParserRULE_condition_or)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(756)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 95, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(744)
			p.Condition_and()
		}
		p.SetState(749)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 94, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(745)
					p.Match(PowerBuilderParserOR)
				}
				{
					p.SetState(746)
					p.Condition_and()
				}

			}
			p.SetState(751)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 94, p.GetParserRuleContext())
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(752)
			p.Match(PowerBuilderParserLPAREN)
		}
		{
			p.SetState(753)
			p.Boolean_expression()
		}
		{
			p.SetState(754)
			p.Match(PowerBuilderParserRPAREN)
		}

	}

	return localctx
}

// ICondition_andContext is an interface to support dynamic dispatch.
type ICondition_andContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCondition_andContext differentiates from other interfaces.
	IsCondition_andContext()
}

type Condition_andContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCondition_andContext() *Condition_andContext {
	var p = new(Condition_andContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_condition_and
	return p
}

func (*Condition_andContext) IsCondition_andContext() {}

func NewCondition_andContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Condition_andContext {
	var p = new(Condition_andContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_condition_and

	return p
}

func (s *Condition_andContext) GetParser() antlr.Parser { return s.parser }

func (s *Condition_andContext) AllCondition_not() []ICondition_notContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICondition_notContext)(nil)).Elem())
	var tst = make([]ICondition_notContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICondition_notContext)
		}
	}

	return tst
}

func (s *Condition_andContext) Condition_not(i int) ICondition_notContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICondition_notContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICondition_notContext)
}

func (s *Condition_andContext) AllAND() []antlr.TerminalNode {
	return s.GetTokens(PowerBuilderParserAND)
}

func (s *Condition_andContext) AND(i int) antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserAND, i)
}

func (s *Condition_andContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserLPAREN, 0)
}

func (s *Condition_andContext) Boolean_expression() IBoolean_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBoolean_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBoolean_expressionContext)
}

func (s *Condition_andContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserRPAREN, 0)
}

func (s *Condition_andContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Condition_andContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Condition_andContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterCondition_and(s)
	}
}

func (s *Condition_andContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitCondition_and(s)
	}
}

func (p *PowerBuilderParser) Condition_and() (localctx ICondition_andContext) {
	this := p
	_ = this

	localctx = NewCondition_andContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, PowerBuilderParserRULE_condition_and)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(770)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 97, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(758)
			p.Condition_not()
		}
		p.SetState(763)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 96, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(759)
					p.Match(PowerBuilderParserAND)
				}
				{
					p.SetState(760)
					p.Condition_not()
				}

			}
			p.SetState(765)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 96, p.GetParserRuleContext())
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(766)
			p.Match(PowerBuilderParserLPAREN)
		}
		{
			p.SetState(767)
			p.Boolean_expression()
		}
		{
			p.SetState(768)
			p.Match(PowerBuilderParserRPAREN)
		}

	}

	return localctx
}

// ICondition_notContext is an interface to support dynamic dispatch.
type ICondition_notContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCondition_notContext differentiates from other interfaces.
	IsCondition_notContext()
}

type Condition_notContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCondition_notContext() *Condition_notContext {
	var p = new(Condition_notContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_condition_not
	return p
}

func (*Condition_notContext) IsCondition_notContext() {}

func NewCondition_notContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Condition_notContext {
	var p = new(Condition_notContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_condition_not

	return p
}

func (s *Condition_notContext) GetParser() antlr.Parser { return s.parser }

func (s *Condition_notContext) Condition_comparison() ICondition_comparisonContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICondition_comparisonContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICondition_comparisonContext)
}

func (s *Condition_notContext) NOT() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserNOT, 0)
}

func (s *Condition_notContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserLPAREN, 0)
}

func (s *Condition_notContext) Boolean_expression() IBoolean_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBoolean_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBoolean_expressionContext)
}

func (s *Condition_notContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserRPAREN, 0)
}

func (s *Condition_notContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Condition_notContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Condition_notContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterCondition_not(s)
	}
}

func (s *Condition_notContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitCondition_not(s)
	}
}

func (p *PowerBuilderParser) Condition_not() (localctx ICondition_notContext) {
	this := p
	_ = this

	localctx = NewCondition_notContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, PowerBuilderParserRULE_condition_not)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(780)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 99, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(773)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PowerBuilderParserNOT {
			{
				p.SetState(772)
				p.Match(PowerBuilderParserNOT)
			}

		}
		{
			p.SetState(775)
			p.Condition_comparison()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(776)
			p.Match(PowerBuilderParserLPAREN)
		}
		{
			p.SetState(777)
			p.Boolean_expression()
		}
		{
			p.SetState(778)
			p.Match(PowerBuilderParserRPAREN)
		}

	}

	return localctx
}

// ICondition_comparisonContext is an interface to support dynamic dispatch.
type ICondition_comparisonContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCondition_comparisonContext differentiates from other interfaces.
	IsCondition_comparisonContext()
}

type Condition_comparisonContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCondition_comparisonContext() *Condition_comparisonContext {
	var p = new(Condition_comparisonContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_condition_comparison
	return p
}

func (*Condition_comparisonContext) IsCondition_comparisonContext() {}

func NewCondition_comparisonContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Condition_comparisonContext {
	var p = new(Condition_comparisonContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_condition_comparison

	return p
}

func (s *Condition_comparisonContext) GetParser() antlr.Parser { return s.parser }

func (s *Condition_comparisonContext) AllAdd_expr() []IAdd_exprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAdd_exprContext)(nil)).Elem())
	var tst = make([]IAdd_exprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAdd_exprContext)
		}
	}

	return tst
}

func (s *Condition_comparisonContext) Add_expr(i int) IAdd_exprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAdd_exprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAdd_exprContext)
}

func (s *Condition_comparisonContext) EQ() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserEQ, 0)
}

func (s *Condition_comparisonContext) GT() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserGT, 0)
}

func (s *Condition_comparisonContext) LT() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserLT, 0)
}

func (s *Condition_comparisonContext) GTLT() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserGTLT, 0)
}

func (s *Condition_comparisonContext) GTE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserGTE, 0)
}

func (s *Condition_comparisonContext) LTE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserLTE, 0)
}

func (s *Condition_comparisonContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserLPAREN, 0)
}

func (s *Condition_comparisonContext) Boolean_expression() IBoolean_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBoolean_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBoolean_expressionContext)
}

func (s *Condition_comparisonContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserRPAREN, 0)
}

func (s *Condition_comparisonContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Condition_comparisonContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Condition_comparisonContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterCondition_comparison(s)
	}
}

func (s *Condition_comparisonContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitCondition_comparison(s)
	}
}

func (p *PowerBuilderParser) Condition_comparison() (localctx ICondition_comparisonContext) {
	this := p
	_ = this

	localctx = NewCondition_comparisonContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, PowerBuilderParserRULE_condition_comparison)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(791)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 101, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(782)
			p.Add_expr()
		}
		p.SetState(785)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 100, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(783)
				_la = p.GetTokenStream().LA(1)

				if !(((_la-120)&-(0x1f+1)) == 0 && ((1<<uint((_la-120)))&((1<<(PowerBuilderParserEQ-120))|(1<<(PowerBuilderParserGT-120))|(1<<(PowerBuilderParserGTE-120))|(1<<(PowerBuilderParserLT-120))|(1<<(PowerBuilderParserLTE-120))|(1<<(PowerBuilderParserGTLT-120)))) != 0) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			{
				p.SetState(784)
				p.Add_expr()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(787)
			p.Match(PowerBuilderParserLPAREN)
		}
		{
			p.SetState(788)
			p.Boolean_expression()
		}
		{
			p.SetState(789)
			p.Match(PowerBuilderParserRPAREN)
		}

	}

	return localctx
}

// IAdd_exprContext is an interface to support dynamic dispatch.
type IAdd_exprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAdd_exprContext differentiates from other interfaces.
	IsAdd_exprContext()
}

type Add_exprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAdd_exprContext() *Add_exprContext {
	var p = new(Add_exprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_add_expr
	return p
}

func (*Add_exprContext) IsAdd_exprContext() {}

func NewAdd_exprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Add_exprContext {
	var p = new(Add_exprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_add_expr

	return p
}

func (s *Add_exprContext) GetParser() antlr.Parser { return s.parser }

func (s *Add_exprContext) AllMul_expr() []IMul_exprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMul_exprContext)(nil)).Elem())
	var tst = make([]IMul_exprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMul_exprContext)
		}
	}

	return tst
}

func (s *Add_exprContext) Mul_expr(i int) IMul_exprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMul_exprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMul_exprContext)
}

func (s *Add_exprContext) AllMINUS() []antlr.TerminalNode {
	return s.GetTokens(PowerBuilderParserMINUS)
}

func (s *Add_exprContext) MINUS(i int) antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserMINUS, i)
}

func (s *Add_exprContext) AllPLUS() []antlr.TerminalNode {
	return s.GetTokens(PowerBuilderParserPLUS)
}

func (s *Add_exprContext) PLUS(i int) antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserPLUS, i)
}

func (s *Add_exprContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserLPAREN, 0)
}

func (s *Add_exprContext) Boolean_expression() IBoolean_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBoolean_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBoolean_expressionContext)
}

func (s *Add_exprContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserRPAREN, 0)
}

func (s *Add_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Add_exprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Add_exprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterAdd_expr(s)
	}
}

func (s *Add_exprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitAdd_expr(s)
	}
}

func (p *PowerBuilderParser) Add_expr() (localctx IAdd_exprContext) {
	this := p
	_ = this

	localctx = NewAdd_exprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, PowerBuilderParserRULE_add_expr)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(805)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 103, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(793)
			p.Mul_expr()
		}
		p.SetState(798)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 102, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(794)
					_la = p.GetTokenStream().LA(1)

					if !(_la == PowerBuilderParserPLUS || _la == PowerBuilderParserMINUS) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(795)
					p.Mul_expr()
				}

			}
			p.SetState(800)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 102, p.GetParserRuleContext())
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(801)
			p.Match(PowerBuilderParserLPAREN)
		}
		{
			p.SetState(802)
			p.Boolean_expression()
		}
		{
			p.SetState(803)
			p.Match(PowerBuilderParserRPAREN)
		}

	}

	return localctx
}

// IMul_exprContext is an interface to support dynamic dispatch.
type IMul_exprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMul_exprContext differentiates from other interfaces.
	IsMul_exprContext()
}

type Mul_exprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMul_exprContext() *Mul_exprContext {
	var p = new(Mul_exprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_mul_expr
	return p
}

func (*Mul_exprContext) IsMul_exprContext() {}

func NewMul_exprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Mul_exprContext {
	var p = new(Mul_exprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_mul_expr

	return p
}

func (s *Mul_exprContext) GetParser() antlr.Parser { return s.parser }

func (s *Mul_exprContext) AllUnary_sign_expr() []IUnary_sign_exprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUnary_sign_exprContext)(nil)).Elem())
	var tst = make([]IUnary_sign_exprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUnary_sign_exprContext)
		}
	}

	return tst
}

func (s *Mul_exprContext) Unary_sign_expr(i int) IUnary_sign_exprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnary_sign_exprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUnary_sign_exprContext)
}

func (s *Mul_exprContext) AllMULT() []antlr.TerminalNode {
	return s.GetTokens(PowerBuilderParserMULT)
}

func (s *Mul_exprContext) MULT(i int) antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserMULT, i)
}

func (s *Mul_exprContext) AllDIV() []antlr.TerminalNode {
	return s.GetTokens(PowerBuilderParserDIV)
}

func (s *Mul_exprContext) DIV(i int) antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserDIV, i)
}

func (s *Mul_exprContext) AllCARAT() []antlr.TerminalNode {
	return s.GetTokens(PowerBuilderParserCARAT)
}

func (s *Mul_exprContext) CARAT(i int) antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserCARAT, i)
}

func (s *Mul_exprContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserLPAREN, 0)
}

func (s *Mul_exprContext) Boolean_expression() IBoolean_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBoolean_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBoolean_expressionContext)
}

func (s *Mul_exprContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserRPAREN, 0)
}

func (s *Mul_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Mul_exprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Mul_exprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterMul_expr(s)
	}
}

func (s *Mul_exprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitMul_expr(s)
	}
}

func (p *PowerBuilderParser) Mul_expr() (localctx IMul_exprContext) {
	this := p
	_ = this

	localctx = NewMul_exprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, PowerBuilderParserRULE_mul_expr)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(819)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 105, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(807)
			p.Unary_sign_expr()
		}
		p.SetState(812)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 104, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(808)
					_la = p.GetTokenStream().LA(1)

					if !(((_la-131)&-(0x1f+1)) == 0 && ((1<<uint((_la-131)))&((1<<(PowerBuilderParserMULT-131))|(1<<(PowerBuilderParserDIV-131))|(1<<(PowerBuilderParserCARAT-131)))) != 0) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(809)
					p.Unary_sign_expr()
				}

			}
			p.SetState(814)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 104, p.GetParserRuleContext())
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(815)
			p.Match(PowerBuilderParserLPAREN)
		}
		{
			p.SetState(816)
			p.Boolean_expression()
		}
		{
			p.SetState(817)
			p.Match(PowerBuilderParserRPAREN)
		}

	}

	return localctx
}

// IUnary_sign_exprContext is an interface to support dynamic dispatch.
type IUnary_sign_exprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnary_sign_exprContext differentiates from other interfaces.
	IsUnary_sign_exprContext()
}

type Unary_sign_exprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnary_sign_exprContext() *Unary_sign_exprContext {
	var p = new(Unary_sign_exprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_unary_sign_expr
	return p
}

func (*Unary_sign_exprContext) IsUnary_sign_exprContext() {}

func NewUnary_sign_exprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Unary_sign_exprContext {
	var p = new(Unary_sign_exprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_unary_sign_expr

	return p
}

func (s *Unary_sign_exprContext) GetParser() antlr.Parser { return s.parser }

func (s *Unary_sign_exprContext) ENUM() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserENUM, 0)
}

func (s *Unary_sign_exprContext) Variable_name() IVariable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariable_nameContext)
}

func (s *Unary_sign_exprContext) Bind_param() IBind_paramContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBind_paramContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBind_paramContext)
}

func (s *Unary_sign_exprContext) Value() IValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IValueContext)
}

func (s *Unary_sign_exprContext) MINUS() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserMINUS, 0)
}

func (s *Unary_sign_exprContext) PLUS() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserPLUS, 0)
}

func (s *Unary_sign_exprContext) Function_call_statement() IFunction_call_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_call_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_call_statementContext)
}

func (s *Unary_sign_exprContext) LCURLY() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserLCURLY, 0)
}

func (s *Unary_sign_exprContext) RCURLY() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserRCURLY, 0)
}

func (s *Unary_sign_exprContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserLPAREN, 0)
}

func (s *Unary_sign_exprContext) Unary_sign_expr() IUnary_sign_exprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnary_sign_exprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnary_sign_exprContext)
}

func (s *Unary_sign_exprContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserRPAREN, 0)
}

func (s *Unary_sign_exprContext) Set_value() ISet_valueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISet_valueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISet_valueContext)
}

func (s *Unary_sign_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Unary_sign_exprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Unary_sign_exprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterUnary_sign_expr(s)
	}
}

func (s *Unary_sign_exprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitUnary_sign_expr(s)
	}
}

func (p *PowerBuilderParser) Unary_sign_expr() (localctx IUnary_sign_exprContext) {
	this := p
	_ = this

	localctx = NewUnary_sign_exprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, PowerBuilderParserRULE_unary_sign_expr)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(840)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 108, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(821)
			p.Match(PowerBuilderParserENUM)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(823)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PowerBuilderParserPLUS || _la == PowerBuilderParserMINUS {
			{
				p.SetState(822)
				_la = p.GetTokenStream().LA(1)

				if !(_la == PowerBuilderParserPLUS || _la == PowerBuilderParserMINUS) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		p.SetState(828)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case PowerBuilderParserDATE_TYPE, PowerBuilderParserTIME_TYPE, PowerBuilderParserWINDOW, PowerBuilderParserREADONLY, PowerBuilderParserTYPE, PowerBuilderParserUPDATE, PowerBuilderParserOPEN, PowerBuilderParserGOTO, PowerBuilderParserCLOSE, PowerBuilderParserCREATE, PowerBuilderParserSELECT, PowerBuilderParserDELETE, PowerBuilderParserINSERT, PowerBuilderParserSYSTEM, PowerBuilderParserSQLCA, PowerBuilderParserVALUES, PowerBuilderParserUNDERSCORE, PowerBuilderParserID:
			{
				p.SetState(825)
				p.Variable_name()
			}

		case PowerBuilderParserCOLON:
			{
				p.SetState(826)
				p.Bind_param()
			}

		case PowerBuilderParserTRUE, PowerBuilderParserFALSE, PowerBuilderParserDQUOTED_STRING, PowerBuilderParserQUOTED_STRING, PowerBuilderParserNUMBER, PowerBuilderParserDATE, PowerBuilderParserTIME, PowerBuilderParserENUM:
			{
				p.SetState(827)
				p.Value()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(830)
			p.Function_call_statement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(831)
			p.Match(PowerBuilderParserLCURLY)
		}
		{
			p.SetState(832)
			p.Function_call_statement()
		}
		{
			p.SetState(833)
			p.Match(PowerBuilderParserRCURLY)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(835)
			p.Match(PowerBuilderParserLPAREN)
		}
		{
			p.SetState(836)
			p.Unary_sign_expr()
		}
		{
			p.SetState(837)
			p.Match(PowerBuilderParserRPAREN)
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(839)
			p.Set_value()
		}

	}

	return localctx
}

// IStatementContext is an interface to support dynamic dispatch.
type IStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatementContext differentiates from other interfaces.
	IsStatementContext()
}

type StatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementContext() *StatementContext {
	var p = new(StatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_statement
	return p
}

func (*StatementContext) IsStatementContext() {}

func NewStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementContext {
	var p = new(StatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_statement

	return p
}

func (s *StatementContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementContext) Increment_decrement_statement() IIncrement_decrement_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIncrement_decrement_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIncrement_decrement_statementContext)
}

func (s *StatementContext) Public_statement() IPublic_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPublic_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPublic_statementContext)
}

func (s *StatementContext) If_simple_statement() IIf_simple_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIf_simple_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIf_simple_statementContext)
}

func (s *StatementContext) Execute_statement() IExecute_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExecute_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExecute_statementContext)
}

func (s *StatementContext) Throw_statement() IThrow_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IThrow_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IThrow_statementContext)
}

func (s *StatementContext) DESCRIBE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserDESCRIBE, 0)
}

func (s *StatementContext) Identifier_name() IIdentifier_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_nameContext)
}

func (s *StatementContext) Assignment_statement() IAssignment_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignment_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignment_statementContext)
}

func (s *StatementContext) Try_catch_statement() ITry_catch_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITry_catch_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITry_catch_statementContext)
}

func (s *StatementContext) Close_sql_statement() IClose_sql_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClose_sql_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClose_sql_statementContext)
}

func (s *StatementContext) Statement_sub() IStatement_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatement_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatement_subContext)
}

func (s *StatementContext) If_statement() IIf_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIf_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIf_statementContext)
}

func (s *StatementContext) Post_event() IPost_eventContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPost_eventContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPost_eventContext)
}

func (s *StatementContext) Function_call_statement() IFunction_call_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_call_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_call_statementContext)
}

func (s *StatementContext) Super_call_statement() ISuper_call_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISuper_call_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISuper_call_statementContext)
}

func (s *StatementContext) Event_call_statement() IEvent_call_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEvent_call_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEvent_call_statementContext)
}

func (s *StatementContext) Declare_procedure_statement() IDeclare_procedure_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclare_procedure_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclare_procedure_statementContext)
}

func (s *StatementContext) Constant_decl() IConstant_declContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstant_declContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstant_declContext)
}

func (s *StatementContext) Variable_decl() IVariable_declContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_declContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariable_declContext)
}

func (s *StatementContext) Do_loop_while_statement() IDo_loop_while_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDo_loop_while_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDo_loop_while_statementContext)
}

func (s *StatementContext) Do_while_loop_statement() IDo_while_loop_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDo_while_loop_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDo_while_loop_statementContext)
}

func (s *StatementContext) Create_call_statement() ICreate_call_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_call_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_call_statementContext)
}

func (s *StatementContext) Destroy_call_statement() IDestroy_call_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDestroy_call_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDestroy_call_statementContext)
}

func (s *StatementContext) Label_stat() ILabel_statContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILabel_statContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILabel_statContext)
}

func (s *StatementContext) Goto_statement() IGoto_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGoto_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGoto_statementContext)
}

func (s *StatementContext) Choose_statement() IChoose_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IChoose_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IChoose_statementContext)
}

func (s *StatementContext) Return_statement() IReturn_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReturn_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReturn_statementContext)
}

func (s *StatementContext) For_loop_statement() IFor_loop_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFor_loop_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFor_loop_statementContext)
}

func (s *StatementContext) Continue_statement() IContinue_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IContinue_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IContinue_statementContext)
}

func (s *StatementContext) Exit_statement() IExit_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExit_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExit_statementContext)
}

func (s *StatementContext) Sql_statement() ISql_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISql_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISql_statementContext)
}

func (s *StatementContext) Sql_commit_statement() ISql_commit_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISql_commit_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISql_commit_statementContext)
}

func (s *StatementContext) Open_cursor_statement() IOpen_cursor_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOpen_cursor_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOpen_cursor_statementContext)
}

func (s *StatementContext) Prepare_sql_stateent() IPrepare_sql_stateentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrepare_sql_stateentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrepare_sql_stateentContext)
}

func (s *StatementContext) Declare_cursor_statement() IDeclare_cursor_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclare_cursor_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclare_cursor_statementContext)
}

func (s *StatementContext) Close_cursor_statement() IClose_cursor_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClose_cursor_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClose_cursor_statementContext)
}

func (s *StatementContext) Fetch_into_statement() IFetch_into_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFetch_into_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFetch_into_statementContext)
}

func (s *StatementContext) Call_statement() ICall_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICall_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICall_statementContext)
}

func (s *StatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterStatement(s)
	}
}

func (s *StatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitStatement(s)
	}
}

func (p *PowerBuilderParser) Statement() (localctx IStatementContext) {
	this := p
	_ = this

	localctx = NewStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, PowerBuilderParserRULE_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(882)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 109, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(842)
			p.Increment_decrement_statement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(843)
			p.Public_statement()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(844)
			p.If_simple_statement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(845)
			p.Execute_statement()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(846)
			p.Throw_statement()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(847)
			p.Match(PowerBuilderParserDESCRIBE)
		}
		{
			p.SetState(848)
			p.Identifier_name()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(849)
			p.Assignment_statement()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(850)
			p.Try_catch_statement()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(851)
			p.Close_sql_statement()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(852)
			p.Statement_sub()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(853)
			p.If_statement()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(854)
			p.Post_event()
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(855)
			p.Function_call_statement()
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(856)
			p.Super_call_statement()
		}

	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(857)
			p.Event_call_statement()
		}

	case 16:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(858)
			p.Declare_procedure_statement()
		}

	case 17:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(859)
			p.Constant_decl()
		}

	case 18:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(860)
			p.Variable_decl()
		}

	case 19:
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(861)
			p.Super_call_statement()
		}

	case 20:
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(862)
			p.Do_loop_while_statement()
		}

	case 21:
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(863)
			p.Do_while_loop_statement()
		}

	case 22:
		p.EnterOuterAlt(localctx, 22)
		{
			p.SetState(864)
			p.Create_call_statement()
		}

	case 23:
		p.EnterOuterAlt(localctx, 23)
		{
			p.SetState(865)
			p.Destroy_call_statement()
		}

	case 24:
		p.EnterOuterAlt(localctx, 24)
		{
			p.SetState(866)
			p.Label_stat()
		}

	case 25:
		p.EnterOuterAlt(localctx, 25)
		{
			p.SetState(867)
			p.Throw_statement()
		}

	case 26:
		p.EnterOuterAlt(localctx, 26)
		{
			p.SetState(868)
			p.Goto_statement()
		}

	case 27:
		p.EnterOuterAlt(localctx, 27)
		{
			p.SetState(869)
			p.Choose_statement()
		}

	case 28:
		p.EnterOuterAlt(localctx, 28)
		{
			p.SetState(870)
			p.Return_statement()
		}

	case 29:
		p.EnterOuterAlt(localctx, 29)
		{
			p.SetState(871)
			p.For_loop_statement()
		}

	case 30:
		p.EnterOuterAlt(localctx, 30)
		{
			p.SetState(872)
			p.Continue_statement()
		}

	case 31:
		p.EnterOuterAlt(localctx, 31)
		{
			p.SetState(873)
			p.Exit_statement()
		}

	case 32:
		p.EnterOuterAlt(localctx, 32)
		{
			p.SetState(874)
			p.Sql_statement()
		}

	case 33:
		p.EnterOuterAlt(localctx, 33)
		{
			p.SetState(875)
			p.Sql_commit_statement()
		}

	case 34:
		p.EnterOuterAlt(localctx, 34)
		{
			p.SetState(876)
			p.Open_cursor_statement()
		}

	case 35:
		p.EnterOuterAlt(localctx, 35)
		{
			p.SetState(877)
			p.Prepare_sql_stateent()
		}

	case 36:
		p.EnterOuterAlt(localctx, 36)
		{
			p.SetState(878)
			p.Declare_cursor_statement()
		}

	case 37:
		p.EnterOuterAlt(localctx, 37)
		{
			p.SetState(879)
			p.Close_cursor_statement()
		}

	case 38:
		p.EnterOuterAlt(localctx, 38)
		{
			p.SetState(880)
			p.Fetch_into_statement()
		}

	case 39:
		p.EnterOuterAlt(localctx, 39)
		{
			p.SetState(881)
			p.Call_statement()
		}

	}

	return localctx
}

// IPublic_statementContext is an interface to support dynamic dispatch.
type IPublic_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPublic_statementContext differentiates from other interfaces.
	IsPublic_statementContext()
}

type Public_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPublic_statementContext() *Public_statementContext {
	var p = new(Public_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_public_statement
	return p
}

func (*Public_statementContext) IsPublic_statementContext() {}

func NewPublic_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Public_statementContext {
	var p = new(Public_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_public_statement

	return p
}

func (s *Public_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Public_statementContext) COLON() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserCOLON, 0)
}

func (s *Public_statementContext) PUBLIC() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserPUBLIC, 0)
}

func (s *Public_statementContext) PROTECTED() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserPROTECTED, 0)
}

func (s *Public_statementContext) PRIVATE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserPRIVATE, 0)
}

func (s *Public_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Public_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Public_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterPublic_statement(s)
	}
}

func (s *Public_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitPublic_statement(s)
	}
}

func (p *PowerBuilderParser) Public_statement() (localctx IPublic_statementContext) {
	this := p
	_ = this

	localctx = NewPublic_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, PowerBuilderParserRULE_public_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(884)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(PowerBuilderParserPUBLIC-32))|(1<<(PowerBuilderParserPRIVATE-32))|(1<<(PowerBuilderParserPROTECTED-32)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(885)
		p.Match(PowerBuilderParserCOLON)
	}

	return localctx
}

// IThrow_statementContext is an interface to support dynamic dispatch.
type IThrow_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsThrow_statementContext differentiates from other interfaces.
	IsThrow_statementContext()
}

type Throw_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyThrow_statementContext() *Throw_statementContext {
	var p = new(Throw_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_throw_statement
	return p
}

func (*Throw_statementContext) IsThrow_statementContext() {}

func NewThrow_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Throw_statementContext {
	var p = new(Throw_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_throw_statement

	return p
}

func (s *Throw_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Throw_statementContext) THROW() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserTHROW, 0)
}

func (s *Throw_statementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Throw_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Throw_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Throw_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterThrow_statement(s)
	}
}

func (s *Throw_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitThrow_statement(s)
	}
}

func (p *PowerBuilderParser) Throw_statement() (localctx IThrow_statementContext) {
	this := p
	_ = this

	localctx = NewThrow_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, PowerBuilderParserRULE_throw_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(887)
		p.Match(PowerBuilderParserTHROW)
	}
	{
		p.SetState(888)
		p.expression(0)
	}

	return localctx
}

// IGoto_statementContext is an interface to support dynamic dispatch.
type IGoto_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGoto_statementContext differentiates from other interfaces.
	IsGoto_statementContext()
}

type Goto_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGoto_statementContext() *Goto_statementContext {
	var p = new(Goto_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_goto_statement
	return p
}

func (*Goto_statementContext) IsGoto_statementContext() {}

func NewGoto_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Goto_statementContext {
	var p = new(Goto_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_goto_statement

	return p
}

func (s *Goto_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Goto_statementContext) GOTO() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserGOTO, 0)
}

func (s *Goto_statementContext) AllVariable_name() []IVariable_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVariable_nameContext)(nil)).Elem())
	var tst = make([]IVariable_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVariable_nameContext)
		}
	}

	return tst
}

func (s *Goto_statementContext) Variable_name(i int) IVariable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVariable_nameContext)
}

func (s *Goto_statementContext) COLON() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserCOLON, 0)
}

func (s *Goto_statementContext) AllStatement() []IStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatementContext)(nil)).Elem())
	var tst = make([]IStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatementContext)
		}
	}

	return tst
}

func (s *Goto_statementContext) Statement(i int) IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *Goto_statementContext) AllSEMI() []antlr.TerminalNode {
	return s.GetTokens(PowerBuilderParserSEMI)
}

func (s *Goto_statementContext) SEMI(i int) antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserSEMI, i)
}

func (s *Goto_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Goto_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Goto_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterGoto_statement(s)
	}
}

func (s *Goto_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitGoto_statement(s)
	}
}

func (p *PowerBuilderParser) Goto_statement() (localctx IGoto_statementContext) {
	this := p
	_ = this

	localctx = NewGoto_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, PowerBuilderParserRULE_goto_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(890)
		p.Match(PowerBuilderParserGOTO)
	}
	{
		p.SetState(891)
		p.Variable_name()
	}
	p.SetState(898)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 111, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(892)
				p.Statement()
			}
			p.SetState(894)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == PowerBuilderParserSEMI {
				{
					p.SetState(893)
					p.Match(PowerBuilderParserSEMI)
				}

			}

		}
		p.SetState(900)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 111, p.GetParserRuleContext())
	}
	{
		p.SetState(901)
		p.Variable_name()
	}
	{
		p.SetState(902)
		p.Match(PowerBuilderParserCOLON)
	}
	p.SetState(909)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 113, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(903)
				p.Statement()
			}
			p.SetState(905)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 112, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(904)
					p.Match(PowerBuilderParserSEMI)
				}

			}

		}
		p.SetState(911)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 113, p.GetParserRuleContext())
	}

	return localctx
}

// IStatement_subContext is an interface to support dynamic dispatch.
type IStatement_subContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatement_subContext differentiates from other interfaces.
	IsStatement_subContext()
}

type Statement_subContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatement_subContext() *Statement_subContext {
	var p = new(Statement_subContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_statement_sub
	return p
}

func (*Statement_subContext) IsStatement_subContext() {}

func NewStatement_subContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Statement_subContext {
	var p = new(Statement_subContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_statement_sub

	return p
}

func (s *Statement_subContext) GetParser() antlr.Parser { return s.parser }

func (s *Statement_subContext) Function_virtual_call_expression_sub() IFunction_virtual_call_expression_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_virtual_call_expression_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_virtual_call_expression_subContext)
}

func (s *Statement_subContext) Function_call_expression_sub() IFunction_call_expression_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_call_expression_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_call_expression_subContext)
}

func (s *Statement_subContext) Return_statement() IReturn_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReturn_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReturn_statementContext)
}

func (s *Statement_subContext) Open_call_sub() IOpen_call_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOpen_call_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOpen_call_subContext)
}

func (s *Statement_subContext) Close_call_sub() IClose_call_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClose_call_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClose_call_subContext)
}

func (s *Statement_subContext) Variable_decl_sub() IVariable_decl_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_decl_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariable_decl_subContext)
}

func (s *Statement_subContext) Super_call_statement() ISuper_call_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISuper_call_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISuper_call_statementContext)
}

func (s *Statement_subContext) Create_call_sub() ICreate_call_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_call_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_call_subContext)
}

func (s *Statement_subContext) Destroy_call_sub() IDestroy_call_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDestroy_call_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDestroy_call_subContext)
}

func (s *Statement_subContext) Continue_sub() IContinue_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IContinue_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IContinue_subContext)
}

func (s *Statement_subContext) Assignment_statement() IAssignment_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignment_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignment_statementContext)
}

func (s *Statement_subContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Statement_subContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Statement_subContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterStatement_sub(s)
	}
}

func (s *Statement_subContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitStatement_sub(s)
	}
}

func (p *PowerBuilderParser) Statement_sub() (localctx IStatement_subContext) {
	this := p
	_ = this

	localctx = NewStatement_subContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, PowerBuilderParserRULE_statement_sub)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(923)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 114, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(912)
			p.Function_virtual_call_expression_sub()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(913)
			p.Function_call_expression_sub()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(914)
			p.Return_statement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(915)
			p.Open_call_sub()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(916)
			p.Close_call_sub()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(917)
			p.Variable_decl_sub()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(918)
			p.Super_call_statement()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(919)
			p.Create_call_sub()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(920)
			p.Destroy_call_sub()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(921)
			p.Continue_sub()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(922)
			p.Assignment_statement()
		}

	}

	return localctx
}

// ITry_catch_statementContext is an interface to support dynamic dispatch.
type ITry_catch_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTry_catch_statementContext differentiates from other interfaces.
	IsTry_catch_statementContext()
}

type Try_catch_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTry_catch_statementContext() *Try_catch_statementContext {
	var p = new(Try_catch_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_try_catch_statement
	return p
}

func (*Try_catch_statementContext) IsTry_catch_statementContext() {}

func NewTry_catch_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Try_catch_statementContext {
	var p = new(Try_catch_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_try_catch_statement

	return p
}

func (s *Try_catch_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Try_catch_statementContext) AllTRY() []antlr.TerminalNode {
	return s.GetTokens(PowerBuilderParserTRY)
}

func (s *Try_catch_statementContext) TRY(i int) antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserTRY, i)
}

func (s *Try_catch_statementContext) END() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserEND, 0)
}

func (s *Try_catch_statementContext) AllStatement() []IStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatementContext)(nil)).Elem())
	var tst = make([]IStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatementContext)
		}
	}

	return tst
}

func (s *Try_catch_statementContext) Statement(i int) IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *Try_catch_statementContext) AllCATCH() []antlr.TerminalNode {
	return s.GetTokens(PowerBuilderParserCATCH)
}

func (s *Try_catch_statementContext) CATCH(i int) antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserCATCH, i)
}

func (s *Try_catch_statementContext) AllLPAREN() []antlr.TerminalNode {
	return s.GetTokens(PowerBuilderParserLPAREN)
}

func (s *Try_catch_statementContext) LPAREN(i int) antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserLPAREN, i)
}

func (s *Try_catch_statementContext) AllVariable_decl_sub() []IVariable_decl_subContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVariable_decl_subContext)(nil)).Elem())
	var tst = make([]IVariable_decl_subContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVariable_decl_subContext)
		}
	}

	return tst
}

func (s *Try_catch_statementContext) Variable_decl_sub(i int) IVariable_decl_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_decl_subContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVariable_decl_subContext)
}

func (s *Try_catch_statementContext) AllRPAREN() []antlr.TerminalNode {
	return s.GetTokens(PowerBuilderParserRPAREN)
}

func (s *Try_catch_statementContext) RPAREN(i int) antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserRPAREN, i)
}

func (s *Try_catch_statementContext) FINALLY() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserFINALLY, 0)
}

func (s *Try_catch_statementContext) AllSEMI() []antlr.TerminalNode {
	return s.GetTokens(PowerBuilderParserSEMI)
}

func (s *Try_catch_statementContext) SEMI(i int) antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserSEMI, i)
}

func (s *Try_catch_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Try_catch_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Try_catch_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterTry_catch_statement(s)
	}
}

func (s *Try_catch_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitTry_catch_statement(s)
	}
}

func (p *PowerBuilderParser) Try_catch_statement() (localctx ITry_catch_statementContext) {
	this := p
	_ = this

	localctx = NewTry_catch_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, PowerBuilderParserRULE_try_catch_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(925)
		p.Match(PowerBuilderParserTRY)
	}
	p.SetState(932)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<PowerBuilderParserANY)|(1<<PowerBuilderParserBLOB)|(1<<PowerBuilderParserBOOLEAN)|(1<<PowerBuilderParserBYTE)|(1<<PowerBuilderParserCHARACTER)|(1<<PowerBuilderParserCHAR)|(1<<PowerBuilderParserDATE_TYPE)|(1<<PowerBuilderParserDATETIME)|(1<<PowerBuilderParserDECIMAL)|(1<<PowerBuilderParserDEC)|(1<<PowerBuilderParserDOUBLE)|(1<<PowerBuilderParserINTEGER)|(1<<PowerBuilderParserINT)|(1<<PowerBuilderParserLONG)|(1<<PowerBuilderParserLONGLONG)|(1<<PowerBuilderParserREAL)|(1<<PowerBuilderParserSTRING)|(1<<PowerBuilderParserTIME_TYPE)|(1<<PowerBuilderParserUNSIGNEDINTEGER)|(1<<PowerBuilderParserUINT)|(1<<PowerBuilderParserUNSIGNEDLONG)|(1<<PowerBuilderParserULONG)|(1<<PowerBuilderParserWINDOW)|(1<<PowerBuilderParserGLOBAL)|(1<<PowerBuilderParserINDIRECT))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(PowerBuilderParserPUBLIC-32))|(1<<(PowerBuilderParserPRIVATE-32))|(1<<(PowerBuilderParserFUNCTION-32))|(1<<(PowerBuilderParserREADONLY-32))|(1<<(PowerBuilderParserTYPE-32))|(1<<(PowerBuilderParserUPDATE-32))|(1<<(PowerBuilderParserDYNAMIC-32))|(1<<(PowerBuilderParserPRIVATEWRITE-32))|(1<<(PowerBuilderParserPROTECTED-32))|(1<<(PowerBuilderParserPRIVATEREAD-32))|(1<<(PowerBuilderParserPROTECTEDREAD-32))|(1<<(PowerBuilderParserPROTECTEDWRITE-32))|(1<<(PowerBuilderParserLOCAL-32))|(1<<(PowerBuilderParserEVENT-32))|(1<<(PowerBuilderParserOPEN-32))|(1<<(PowerBuilderParserGOTO-32))|(1<<(PowerBuilderParserIF-32))|(1<<(PowerBuilderParserTRY-32))|(1<<(PowerBuilderParserEXIT-32))|(1<<(PowerBuilderParserCHOOSE-32)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(PowerBuilderParserCONTINUE-65))|(1<<(PowerBuilderParserDO-65))|(1<<(PowerBuilderParserFOR-65))|(1<<(PowerBuilderParserCLOSE-65))|(1<<(PowerBuilderParserTHROW-65))|(1<<(PowerBuilderParserCREATE-65))|(1<<(PowerBuilderParserDESTROY-65))|(1<<(PowerBuilderParserPOST-65))|(1<<(PowerBuilderParserTRIGGER-65))|(1<<(PowerBuilderParserSELECT-65))|(1<<(PowerBuilderParserDELETE-65))|(1<<(PowerBuilderParserINSERT-65))|(1<<(PowerBuilderParserDESCRIBE-65))|(1<<(PowerBuilderParserRETURN-65))|(1<<(PowerBuilderParserCALL-65))|(1<<(PowerBuilderParserHALT-65))|(1<<(PowerBuilderParserSUPER-65))|(1<<(PowerBuilderParserSYSTEM-65)))) != 0) || (((_la-101)&-(0x1f+1)) == 0 && ((1<<uint((_la-101)))&((1<<(PowerBuilderParserSQLCA-101))|(1<<(PowerBuilderParserEXECUTE-101))|(1<<(PowerBuilderParserDECLARE-101))|(1<<(PowerBuilderParserVALUES-101))|(1<<(PowerBuilderParserCOMMIT-101))|(1<<(PowerBuilderParserPREPARE-101))|(1<<(PowerBuilderParserFETCH-101))|(1<<(PowerBuilderParserCONNECT-101))|(1<<(PowerBuilderParserDISCONNECT-101))|(1<<(PowerBuilderParserCONSTANT-101))|(1<<(PowerBuilderParserSELECTBLOB-101))|(1<<(PowerBuilderParserUPDATEBLOB-101))|(1<<(PowerBuilderParserROLLBACK-101))|(1<<(PowerBuilderParserCOLONCOLON-101)))) != 0) || (((_la-152)&-(0x1f+1)) == 0 && ((1<<uint((_la-152)))&((1<<(PowerBuilderParserAT-152))|(1<<(PowerBuilderParserUNDERSCORE-152))|(1<<(PowerBuilderParserID-152)))) != 0) {
		{
			p.SetState(926)
			p.Statement()
		}
		p.SetState(928)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PowerBuilderParserSEMI {
			{
				p.SetState(927)
				p.Match(PowerBuilderParserSEMI)
			}

		}

		p.SetState(934)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(950)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == PowerBuilderParserCATCH {
		{
			p.SetState(935)
			p.Match(PowerBuilderParserCATCH)
		}
		{
			p.SetState(936)
			p.Match(PowerBuilderParserLPAREN)
		}
		{
			p.SetState(937)
			p.Variable_decl_sub()
		}
		{
			p.SetState(938)
			p.Match(PowerBuilderParserRPAREN)
		}
		p.SetState(945)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<PowerBuilderParserANY)|(1<<PowerBuilderParserBLOB)|(1<<PowerBuilderParserBOOLEAN)|(1<<PowerBuilderParserBYTE)|(1<<PowerBuilderParserCHARACTER)|(1<<PowerBuilderParserCHAR)|(1<<PowerBuilderParserDATE_TYPE)|(1<<PowerBuilderParserDATETIME)|(1<<PowerBuilderParserDECIMAL)|(1<<PowerBuilderParserDEC)|(1<<PowerBuilderParserDOUBLE)|(1<<PowerBuilderParserINTEGER)|(1<<PowerBuilderParserINT)|(1<<PowerBuilderParserLONG)|(1<<PowerBuilderParserLONGLONG)|(1<<PowerBuilderParserREAL)|(1<<PowerBuilderParserSTRING)|(1<<PowerBuilderParserTIME_TYPE)|(1<<PowerBuilderParserUNSIGNEDINTEGER)|(1<<PowerBuilderParserUINT)|(1<<PowerBuilderParserUNSIGNEDLONG)|(1<<PowerBuilderParserULONG)|(1<<PowerBuilderParserWINDOW)|(1<<PowerBuilderParserGLOBAL)|(1<<PowerBuilderParserINDIRECT))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(PowerBuilderParserPUBLIC-32))|(1<<(PowerBuilderParserPRIVATE-32))|(1<<(PowerBuilderParserFUNCTION-32))|(1<<(PowerBuilderParserREADONLY-32))|(1<<(PowerBuilderParserTYPE-32))|(1<<(PowerBuilderParserUPDATE-32))|(1<<(PowerBuilderParserDYNAMIC-32))|(1<<(PowerBuilderParserPRIVATEWRITE-32))|(1<<(PowerBuilderParserPROTECTED-32))|(1<<(PowerBuilderParserPRIVATEREAD-32))|(1<<(PowerBuilderParserPROTECTEDREAD-32))|(1<<(PowerBuilderParserPROTECTEDWRITE-32))|(1<<(PowerBuilderParserLOCAL-32))|(1<<(PowerBuilderParserEVENT-32))|(1<<(PowerBuilderParserOPEN-32))|(1<<(PowerBuilderParserGOTO-32))|(1<<(PowerBuilderParserIF-32))|(1<<(PowerBuilderParserTRY-32))|(1<<(PowerBuilderParserEXIT-32))|(1<<(PowerBuilderParserCHOOSE-32)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(PowerBuilderParserCONTINUE-65))|(1<<(PowerBuilderParserDO-65))|(1<<(PowerBuilderParserFOR-65))|(1<<(PowerBuilderParserCLOSE-65))|(1<<(PowerBuilderParserTHROW-65))|(1<<(PowerBuilderParserCREATE-65))|(1<<(PowerBuilderParserDESTROY-65))|(1<<(PowerBuilderParserPOST-65))|(1<<(PowerBuilderParserTRIGGER-65))|(1<<(PowerBuilderParserSELECT-65))|(1<<(PowerBuilderParserDELETE-65))|(1<<(PowerBuilderParserINSERT-65))|(1<<(PowerBuilderParserDESCRIBE-65))|(1<<(PowerBuilderParserRETURN-65))|(1<<(PowerBuilderParserCALL-65))|(1<<(PowerBuilderParserHALT-65))|(1<<(PowerBuilderParserSUPER-65))|(1<<(PowerBuilderParserSYSTEM-65)))) != 0) || (((_la-101)&-(0x1f+1)) == 0 && ((1<<uint((_la-101)))&((1<<(PowerBuilderParserSQLCA-101))|(1<<(PowerBuilderParserEXECUTE-101))|(1<<(PowerBuilderParserDECLARE-101))|(1<<(PowerBuilderParserVALUES-101))|(1<<(PowerBuilderParserCOMMIT-101))|(1<<(PowerBuilderParserPREPARE-101))|(1<<(PowerBuilderParserFETCH-101))|(1<<(PowerBuilderParserCONNECT-101))|(1<<(PowerBuilderParserDISCONNECT-101))|(1<<(PowerBuilderParserCONSTANT-101))|(1<<(PowerBuilderParserSELECTBLOB-101))|(1<<(PowerBuilderParserUPDATEBLOB-101))|(1<<(PowerBuilderParserROLLBACK-101))|(1<<(PowerBuilderParserCOLONCOLON-101)))) != 0) || (((_la-152)&-(0x1f+1)) == 0 && ((1<<uint((_la-152)))&((1<<(PowerBuilderParserAT-152))|(1<<(PowerBuilderParserUNDERSCORE-152))|(1<<(PowerBuilderParserID-152)))) != 0) {
			{
				p.SetState(939)
				p.Statement()
			}
			p.SetState(941)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == PowerBuilderParserSEMI {
				{
					p.SetState(940)
					p.Match(PowerBuilderParserSEMI)
				}

			}

			p.SetState(947)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

		p.SetState(952)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(963)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PowerBuilderParserFINALLY {
		{
			p.SetState(953)
			p.Match(PowerBuilderParserFINALLY)
		}
		p.SetState(960)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<PowerBuilderParserANY)|(1<<PowerBuilderParserBLOB)|(1<<PowerBuilderParserBOOLEAN)|(1<<PowerBuilderParserBYTE)|(1<<PowerBuilderParserCHARACTER)|(1<<PowerBuilderParserCHAR)|(1<<PowerBuilderParserDATE_TYPE)|(1<<PowerBuilderParserDATETIME)|(1<<PowerBuilderParserDECIMAL)|(1<<PowerBuilderParserDEC)|(1<<PowerBuilderParserDOUBLE)|(1<<PowerBuilderParserINTEGER)|(1<<PowerBuilderParserINT)|(1<<PowerBuilderParserLONG)|(1<<PowerBuilderParserLONGLONG)|(1<<PowerBuilderParserREAL)|(1<<PowerBuilderParserSTRING)|(1<<PowerBuilderParserTIME_TYPE)|(1<<PowerBuilderParserUNSIGNEDINTEGER)|(1<<PowerBuilderParserUINT)|(1<<PowerBuilderParserUNSIGNEDLONG)|(1<<PowerBuilderParserULONG)|(1<<PowerBuilderParserWINDOW)|(1<<PowerBuilderParserGLOBAL)|(1<<PowerBuilderParserINDIRECT))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(PowerBuilderParserPUBLIC-32))|(1<<(PowerBuilderParserPRIVATE-32))|(1<<(PowerBuilderParserFUNCTION-32))|(1<<(PowerBuilderParserREADONLY-32))|(1<<(PowerBuilderParserTYPE-32))|(1<<(PowerBuilderParserUPDATE-32))|(1<<(PowerBuilderParserDYNAMIC-32))|(1<<(PowerBuilderParserPRIVATEWRITE-32))|(1<<(PowerBuilderParserPROTECTED-32))|(1<<(PowerBuilderParserPRIVATEREAD-32))|(1<<(PowerBuilderParserPROTECTEDREAD-32))|(1<<(PowerBuilderParserPROTECTEDWRITE-32))|(1<<(PowerBuilderParserLOCAL-32))|(1<<(PowerBuilderParserEVENT-32))|(1<<(PowerBuilderParserOPEN-32))|(1<<(PowerBuilderParserGOTO-32))|(1<<(PowerBuilderParserIF-32))|(1<<(PowerBuilderParserTRY-32))|(1<<(PowerBuilderParserEXIT-32))|(1<<(PowerBuilderParserCHOOSE-32)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(PowerBuilderParserCONTINUE-65))|(1<<(PowerBuilderParserDO-65))|(1<<(PowerBuilderParserFOR-65))|(1<<(PowerBuilderParserCLOSE-65))|(1<<(PowerBuilderParserTHROW-65))|(1<<(PowerBuilderParserCREATE-65))|(1<<(PowerBuilderParserDESTROY-65))|(1<<(PowerBuilderParserPOST-65))|(1<<(PowerBuilderParserTRIGGER-65))|(1<<(PowerBuilderParserSELECT-65))|(1<<(PowerBuilderParserDELETE-65))|(1<<(PowerBuilderParserINSERT-65))|(1<<(PowerBuilderParserDESCRIBE-65))|(1<<(PowerBuilderParserRETURN-65))|(1<<(PowerBuilderParserCALL-65))|(1<<(PowerBuilderParserHALT-65))|(1<<(PowerBuilderParserSUPER-65))|(1<<(PowerBuilderParserSYSTEM-65)))) != 0) || (((_la-101)&-(0x1f+1)) == 0 && ((1<<uint((_la-101)))&((1<<(PowerBuilderParserSQLCA-101))|(1<<(PowerBuilderParserEXECUTE-101))|(1<<(PowerBuilderParserDECLARE-101))|(1<<(PowerBuilderParserVALUES-101))|(1<<(PowerBuilderParserCOMMIT-101))|(1<<(PowerBuilderParserPREPARE-101))|(1<<(PowerBuilderParserFETCH-101))|(1<<(PowerBuilderParserCONNECT-101))|(1<<(PowerBuilderParserDISCONNECT-101))|(1<<(PowerBuilderParserCONSTANT-101))|(1<<(PowerBuilderParserSELECTBLOB-101))|(1<<(PowerBuilderParserUPDATEBLOB-101))|(1<<(PowerBuilderParserROLLBACK-101))|(1<<(PowerBuilderParserCOLONCOLON-101)))) != 0) || (((_la-152)&-(0x1f+1)) == 0 && ((1<<uint((_la-152)))&((1<<(PowerBuilderParserAT-152))|(1<<(PowerBuilderParserUNDERSCORE-152))|(1<<(PowerBuilderParserID-152)))) != 0) {
			{
				p.SetState(954)
				p.Statement()
			}
			p.SetState(956)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == PowerBuilderParserSEMI {
				{
					p.SetState(955)
					p.Match(PowerBuilderParserSEMI)
				}

			}

			p.SetState(962)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(965)
		p.Match(PowerBuilderParserEND)
	}
	{
		p.SetState(966)
		p.Match(PowerBuilderParserTRY)
	}

	return localctx
}

// ISql_statementContext is an interface to support dynamic dispatch.
type ISql_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSql_statementContext differentiates from other interfaces.
	IsSql_statementContext()
}

type Sql_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySql_statementContext() *Sql_statementContext {
	var p = new(Sql_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_sql_statement
	return p
}

func (*Sql_statementContext) IsSql_statementContext() {}

func NewSql_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sql_statementContext {
	var p = new(Sql_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_sql_statement

	return p
}

func (s *Sql_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Sql_statementContext) Sql_insert_statement() ISql_insert_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISql_insert_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISql_insert_statementContext)
}

func (s *Sql_statementContext) Sql_delete_statement() ISql_delete_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISql_delete_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISql_delete_statementContext)
}

func (s *Sql_statementContext) Sql_select_statement() ISql_select_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISql_select_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISql_select_statementContext)
}

func (s *Sql_statementContext) Sql_update_statement() ISql_update_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISql_update_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISql_update_statementContext)
}

func (s *Sql_statementContext) Sql_connect_statement() ISql_connect_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISql_connect_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISql_connect_statementContext)
}

func (s *Sql_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sql_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sql_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterSql_statement(s)
	}
}

func (s *Sql_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitSql_statement(s)
	}
}

func (p *PowerBuilderParser) Sql_statement() (localctx ISql_statementContext) {
	this := p
	_ = this

	localctx = NewSql_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, PowerBuilderParserRULE_sql_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(973)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PowerBuilderParserINSERT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(968)
			p.Sql_insert_statement()
		}

	case PowerBuilderParserDELETE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(969)
			p.Sql_delete_statement()
		}

	case PowerBuilderParserSELECT, PowerBuilderParserSELECTBLOB:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(970)
			p.Sql_select_statement()
		}

	case PowerBuilderParserUPDATE, PowerBuilderParserUPDATEBLOB:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(971)
			p.Sql_update_statement()
		}

	case PowerBuilderParserCONNECT, PowerBuilderParserDISCONNECT, PowerBuilderParserROLLBACK:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(972)
			p.Sql_connect_statement()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISql_insert_statementContext is an interface to support dynamic dispatch.
type ISql_insert_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSql_insert_statementContext differentiates from other interfaces.
	IsSql_insert_statementContext()
}

type Sql_insert_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySql_insert_statementContext() *Sql_insert_statementContext {
	var p = new(Sql_insert_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_sql_insert_statement
	return p
}

func (*Sql_insert_statementContext) IsSql_insert_statementContext() {}

func NewSql_insert_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sql_insert_statementContext {
	var p = new(Sql_insert_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_sql_insert_statement

	return p
}

func (s *Sql_insert_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Sql_insert_statementContext) INSERT() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserINSERT, 0)
}

func (s *Sql_insert_statementContext) INTO() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserINTO, 0)
}

func (s *Sql_insert_statementContext) AllVariable_name() []IVariable_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVariable_nameContext)(nil)).Elem())
	var tst = make([]IVariable_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVariable_nameContext)
		}
	}

	return tst
}

func (s *Sql_insert_statementContext) Variable_name(i int) IVariable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVariable_nameContext)
}

func (s *Sql_insert_statementContext) AllLPAREN() []antlr.TerminalNode {
	return s.GetTokens(PowerBuilderParserLPAREN)
}

func (s *Sql_insert_statementContext) LPAREN(i int) antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserLPAREN, i)
}

func (s *Sql_insert_statementContext) AllRPAREN() []antlr.TerminalNode {
	return s.GetTokens(PowerBuilderParserRPAREN)
}

func (s *Sql_insert_statementContext) RPAREN(i int) antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserRPAREN, i)
}

func (s *Sql_insert_statementContext) VALUES() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserVALUES, 0)
}

func (s *Sql_insert_statementContext) AllSql_values() []ISql_valuesContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISql_valuesContext)(nil)).Elem())
	var tst = make([]ISql_valuesContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISql_valuesContext)
		}
	}

	return tst
}

func (s *Sql_insert_statementContext) Sql_values(i int) ISql_valuesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISql_valuesContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISql_valuesContext)
}

func (s *Sql_insert_statementContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PowerBuilderParserCOMMA)
}

func (s *Sql_insert_statementContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserCOMMA, i)
}

func (s *Sql_insert_statementContext) SEMI() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserSEMI, 0)
}

func (s *Sql_insert_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sql_insert_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sql_insert_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterSql_insert_statement(s)
	}
}

func (s *Sql_insert_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitSql_insert_statement(s)
	}
}

func (p *PowerBuilderParser) Sql_insert_statement() (localctx ISql_insert_statementContext) {
	this := p
	_ = this

	localctx = NewSql_insert_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, PowerBuilderParserRULE_sql_insert_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(975)
		p.Match(PowerBuilderParserINSERT)
	}
	{
		p.SetState(976)
		p.Match(PowerBuilderParserINTO)
	}
	{
		p.SetState(977)
		p.Variable_name()
	}
	{
		p.SetState(978)
		p.Match(PowerBuilderParserLPAREN)
	}
	{
		p.SetState(979)
		p.Variable_name()
	}
	p.SetState(984)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == PowerBuilderParserCOMMA {
		{
			p.SetState(980)
			p.Match(PowerBuilderParserCOMMA)
		}
		{
			p.SetState(981)
			p.Variable_name()
		}

		p.SetState(986)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(987)
		p.Match(PowerBuilderParserRPAREN)
	}
	{
		p.SetState(988)
		p.Match(PowerBuilderParserVALUES)
	}
	{
		p.SetState(989)
		p.Match(PowerBuilderParserLPAREN)
	}
	{
		p.SetState(990)
		p.Sql_values()
	}
	p.SetState(995)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == PowerBuilderParserCOMMA {
		{
			p.SetState(991)
			p.Match(PowerBuilderParserCOMMA)
		}
		{
			p.SetState(992)
			p.Sql_values()
		}

		p.SetState(997)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(998)
		p.Match(PowerBuilderParserRPAREN)
	}
	p.SetState(1000)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 126, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(999)
			p.Match(PowerBuilderParserSEMI)
		}

	}

	return localctx
}

// ISql_valuesContext is an interface to support dynamic dispatch.
type ISql_valuesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSql_valuesContext differentiates from other interfaces.
	IsSql_valuesContext()
}

type Sql_valuesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySql_valuesContext() *Sql_valuesContext {
	var p = new(Sql_valuesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_sql_values
	return p
}

func (*Sql_valuesContext) IsSql_valuesContext() {}

func NewSql_valuesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sql_valuesContext {
	var p = new(Sql_valuesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_sql_values

	return p
}

func (s *Sql_valuesContext) GetParser() antlr.Parser { return s.parser }

func (s *Sql_valuesContext) Value() IValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IValueContext)
}

func (s *Sql_valuesContext) Bind_param() IBind_paramContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBind_paramContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBind_paramContext)
}

func (s *Sql_valuesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sql_valuesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sql_valuesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterSql_values(s)
	}
}

func (s *Sql_valuesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitSql_values(s)
	}
}

func (p *PowerBuilderParser) Sql_values() (localctx ISql_valuesContext) {
	this := p
	_ = this

	localctx = NewSql_valuesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, PowerBuilderParserRULE_sql_values)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1004)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PowerBuilderParserTRUE, PowerBuilderParserFALSE, PowerBuilderParserDQUOTED_STRING, PowerBuilderParserQUOTED_STRING, PowerBuilderParserNUMBER, PowerBuilderParserDATE, PowerBuilderParserTIME, PowerBuilderParserENUM:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1002)
			p.Value()
		}

	case PowerBuilderParserCOLON:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1003)
			p.Bind_param()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISql_delete_statementContext is an interface to support dynamic dispatch.
type ISql_delete_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSql_delete_statementContext differentiates from other interfaces.
	IsSql_delete_statementContext()
}

type Sql_delete_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySql_delete_statementContext() *Sql_delete_statementContext {
	var p = new(Sql_delete_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_sql_delete_statement
	return p
}

func (*Sql_delete_statementContext) IsSql_delete_statementContext() {}

func NewSql_delete_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sql_delete_statementContext {
	var p = new(Sql_delete_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_sql_delete_statement

	return p
}

func (s *Sql_delete_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Sql_delete_statementContext) DELETE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserDELETE, 0)
}

func (s *Sql_delete_statementContext) FROM() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserFROM, 0)
}

func (s *Sql_delete_statementContext) Variable_name() IVariable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariable_nameContext)
}

func (s *Sql_delete_statementContext) Where_clause() IWhere_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhere_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWhere_clauseContext)
}

func (s *Sql_delete_statementContext) SEMI() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserSEMI, 0)
}

func (s *Sql_delete_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sql_delete_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sql_delete_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterSql_delete_statement(s)
	}
}

func (s *Sql_delete_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitSql_delete_statement(s)
	}
}

func (p *PowerBuilderParser) Sql_delete_statement() (localctx ISql_delete_statementContext) {
	this := p
	_ = this

	localctx = NewSql_delete_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, PowerBuilderParserRULE_sql_delete_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1006)
		p.Match(PowerBuilderParserDELETE)
	}
	{
		p.SetState(1007)
		p.Match(PowerBuilderParserFROM)
	}
	{
		p.SetState(1008)
		p.Variable_name()
	}
	{
		p.SetState(1009)
		p.Where_clause()
	}
	p.SetState(1011)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 128, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1010)
			p.Match(PowerBuilderParserSEMI)
		}

	}

	return localctx
}

// ISql_select_statementContext is an interface to support dynamic dispatch.
type ISql_select_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSql_select_statementContext differentiates from other interfaces.
	IsSql_select_statementContext()
}

type Sql_select_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySql_select_statementContext() *Sql_select_statementContext {
	var p = new(Sql_select_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_sql_select_statement
	return p
}

func (*Sql_select_statementContext) IsSql_select_statementContext() {}

func NewSql_select_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sql_select_statementContext {
	var p = new(Sql_select_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_sql_select_statement

	return p
}

func (s *Sql_select_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Sql_select_statementContext) Select_clause() ISelect_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_clauseContext)
}

func (s *Sql_select_statementContext) INTO() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserINTO, 0)
}

func (s *Sql_select_statementContext) AllBind_param() []IBind_paramContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBind_paramContext)(nil)).Elem())
	var tst = make([]IBind_paramContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBind_paramContext)
		}
	}

	return tst
}

func (s *Sql_select_statementContext) Bind_param(i int) IBind_paramContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBind_paramContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBind_paramContext)
}

func (s *Sql_select_statementContext) FROM() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserFROM, 0)
}

func (s *Sql_select_statementContext) AllVariable_name() []IVariable_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVariable_nameContext)(nil)).Elem())
	var tst = make([]IVariable_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVariable_nameContext)
		}
	}

	return tst
}

func (s *Sql_select_statementContext) Variable_name(i int) IVariable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVariable_nameContext)
}

func (s *Sql_select_statementContext) SELECT() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserSELECT, 0)
}

func (s *Sql_select_statementContext) SELECTBLOB() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserSELECTBLOB, 0)
}

func (s *Sql_select_statementContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PowerBuilderParserCOMMA)
}

func (s *Sql_select_statementContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserCOMMA, i)
}

func (s *Sql_select_statementContext) Where_clause() IWhere_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhere_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWhere_clauseContext)
}

func (s *Sql_select_statementContext) USING() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserUSING, 0)
}

func (s *Sql_select_statementContext) SEMI() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserSEMI, 0)
}

func (s *Sql_select_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sql_select_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sql_select_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterSql_select_statement(s)
	}
}

func (s *Sql_select_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitSql_select_statement(s)
	}
}

func (p *PowerBuilderParser) Sql_select_statement() (localctx ISql_select_statementContext) {
	this := p
	_ = this

	localctx = NewSql_select_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, PowerBuilderParserRULE_sql_select_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1013)
		_la = p.GetTokenStream().LA(1)

		if !(_la == PowerBuilderParserSELECT || _la == PowerBuilderParserSELECTBLOB) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(1014)
		p.Select_clause()
	}
	{
		p.SetState(1015)
		p.Match(PowerBuilderParserINTO)
	}
	{
		p.SetState(1016)
		p.Bind_param()
	}
	p.SetState(1021)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == PowerBuilderParserCOMMA {
		{
			p.SetState(1017)
			p.Match(PowerBuilderParserCOMMA)
		}
		{
			p.SetState(1018)
			p.Bind_param()
		}

		p.SetState(1023)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1024)
		p.Match(PowerBuilderParserFROM)
	}
	{
		p.SetState(1025)
		p.Variable_name()
	}
	p.SetState(1030)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == PowerBuilderParserCOMMA {
		{
			p.SetState(1026)
			p.Match(PowerBuilderParserCOMMA)
		}
		{
			p.SetState(1027)
			p.Variable_name()
		}

		p.SetState(1032)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(1034)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PowerBuilderParserWHERE {
		{
			p.SetState(1033)
			p.Where_clause()
		}

	}
	p.SetState(1038)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PowerBuilderParserUSING {
		{
			p.SetState(1036)
			p.Match(PowerBuilderParserUSING)
		}
		{
			p.SetState(1037)
			p.Variable_name()
		}

	}
	p.SetState(1041)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 133, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1040)
			p.Match(PowerBuilderParserSEMI)
		}

	}

	return localctx
}

// ISql_update_statementContext is an interface to support dynamic dispatch.
type ISql_update_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSql_update_statementContext differentiates from other interfaces.
	IsSql_update_statementContext()
}

type Sql_update_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySql_update_statementContext() *Sql_update_statementContext {
	var p = new(Sql_update_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_sql_update_statement
	return p
}

func (*Sql_update_statementContext) IsSql_update_statementContext() {}

func NewSql_update_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sql_update_statementContext {
	var p = new(Sql_update_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_sql_update_statement

	return p
}

func (s *Sql_update_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Sql_update_statementContext) Variable_name() IVariable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariable_nameContext)
}

func (s *Sql_update_statementContext) SET() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserSET, 0)
}

func (s *Sql_update_statementContext) AllSet_value() []ISet_valueContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISet_valueContext)(nil)).Elem())
	var tst = make([]ISet_valueContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISet_valueContext)
		}
	}

	return tst
}

func (s *Sql_update_statementContext) Set_value(i int) ISet_valueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISet_valueContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISet_valueContext)
}

func (s *Sql_update_statementContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserUPDATE, 0)
}

func (s *Sql_update_statementContext) UPDATEBLOB() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserUPDATEBLOB, 0)
}

func (s *Sql_update_statementContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PowerBuilderParserCOMMA)
}

func (s *Sql_update_statementContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserCOMMA, i)
}

func (s *Sql_update_statementContext) Where_clause() IWhere_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhere_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWhere_clauseContext)
}

func (s *Sql_update_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sql_update_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sql_update_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterSql_update_statement(s)
	}
}

func (s *Sql_update_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitSql_update_statement(s)
	}
}

func (p *PowerBuilderParser) Sql_update_statement() (localctx ISql_update_statementContext) {
	this := p
	_ = this

	localctx = NewSql_update_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, PowerBuilderParserRULE_sql_update_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1043)
		_la = p.GetTokenStream().LA(1)

		if !(_la == PowerBuilderParserUPDATE || _la == PowerBuilderParserUPDATEBLOB) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(1044)
		p.Variable_name()
	}
	{
		p.SetState(1045)
		p.Match(PowerBuilderParserSET)
	}
	{
		p.SetState(1046)
		p.Set_value()
	}
	p.SetState(1051)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == PowerBuilderParserCOMMA {
		{
			p.SetState(1047)
			p.Match(PowerBuilderParserCOMMA)
		}
		{
			p.SetState(1048)
			p.Set_value()
		}

		p.SetState(1053)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(1055)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PowerBuilderParserWHERE {
		{
			p.SetState(1054)
			p.Where_clause()
		}

	}

	return localctx
}

// ISql_connect_statementContext is an interface to support dynamic dispatch.
type ISql_connect_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSql_connect_statementContext differentiates from other interfaces.
	IsSql_connect_statementContext()
}

type Sql_connect_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySql_connect_statementContext() *Sql_connect_statementContext {
	var p = new(Sql_connect_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_sql_connect_statement
	return p
}

func (*Sql_connect_statementContext) IsSql_connect_statementContext() {}

func NewSql_connect_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sql_connect_statementContext {
	var p = new(Sql_connect_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_sql_connect_statement

	return p
}

func (s *Sql_connect_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Sql_connect_statementContext) SEMI() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserSEMI, 0)
}

func (s *Sql_connect_statementContext) CONNECT() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserCONNECT, 0)
}

func (s *Sql_connect_statementContext) DISCONNECT() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserDISCONNECT, 0)
}

func (s *Sql_connect_statementContext) ROLLBACK() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserROLLBACK, 0)
}

func (s *Sql_connect_statementContext) USING() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserUSING, 0)
}

func (s *Sql_connect_statementContext) SQLCA() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserSQLCA, 0)
}

func (s *Sql_connect_statementContext) Identifier_name() IIdentifier_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_nameContext)
}

func (s *Sql_connect_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sql_connect_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sql_connect_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterSql_connect_statement(s)
	}
}

func (s *Sql_connect_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitSql_connect_statement(s)
	}
}

func (p *PowerBuilderParser) Sql_connect_statement() (localctx ISql_connect_statementContext) {
	this := p
	_ = this

	localctx = NewSql_connect_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, PowerBuilderParserRULE_sql_connect_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1057)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-114)&-(0x1f+1)) == 0 && ((1<<uint((_la-114)))&((1<<(PowerBuilderParserCONNECT-114))|(1<<(PowerBuilderParserDISCONNECT-114))|(1<<(PowerBuilderParserROLLBACK-114)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(1063)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PowerBuilderParserUSING {
		{
			p.SetState(1058)
			p.Match(PowerBuilderParserUSING)
		}
		p.SetState(1061)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case PowerBuilderParserSQLCA:
			{
				p.SetState(1059)
				p.Match(PowerBuilderParserSQLCA)
			}

		case PowerBuilderParserUNDERSCORE, PowerBuilderParserID:
			{
				p.SetState(1060)
				p.Identifier_name()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	}
	{
		p.SetState(1065)
		p.Match(PowerBuilderParserSEMI)
	}

	return localctx
}

// ISet_valueContext is an interface to support dynamic dispatch.
type ISet_valueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSet_valueContext differentiates from other interfaces.
	IsSet_valueContext()
}

type Set_valueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySet_valueContext() *Set_valueContext {
	var p = new(Set_valueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_set_value
	return p
}

func (*Set_valueContext) IsSet_valueContext() {}

func NewSet_valueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Set_valueContext {
	var p = new(Set_valueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_set_value

	return p
}

func (s *Set_valueContext) GetParser() antlr.Parser { return s.parser }

func (s *Set_valueContext) Variable_name() IVariable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariable_nameContext)
}

func (s *Set_valueContext) EQ() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserEQ, 0)
}

func (s *Set_valueContext) Bind_param() IBind_paramContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBind_paramContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBind_paramContext)
}

func (s *Set_valueContext) IS() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserIS, 0)
}

func (s *Set_valueContext) NULL_() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserNULL_, 0)
}

func (s *Set_valueContext) NOT() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserNOT, 0)
}

func (s *Set_valueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Set_valueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Set_valueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterSet_value(s)
	}
}

func (s *Set_valueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitSet_value(s)
	}
}

func (p *PowerBuilderParser) Set_value() (localctx ISet_valueContext) {
	this := p
	_ = this

	localctx = NewSet_valueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, PowerBuilderParserRULE_set_value)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1078)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 139, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1067)
			p.Variable_name()
		}
		{
			p.SetState(1068)
			p.Match(PowerBuilderParserEQ)
		}
		{
			p.SetState(1069)
			p.Bind_param()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1071)
			p.Variable_name()
		}
		{
			p.SetState(1072)
			p.Match(PowerBuilderParserIS)
		}
		p.SetState(1074)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PowerBuilderParserNOT {
			{
				p.SetState(1073)
				p.Match(PowerBuilderParserNOT)
			}

		}
		{
			p.SetState(1076)
			p.Match(PowerBuilderParserNULL_)
		}

	}

	return localctx
}

// IWhere_clauseContext is an interface to support dynamic dispatch.
type IWhere_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWhere_clauseContext differentiates from other interfaces.
	IsWhere_clauseContext()
}

type Where_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWhere_clauseContext() *Where_clauseContext {
	var p = new(Where_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_where_clause
	return p
}

func (*Where_clauseContext) IsWhere_clauseContext() {}

func NewWhere_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Where_clauseContext {
	var p = new(Where_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_where_clause

	return p
}

func (s *Where_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Where_clauseContext) WHERE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserWHERE, 0)
}

func (s *Where_clauseContext) AllSet_value() []ISet_valueContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISet_valueContext)(nil)).Elem())
	var tst = make([]ISet_valueContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISet_valueContext)
		}
	}

	return tst
}

func (s *Where_clauseContext) Set_value(i int) ISet_valueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISet_valueContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISet_valueContext)
}

func (s *Where_clauseContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PowerBuilderParserCOMMA)
}

func (s *Where_clauseContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserCOMMA, i)
}

func (s *Where_clauseContext) Condition_or() ICondition_orContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICondition_orContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICondition_orContext)
}

func (s *Where_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Where_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Where_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterWhere_clause(s)
	}
}

func (s *Where_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitWhere_clause(s)
	}
}

func (p *PowerBuilderParser) Where_clause() (localctx IWhere_clauseContext) {
	this := p
	_ = this

	localctx = NewWhere_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, PowerBuilderParserRULE_where_clause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1091)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 141, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1080)
			p.Match(PowerBuilderParserWHERE)
		}
		{
			p.SetState(1081)
			p.Set_value()
		}
		p.SetState(1086)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == PowerBuilderParserCOMMA {
			{
				p.SetState(1082)
				p.Match(PowerBuilderParserCOMMA)
			}
			{
				p.SetState(1083)
				p.Set_value()
			}

			p.SetState(1088)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1089)
			p.Match(PowerBuilderParserWHERE)
		}
		{
			p.SetState(1090)
			p.Condition_or()
		}

	}

	return localctx
}

// ISelect_clauseContext is an interface to support dynamic dispatch.
type ISelect_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelect_clauseContext differentiates from other interfaces.
	IsSelect_clauseContext()
}

type Select_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelect_clauseContext() *Select_clauseContext {
	var p = new(Select_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_select_clause
	return p
}

func (*Select_clauseContext) IsSelect_clauseContext() {}

func NewSelect_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_clauseContext {
	var p = new(Select_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_select_clause

	return p
}

func (s *Select_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_clauseContext) AllVariable_name() []IVariable_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVariable_nameContext)(nil)).Elem())
	var tst = make([]IVariable_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVariable_nameContext)
		}
	}

	return tst
}

func (s *Select_clauseContext) Variable_name(i int) IVariable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVariable_nameContext)
}

func (s *Select_clauseContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PowerBuilderParserCOMMA)
}

func (s *Select_clauseContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserCOMMA, i)
}

func (s *Select_clauseContext) Function_call_statement() IFunction_call_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_call_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_call_statementContext)
}

func (s *Select_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Select_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterSelect_clause(s)
	}
}

func (s *Select_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitSelect_clause(s)
	}
}

func (p *PowerBuilderParser) Select_clause() (localctx ISelect_clauseContext) {
	this := p
	_ = this

	localctx = NewSelect_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, PowerBuilderParserRULE_select_clause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1102)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 143, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1093)
			p.Variable_name()
		}
		p.SetState(1098)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == PowerBuilderParserCOMMA {
			{
				p.SetState(1094)
				p.Match(PowerBuilderParserCOMMA)
			}
			{
				p.SetState(1095)
				p.Variable_name()
			}

			p.SetState(1100)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1101)
			p.Function_call_statement()
		}

	}

	return localctx
}

// ISql_commit_statementContext is an interface to support dynamic dispatch.
type ISql_commit_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSql_commit_statementContext differentiates from other interfaces.
	IsSql_commit_statementContext()
}

type Sql_commit_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySql_commit_statementContext() *Sql_commit_statementContext {
	var p = new(Sql_commit_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_sql_commit_statement
	return p
}

func (*Sql_commit_statementContext) IsSql_commit_statementContext() {}

func NewSql_commit_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sql_commit_statementContext {
	var p = new(Sql_commit_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_sql_commit_statement

	return p
}

func (s *Sql_commit_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Sql_commit_statementContext) COMMIT() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserCOMMIT, 0)
}

func (s *Sql_commit_statementContext) USING() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserUSING, 0)
}

func (s *Sql_commit_statementContext) SQLCA() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserSQLCA, 0)
}

func (s *Sql_commit_statementContext) Variable_name() IVariable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariable_nameContext)
}

func (s *Sql_commit_statementContext) SEMI() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserSEMI, 0)
}

func (s *Sql_commit_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sql_commit_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sql_commit_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterSql_commit_statement(s)
	}
}

func (s *Sql_commit_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitSql_commit_statement(s)
	}
}

func (p *PowerBuilderParser) Sql_commit_statement() (localctx ISql_commit_statementContext) {
	this := p
	_ = this

	localctx = NewSql_commit_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, PowerBuilderParserRULE_sql_commit_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1104)
		p.Match(PowerBuilderParserCOMMIT)
	}
	p.SetState(1106)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PowerBuilderParserUSING {
		{
			p.SetState(1105)
			p.Match(PowerBuilderParserUSING)
		}

	}
	p.SetState(1110)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 145, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1108)
			p.Match(PowerBuilderParserSQLCA)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 145, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(1109)
			p.Variable_name()
		}

	}
	p.SetState(1113)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 146, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1112)
			p.Match(PowerBuilderParserSEMI)
		}

	}

	return localctx
}

// IExecute_statementContext is an interface to support dynamic dispatch.
type IExecute_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExecute_statementContext differentiates from other interfaces.
	IsExecute_statementContext()
}

type Execute_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExecute_statementContext() *Execute_statementContext {
	var p = new(Execute_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_execute_statement
	return p
}

func (*Execute_statementContext) IsExecute_statementContext() {}

func NewExecute_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Execute_statementContext {
	var p = new(Execute_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_execute_statement

	return p
}

func (s *Execute_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Execute_statementContext) EXECUTE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserEXECUTE, 0)
}

func (s *Execute_statementContext) Variable_name() IVariable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariable_nameContext)
}

func (s *Execute_statementContext) Value() IValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IValueContext)
}

func (s *Execute_statementContext) IMMEDIATE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserIMMEDIATE, 0)
}

func (s *Execute_statementContext) SEMI() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserSEMI, 0)
}

func (s *Execute_statementContext) Bind_param() IBind_paramContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBind_paramContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBind_paramContext)
}

func (s *Execute_statementContext) USING() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserUSING, 0)
}

func (s *Execute_statementContext) SQLCA() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserSQLCA, 0)
}

func (s *Execute_statementContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Execute_statementContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Execute_statementContext) DYNAMIC() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserDYNAMIC, 0)
}

func (s *Execute_statementContext) DESCRIPTOR() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserDESCRIPTOR, 0)
}

func (s *Execute_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Execute_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Execute_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterExecute_statement(s)
	}
}

func (s *Execute_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitExecute_statement(s)
	}
}

func (p *PowerBuilderParser) Execute_statement() (localctx IExecute_statementContext) {
	this := p
	_ = this

	localctx = NewExecute_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, PowerBuilderParserRULE_execute_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1158)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 158, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1115)
			p.Match(PowerBuilderParserEXECUTE)
		}
		p.SetState(1117)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PowerBuilderParserIMMEDIATE {
			{
				p.SetState(1116)
				p.Match(PowerBuilderParserIMMEDIATE)
			}

		}
		p.SetState(1121)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case PowerBuilderParserDATE_TYPE, PowerBuilderParserTIME_TYPE, PowerBuilderParserWINDOW, PowerBuilderParserREADONLY, PowerBuilderParserTYPE, PowerBuilderParserUPDATE, PowerBuilderParserOPEN, PowerBuilderParserGOTO, PowerBuilderParserCLOSE, PowerBuilderParserCREATE, PowerBuilderParserSELECT, PowerBuilderParserDELETE, PowerBuilderParserINSERT, PowerBuilderParserSYSTEM, PowerBuilderParserSQLCA, PowerBuilderParserVALUES, PowerBuilderParserUNDERSCORE, PowerBuilderParserID:
			{
				p.SetState(1119)
				p.Variable_name()
			}

		case PowerBuilderParserTRUE, PowerBuilderParserFALSE, PowerBuilderParserDQUOTED_STRING, PowerBuilderParserQUOTED_STRING, PowerBuilderParserNUMBER, PowerBuilderParserDATE, PowerBuilderParserTIME, PowerBuilderParserENUM:
			{
				p.SetState(1120)
				p.Value()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(1124)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 149, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1123)
				p.Match(PowerBuilderParserSEMI)
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1126)
			p.Match(PowerBuilderParserEXECUTE)
		}
		p.SetState(1128)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PowerBuilderParserIMMEDIATE {
			{
				p.SetState(1127)
				p.Match(PowerBuilderParserIMMEDIATE)
			}

		}
		{
			p.SetState(1130)
			p.Bind_param()
		}
		p.SetState(1136)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PowerBuilderParserUSING {
			{
				p.SetState(1131)
				p.Match(PowerBuilderParserUSING)
			}
			p.SetState(1134)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 151, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(1132)
					p.Match(PowerBuilderParserSQLCA)
				}

			case 2:
				{
					p.SetState(1133)
					p.Variable_name()
				}

			}

		}
		{
			p.SetState(1138)
			p.Match(PowerBuilderParserSEMI)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1140)
			p.Match(PowerBuilderParserEXECUTE)
		}
		p.SetState(1142)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PowerBuilderParserDYNAMIC {
			{
				p.SetState(1141)
				p.Match(PowerBuilderParserDYNAMIC)
			}

		}
		{
			p.SetState(1144)
			p.Identifier()
		}
		p.SetState(1153)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PowerBuilderParserUSING {
			{
				p.SetState(1145)
				p.Match(PowerBuilderParserUSING)
			}
			p.SetState(1147)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == PowerBuilderParserDESCRIPTOR {
				{
					p.SetState(1146)
					p.Match(PowerBuilderParserDESCRIPTOR)
				}

			}
			p.SetState(1151)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 155, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(1149)
					p.Match(PowerBuilderParserSQLCA)
				}

			case 2:
				{
					p.SetState(1150)
					p.Identifier()
				}

			}

		}
		p.SetState(1156)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 157, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1155)
				p.Match(PowerBuilderParserSEMI)
			}

		}

	}

	return localctx
}

// IClose_sql_statementContext is an interface to support dynamic dispatch.
type IClose_sql_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClose_sql_statementContext differentiates from other interfaces.
	IsClose_sql_statementContext()
}

type Close_sql_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClose_sql_statementContext() *Close_sql_statementContext {
	var p = new(Close_sql_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_close_sql_statement
	return p
}

func (*Close_sql_statementContext) IsClose_sql_statementContext() {}

func NewClose_sql_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Close_sql_statementContext {
	var p = new(Close_sql_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_close_sql_statement

	return p
}

func (s *Close_sql_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Close_sql_statementContext) CLOSE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserCLOSE, 0)
}

func (s *Close_sql_statementContext) Variable_name() IVariable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariable_nameContext)
}

func (s *Close_sql_statementContext) SEMI() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserSEMI, 0)
}

func (s *Close_sql_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Close_sql_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Close_sql_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterClose_sql_statement(s)
	}
}

func (s *Close_sql_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitClose_sql_statement(s)
	}
}

func (p *PowerBuilderParser) Close_sql_statement() (localctx IClose_sql_statementContext) {
	this := p
	_ = this

	localctx = NewClose_sql_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, PowerBuilderParserRULE_close_sql_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1160)
		p.Match(PowerBuilderParserCLOSE)
	}
	{
		p.SetState(1161)
		p.Variable_name()
	}
	{
		p.SetState(1162)
		p.Match(PowerBuilderParserSEMI)
	}

	return localctx
}

// IDeclare_procedure_statementContext is an interface to support dynamic dispatch.
type IDeclare_procedure_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclare_procedure_statementContext differentiates from other interfaces.
	IsDeclare_procedure_statementContext()
}

type Declare_procedure_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclare_procedure_statementContext() *Declare_procedure_statementContext {
	var p = new(Declare_procedure_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_declare_procedure_statement
	return p
}

func (*Declare_procedure_statementContext) IsDeclare_procedure_statementContext() {}

func NewDeclare_procedure_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Declare_procedure_statementContext {
	var p = new(Declare_procedure_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_declare_procedure_statement

	return p
}

func (s *Declare_procedure_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Declare_procedure_statementContext) DECLARE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserDECLARE, 0)
}

func (s *Declare_procedure_statementContext) AllVariable_name() []IVariable_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVariable_nameContext)(nil)).Elem())
	var tst = make([]IVariable_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVariable_nameContext)
		}
	}

	return tst
}

func (s *Declare_procedure_statementContext) Variable_name(i int) IVariable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVariable_nameContext)
}

func (s *Declare_procedure_statementContext) PROCEDURE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserPROCEDURE, 0)
}

func (s *Declare_procedure_statementContext) FOR() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserFOR, 0)
}

func (s *Declare_procedure_statementContext) DYNAMIC() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserDYNAMIC, 0)
}

func (s *Declare_procedure_statementContext) SEMI() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserSEMI, 0)
}

func (s *Declare_procedure_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Declare_procedure_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Declare_procedure_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterDeclare_procedure_statement(s)
	}
}

func (s *Declare_procedure_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitDeclare_procedure_statement(s)
	}
}

func (p *PowerBuilderParser) Declare_procedure_statement() (localctx IDeclare_procedure_statementContext) {
	this := p
	_ = this

	localctx = NewDeclare_procedure_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, PowerBuilderParserRULE_declare_procedure_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1164)
		p.Match(PowerBuilderParserDECLARE)
	}
	{
		p.SetState(1165)
		p.Variable_name()
	}
	p.SetState(1167)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PowerBuilderParserDYNAMIC {
		{
			p.SetState(1166)
			p.Match(PowerBuilderParserDYNAMIC)
		}

	}
	{
		p.SetState(1169)
		p.Match(PowerBuilderParserPROCEDURE)
	}
	{
		p.SetState(1170)
		p.Match(PowerBuilderParserFOR)
	}
	{
		p.SetState(1171)
		p.Variable_name()
	}
	p.SetState(1173)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 160, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1172)
			p.Match(PowerBuilderParserSEMI)
		}

	}

	return localctx
}

// IDeclare_cursor_statementContext is an interface to support dynamic dispatch.
type IDeclare_cursor_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclare_cursor_statementContext differentiates from other interfaces.
	IsDeclare_cursor_statementContext()
}

type Declare_cursor_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclare_cursor_statementContext() *Declare_cursor_statementContext {
	var p = new(Declare_cursor_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_declare_cursor_statement
	return p
}

func (*Declare_cursor_statementContext) IsDeclare_cursor_statementContext() {}

func NewDeclare_cursor_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Declare_cursor_statementContext {
	var p = new(Declare_cursor_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_declare_cursor_statement

	return p
}

func (s *Declare_cursor_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Declare_cursor_statementContext) DECLARE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserDECLARE, 0)
}

func (s *Declare_cursor_statementContext) AllVariable_name() []IVariable_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVariable_nameContext)(nil)).Elem())
	var tst = make([]IVariable_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVariable_nameContext)
		}
	}

	return tst
}

func (s *Declare_cursor_statementContext) Variable_name(i int) IVariable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVariable_nameContext)
}

func (s *Declare_cursor_statementContext) CURSOR() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserCURSOR, 0)
}

func (s *Declare_cursor_statementContext) FOR() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserFOR, 0)
}

func (s *Declare_cursor_statementContext) SEMI() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserSEMI, 0)
}

func (s *Declare_cursor_statementContext) DYNAMIC() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserDYNAMIC, 0)
}

func (s *Declare_cursor_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Declare_cursor_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Declare_cursor_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterDeclare_cursor_statement(s)
	}
}

func (s *Declare_cursor_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitDeclare_cursor_statement(s)
	}
}

func (p *PowerBuilderParser) Declare_cursor_statement() (localctx IDeclare_cursor_statementContext) {
	this := p
	_ = this

	localctx = NewDeclare_cursor_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, PowerBuilderParserRULE_declare_cursor_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1175)
		p.Match(PowerBuilderParserDECLARE)
	}
	{
		p.SetState(1176)
		p.Variable_name()
	}
	p.SetState(1178)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PowerBuilderParserDYNAMIC {
		{
			p.SetState(1177)
			p.Match(PowerBuilderParserDYNAMIC)
		}

	}
	{
		p.SetState(1180)
		p.Match(PowerBuilderParserCURSOR)
	}
	{
		p.SetState(1181)
		p.Match(PowerBuilderParserFOR)
	}
	{
		p.SetState(1182)
		p.Variable_name()
	}
	{
		p.SetState(1183)
		p.Match(PowerBuilderParserSEMI)
	}

	return localctx
}

// IOpen_cursor_statementContext is an interface to support dynamic dispatch.
type IOpen_cursor_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOpen_cursor_statementContext differentiates from other interfaces.
	IsOpen_cursor_statementContext()
}

type Open_cursor_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpen_cursor_statementContext() *Open_cursor_statementContext {
	var p = new(Open_cursor_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_open_cursor_statement
	return p
}

func (*Open_cursor_statementContext) IsOpen_cursor_statementContext() {}

func NewOpen_cursor_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Open_cursor_statementContext {
	var p = new(Open_cursor_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_open_cursor_statement

	return p
}

func (s *Open_cursor_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Open_cursor_statementContext) OPEN() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserOPEN, 0)
}

func (s *Open_cursor_statementContext) Variable_name() IVariable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariable_nameContext)
}

func (s *Open_cursor_statementContext) DYNAMIC() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserDYNAMIC, 0)
}

func (s *Open_cursor_statementContext) USING() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserUSING, 0)
}

func (s *Open_cursor_statementContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Open_cursor_statementContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Open_cursor_statementContext) SEMI() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserSEMI, 0)
}

func (s *Open_cursor_statementContext) DESCRIPTOR() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserDESCRIPTOR, 0)
}

func (s *Open_cursor_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Open_cursor_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Open_cursor_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterOpen_cursor_statement(s)
	}
}

func (s *Open_cursor_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitOpen_cursor_statement(s)
	}
}

func (p *PowerBuilderParser) Open_cursor_statement() (localctx IOpen_cursor_statementContext) {
	this := p
	_ = this

	localctx = NewOpen_cursor_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 122, PowerBuilderParserRULE_open_cursor_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1185)
		p.Match(PowerBuilderParserOPEN)
	}
	p.SetState(1187)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PowerBuilderParserDYNAMIC {
		{
			p.SetState(1186)
			p.Match(PowerBuilderParserDYNAMIC)
		}

	}
	{
		p.SetState(1189)
		p.Variable_name()
	}
	p.SetState(1195)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PowerBuilderParserUSING {
		{
			p.SetState(1190)
			p.Match(PowerBuilderParserUSING)
		}
		p.SetState(1193)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case PowerBuilderParserDESCRIPTOR:
			{
				p.SetState(1191)
				p.Match(PowerBuilderParserDESCRIPTOR)
			}

		case PowerBuilderParserDATE_TYPE, PowerBuilderParserTIME_TYPE, PowerBuilderParserWINDOW, PowerBuilderParserREADONLY, PowerBuilderParserTYPE, PowerBuilderParserUPDATE, PowerBuilderParserOPEN, PowerBuilderParserGOTO, PowerBuilderParserCLOSE, PowerBuilderParserCREATE, PowerBuilderParserSELECT, PowerBuilderParserDELETE, PowerBuilderParserINSERT, PowerBuilderParserSYSTEM, PowerBuilderParserSQLCA, PowerBuilderParserVALUES, PowerBuilderParserUNDERSCORE, PowerBuilderParserID:
			{
				p.SetState(1192)
				p.Identifier()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	}
	p.SetState(1198)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 165, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1197)
			p.Identifier()
		}

	}
	p.SetState(1201)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 166, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1200)
			p.Match(PowerBuilderParserSEMI)
		}

	}

	return localctx
}

// IClose_cursor_statementContext is an interface to support dynamic dispatch.
type IClose_cursor_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClose_cursor_statementContext differentiates from other interfaces.
	IsClose_cursor_statementContext()
}

type Close_cursor_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClose_cursor_statementContext() *Close_cursor_statementContext {
	var p = new(Close_cursor_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_close_cursor_statement
	return p
}

func (*Close_cursor_statementContext) IsClose_cursor_statementContext() {}

func NewClose_cursor_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Close_cursor_statementContext {
	var p = new(Close_cursor_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_close_cursor_statement

	return p
}

func (s *Close_cursor_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Close_cursor_statementContext) CLOSE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserCLOSE, 0)
}

func (s *Close_cursor_statementContext) Variable_name() IVariable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariable_nameContext)
}

func (s *Close_cursor_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Close_cursor_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Close_cursor_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterClose_cursor_statement(s)
	}
}

func (s *Close_cursor_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitClose_cursor_statement(s)
	}
}

func (p *PowerBuilderParser) Close_cursor_statement() (localctx IClose_cursor_statementContext) {
	this := p
	_ = this

	localctx = NewClose_cursor_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 124, PowerBuilderParserRULE_close_cursor_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1203)
		p.Match(PowerBuilderParserCLOSE)
	}
	{
		p.SetState(1204)
		p.Variable_name()
	}

	return localctx
}

// IFetch_into_statementContext is an interface to support dynamic dispatch.
type IFetch_into_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFetch_into_statementContext differentiates from other interfaces.
	IsFetch_into_statementContext()
}

type Fetch_into_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFetch_into_statementContext() *Fetch_into_statementContext {
	var p = new(Fetch_into_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_fetch_into_statement
	return p
}

func (*Fetch_into_statementContext) IsFetch_into_statementContext() {}

func NewFetch_into_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Fetch_into_statementContext {
	var p = new(Fetch_into_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_fetch_into_statement

	return p
}

func (s *Fetch_into_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Fetch_into_statementContext) FETCH() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserFETCH, 0)
}

func (s *Fetch_into_statementContext) Variable_name() IVariable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariable_nameContext)
}

func (s *Fetch_into_statementContext) INTO() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserINTO, 0)
}

func (s *Fetch_into_statementContext) Bind_param() IBind_paramContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBind_paramContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBind_paramContext)
}

func (s *Fetch_into_statementContext) SEMI() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserSEMI, 0)
}

func (s *Fetch_into_statementContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Fetch_into_statementContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Fetch_into_statementContext) USING() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserUSING, 0)
}

func (s *Fetch_into_statementContext) DESCRIPTOR() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserDESCRIPTOR, 0)
}

func (s *Fetch_into_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Fetch_into_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Fetch_into_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterFetch_into_statement(s)
	}
}

func (s *Fetch_into_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitFetch_into_statement(s)
	}
}

func (p *PowerBuilderParser) Fetch_into_statement() (localctx IFetch_into_statementContext) {
	this := p
	_ = this

	localctx = NewFetch_into_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 126, PowerBuilderParserRULE_fetch_into_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1223)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 170, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1206)
			p.Match(PowerBuilderParserFETCH)
		}
		{
			p.SetState(1207)
			p.Variable_name()
		}
		{
			p.SetState(1208)
			p.Match(PowerBuilderParserINTO)
		}
		{
			p.SetState(1209)
			p.Bind_param()
		}
		p.SetState(1211)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 167, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1210)
				p.Match(PowerBuilderParserSEMI)
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1213)
			p.Match(PowerBuilderParserFETCH)
		}
		{
			p.SetState(1214)
			p.Identifier()
		}
		{
			p.SetState(1215)
			p.Match(PowerBuilderParserUSING)
		}
		p.SetState(1217)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PowerBuilderParserDESCRIPTOR {
			{
				p.SetState(1216)
				p.Match(PowerBuilderParserDESCRIPTOR)
			}

		}
		{
			p.SetState(1219)
			p.Identifier()
		}
		p.SetState(1221)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 169, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1220)
				p.Match(PowerBuilderParserSEMI)
			}

		}

	}

	return localctx
}

// IPrepare_sql_stateentContext is an interface to support dynamic dispatch.
type IPrepare_sql_stateentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrepare_sql_stateentContext differentiates from other interfaces.
	IsPrepare_sql_stateentContext()
}

type Prepare_sql_stateentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrepare_sql_stateentContext() *Prepare_sql_stateentContext {
	var p = new(Prepare_sql_stateentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_prepare_sql_stateent
	return p
}

func (*Prepare_sql_stateentContext) IsPrepare_sql_stateentContext() {}

func NewPrepare_sql_stateentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Prepare_sql_stateentContext {
	var p = new(Prepare_sql_stateentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_prepare_sql_stateent

	return p
}

func (s *Prepare_sql_stateentContext) GetParser() antlr.Parser { return s.parser }

func (s *Prepare_sql_stateentContext) PREPARE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserPREPARE, 0)
}

func (s *Prepare_sql_stateentContext) Variable_name() IVariable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariable_nameContext)
}

func (s *Prepare_sql_stateentContext) FROM() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserFROM, 0)
}

func (s *Prepare_sql_stateentContext) Bind_param() IBind_paramContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBind_paramContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBind_paramContext)
}

func (s *Prepare_sql_stateentContext) USING() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserUSING, 0)
}

func (s *Prepare_sql_stateentContext) SEMI() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserSEMI, 0)
}

func (s *Prepare_sql_stateentContext) SQLCA() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserSQLCA, 0)
}

func (s *Prepare_sql_stateentContext) Identifier_name() IIdentifier_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_nameContext)
}

func (s *Prepare_sql_stateentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Prepare_sql_stateentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Prepare_sql_stateentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterPrepare_sql_stateent(s)
	}
}

func (s *Prepare_sql_stateentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitPrepare_sql_stateent(s)
	}
}

func (p *PowerBuilderParser) Prepare_sql_stateent() (localctx IPrepare_sql_stateentContext) {
	this := p
	_ = this

	localctx = NewPrepare_sql_stateentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 128, PowerBuilderParserRULE_prepare_sql_stateent)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1225)
		p.Match(PowerBuilderParserPREPARE)
	}
	{
		p.SetState(1226)
		p.Variable_name()
	}
	{
		p.SetState(1227)
		p.Match(PowerBuilderParserFROM)
	}
	{
		p.SetState(1228)
		p.Bind_param()
	}
	{
		p.SetState(1229)
		p.Match(PowerBuilderParserUSING)
	}
	p.SetState(1232)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PowerBuilderParserSQLCA:
		{
			p.SetState(1230)
			p.Match(PowerBuilderParserSQLCA)
		}

	case PowerBuilderParserUNDERSCORE, PowerBuilderParserID:
		{
			p.SetState(1231)
			p.Identifier_name()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(1234)
		p.Match(PowerBuilderParserSEMI)
	}

	return localctx
}

// IIncrement_decrement_statementContext is an interface to support dynamic dispatch.
type IIncrement_decrement_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIncrement_decrement_statementContext differentiates from other interfaces.
	IsIncrement_decrement_statementContext()
}

type Increment_decrement_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIncrement_decrement_statementContext() *Increment_decrement_statementContext {
	var p = new(Increment_decrement_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_increment_decrement_statement
	return p
}

func (*Increment_decrement_statementContext) IsIncrement_decrement_statementContext() {}

func NewIncrement_decrement_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Increment_decrement_statementContext {
	var p = new(Increment_decrement_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_increment_decrement_statement

	return p
}

func (s *Increment_decrement_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Increment_decrement_statementContext) Variable_name() IVariable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariable_nameContext)
}

func (s *Increment_decrement_statementContext) AllPLUS() []antlr.TerminalNode {
	return s.GetTokens(PowerBuilderParserPLUS)
}

func (s *Increment_decrement_statementContext) PLUS(i int) antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserPLUS, i)
}

func (s *Increment_decrement_statementContext) AllMINUS() []antlr.TerminalNode {
	return s.GetTokens(PowerBuilderParserMINUS)
}

func (s *Increment_decrement_statementContext) MINUS(i int) antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserMINUS, i)
}

func (s *Increment_decrement_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Increment_decrement_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Increment_decrement_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterIncrement_decrement_statement(s)
	}
}

func (s *Increment_decrement_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitIncrement_decrement_statement(s)
	}
}

func (p *PowerBuilderParser) Increment_decrement_statement() (localctx IIncrement_decrement_statementContext) {
	this := p
	_ = this

	localctx = NewIncrement_decrement_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 130, PowerBuilderParserRULE_increment_decrement_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1236)
		p.Variable_name()
	}
	p.SetState(1241)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PowerBuilderParserPLUS:
		{
			p.SetState(1237)
			p.Match(PowerBuilderParserPLUS)
		}
		{
			p.SetState(1238)
			p.Match(PowerBuilderParserPLUS)
		}

	case PowerBuilderParserMINUS:
		{
			p.SetState(1239)
			p.Match(PowerBuilderParserMINUS)
		}
		{
			p.SetState(1240)
			p.Match(PowerBuilderParserMINUS)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAssignment_rhsContext is an interface to support dynamic dispatch.
type IAssignment_rhsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssignment_rhsContext differentiates from other interfaces.
	IsAssignment_rhsContext()
}

type Assignment_rhsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssignment_rhsContext() *Assignment_rhsContext {
	var p = new(Assignment_rhsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_assignment_rhs
	return p
}

func (*Assignment_rhsContext) IsAssignment_rhsContext() {}

func NewAssignment_rhsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Assignment_rhsContext {
	var p = new(Assignment_rhsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_assignment_rhs

	return p
}

func (s *Assignment_rhsContext) GetParser() antlr.Parser { return s.parser }

func (s *Assignment_rhsContext) Value() IValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IValueContext)
}

func (s *Assignment_rhsContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *Assignment_rhsContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Assignment_rhsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PowerBuilderParserCOMMA)
}

func (s *Assignment_rhsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserCOMMA, i)
}

func (s *Assignment_rhsContext) Function_call_statement() IFunction_call_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_call_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_call_statementContext)
}

func (s *Assignment_rhsContext) Describe_function_call() IDescribe_function_callContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDescribe_function_callContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDescribe_function_callContext)
}

func (s *Assignment_rhsContext) Create_call_statement() ICreate_call_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_call_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_call_statementContext)
}

func (s *Assignment_rhsContext) Super_call_statement() ISuper_call_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISuper_call_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISuper_call_statementContext)
}

func (s *Assignment_rhsContext) Event_call_statement() IEvent_call_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEvent_call_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEvent_call_statementContext)
}

func (s *Assignment_rhsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Assignment_rhsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Assignment_rhsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterAssignment_rhs(s)
	}
}

func (s *Assignment_rhsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitAssignment_rhs(s)
	}
}

func (p *PowerBuilderParser) Assignment_rhs() (localctx IAssignment_rhsContext) {
	this := p
	_ = this

	localctx = NewAssignment_rhsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 132, PowerBuilderParserRULE_assignment_rhs)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(1257)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 174, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1243)
			p.Value()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1244)
			p.expression(0)
		}
		p.SetState(1249)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 173, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1245)
					p.Match(PowerBuilderParserCOMMA)
				}
				{
					p.SetState(1246)
					p.expression(0)
				}

			}
			p.SetState(1251)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 173, p.GetParserRuleContext())
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1252)
			p.Function_call_statement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1253)
			p.Describe_function_call()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1254)
			p.Create_call_statement()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1255)
			p.Super_call_statement()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1256)
			p.Event_call_statement()
		}

	}

	return localctx
}

// IDescribe_function_callContext is an interface to support dynamic dispatch.
type IDescribe_function_callContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDescribe_function_callContext differentiates from other interfaces.
	IsDescribe_function_callContext()
}

type Describe_function_callContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDescribe_function_callContext() *Describe_function_callContext {
	var p = new(Describe_function_callContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_describe_function_call
	return p
}

func (*Describe_function_callContext) IsDescribe_function_callContext() {}

func NewDescribe_function_callContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Describe_function_callContext {
	var p = new(Describe_function_callContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_describe_function_call

	return p
}

func (s *Describe_function_callContext) GetParser() antlr.Parser { return s.parser }

func (s *Describe_function_callContext) DESCRIBE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserDESCRIBE, 0)
}

func (s *Describe_function_callContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserLPAREN, 0)
}

func (s *Describe_function_callContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserRPAREN, 0)
}

func (s *Describe_function_callContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Describe_function_callContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Describe_function_callContext) DOT() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserDOT, 0)
}

func (s *Describe_function_callContext) Expression_list() IExpression_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_listContext)
}

func (s *Describe_function_callContext) INTO() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserINTO, 0)
}

func (s *Describe_function_callContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Describe_function_callContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Describe_function_callContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterDescribe_function_call(s)
	}
}

func (s *Describe_function_callContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitDescribe_function_call(s)
	}
}

func (p *PowerBuilderParser) Describe_function_call() (localctx IDescribe_function_callContext) {
	this := p
	_ = this

	localctx = NewDescribe_function_callContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 134, PowerBuilderParserRULE_describe_function_call)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1275)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 177, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(1262)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-7)&-(0x1f+1)) == 0 && ((1<<uint((_la-7)))&((1<<(PowerBuilderParserDATE_TYPE-7))|(1<<(PowerBuilderParserTIME_TYPE-7))|(1<<(PowerBuilderParserWINDOW-7))|(1<<(PowerBuilderParserREADONLY-7))|(1<<(PowerBuilderParserTYPE-7)))) != 0) || (((_la-44)&-(0x1f+1)) == 0 && ((1<<uint((_la-44)))&((1<<(PowerBuilderParserUPDATE-44))|(1<<(PowerBuilderParserOPEN-44))|(1<<(PowerBuilderParserGOTO-44))|(1<<(PowerBuilderParserCLOSE-44)))) != 0) || (((_la-78)&-(0x1f+1)) == 0 && ((1<<uint((_la-78)))&((1<<(PowerBuilderParserCREATE-78))|(1<<(PowerBuilderParserSELECT-78))|(1<<(PowerBuilderParserDELETE-78))|(1<<(PowerBuilderParserINSERT-78))|(1<<(PowerBuilderParserSYSTEM-78))|(1<<(PowerBuilderParserSQLCA-78))|(1<<(PowerBuilderParserVALUES-78)))) != 0) || _la == PowerBuilderParserUNDERSCORE || _la == PowerBuilderParserID {
			{
				p.SetState(1259)
				p.Identifier()
			}
			{
				p.SetState(1260)
				p.Match(PowerBuilderParserDOT)
			}

		}
		{
			p.SetState(1264)
			p.Match(PowerBuilderParserDESCRIBE)
		}
		{
			p.SetState(1265)
			p.Match(PowerBuilderParserLPAREN)
		}
		p.SetState(1267)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<PowerBuilderParserANY)|(1<<PowerBuilderParserBLOB)|(1<<PowerBuilderParserBOOLEAN)|(1<<PowerBuilderParserBYTE)|(1<<PowerBuilderParserCHARACTER)|(1<<PowerBuilderParserCHAR)|(1<<PowerBuilderParserDATE_TYPE)|(1<<PowerBuilderParserDATETIME)|(1<<PowerBuilderParserDECIMAL)|(1<<PowerBuilderParserDEC)|(1<<PowerBuilderParserDOUBLE)|(1<<PowerBuilderParserINTEGER)|(1<<PowerBuilderParserINT)|(1<<PowerBuilderParserLONG)|(1<<PowerBuilderParserLONGLONG)|(1<<PowerBuilderParserREAL)|(1<<PowerBuilderParserSTRING)|(1<<PowerBuilderParserTIME_TYPE)|(1<<PowerBuilderParserUNSIGNEDINTEGER)|(1<<PowerBuilderParserUINT)|(1<<PowerBuilderParserUNSIGNEDLONG)|(1<<PowerBuilderParserULONG)|(1<<PowerBuilderParserWINDOW)|(1<<PowerBuilderParserTRUE)|(1<<PowerBuilderParserFALSE))) != 0) || (((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(PowerBuilderParserFUNCTION-34))|(1<<(PowerBuilderParserREADONLY-34))|(1<<(PowerBuilderParserTYPE-34))|(1<<(PowerBuilderParserREF-34))|(1<<(PowerBuilderParserUPDATE-34))|(1<<(PowerBuilderParserDYNAMIC-34))|(1<<(PowerBuilderParserEVENT-34))|(1<<(PowerBuilderParserOPEN-34))|(1<<(PowerBuilderParserGOTO-34)))) != 0) || (((_la-69)&-(0x1f+1)) == 0 && ((1<<uint((_la-69)))&((1<<(PowerBuilderParserCLOSE-69))|(1<<(PowerBuilderParserCREATE-69))|(1<<(PowerBuilderParserPOST-69))|(1<<(PowerBuilderParserSELECT-69))|(1<<(PowerBuilderParserDELETE-69))|(1<<(PowerBuilderParserINSERT-69))|(1<<(PowerBuilderParserDESCRIBE-69))|(1<<(PowerBuilderParserNOT-69))|(1<<(PowerBuilderParserHALT-69))|(1<<(PowerBuilderParserSYSTEM-69)))) != 0) || (((_la-101)&-(0x1f+1)) == 0 && ((1<<uint((_la-101)))&((1<<(PowerBuilderParserSQLCA-101))|(1<<(PowerBuilderParserVALUES-101))|(1<<(PowerBuilderParserPLUS-101))|(1<<(PowerBuilderParserMINUS-101))|(1<<(PowerBuilderParserCOLONCOLON-101)))) != 0) || (((_la-136)&-(0x1f+1)) == 0 && ((1<<uint((_la-136)))&((1<<(PowerBuilderParserLCURLY-136))|(1<<(PowerBuilderParserDQUOTED_STRING-136))|(1<<(PowerBuilderParserQUOTED_STRING-136))|(1<<(PowerBuilderParserLPAREN-136))|(1<<(PowerBuilderParserCOLON-136))|(1<<(PowerBuilderParserUNDERSCORE-136))|(1<<(PowerBuilderParserNUMBER-136))|(1<<(PowerBuilderParserDATE-136))|(1<<(PowerBuilderParserTIME-136))|(1<<(PowerBuilderParserENUM-136))|(1<<(PowerBuilderParserID-136)))) != 0) {
			{
				p.SetState(1266)
				p.Expression_list()
			}

		}
		{
			p.SetState(1269)
			p.Match(PowerBuilderParserRPAREN)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1270)
			p.Match(PowerBuilderParserDESCRIBE)
		}
		{
			p.SetState(1271)
			p.Identifier()
		}
		{
			p.SetState(1272)
			p.Match(PowerBuilderParserINTO)
		}
		{
			p.SetState(1273)
			p.Identifier()
		}

	}

	return localctx
}

// IAssignment_statementContext is an interface to support dynamic dispatch.
type IAssignment_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssignment_statementContext differentiates from other interfaces.
	IsAssignment_statementContext()
}

type Assignment_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssignment_statementContext() *Assignment_statementContext {
	var p = new(Assignment_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_assignment_statement
	return p
}

func (*Assignment_statementContext) IsAssignment_statementContext() {}

func NewAssignment_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Assignment_statementContext {
	var p = new(Assignment_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_assignment_statement

	return p
}

func (s *Assignment_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Assignment_statementContext) AT() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserAT, 0)
}

func (s *Assignment_statementContext) Variable_name() IVariable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariable_nameContext)
}

func (s *Assignment_statementContext) EQ() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserEQ, 0)
}

func (s *Assignment_statementContext) Bind_param() IBind_paramContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBind_paramContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBind_paramContext)
}

func (s *Assignment_statementContext) SEMI() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserSEMI, 0)
}

func (s *Assignment_statementContext) Assignment_rhs() IAssignment_rhsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignment_rhsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignment_rhsContext)
}

func (s *Assignment_statementContext) PLUSEQ() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserPLUSEQ, 0)
}

func (s *Assignment_statementContext) MINUSEQ() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserMINUSEQ, 0)
}

func (s *Assignment_statementContext) MULTEQ() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserMULTEQ, 0)
}

func (s *Assignment_statementContext) DIVEQ() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserDIVEQ, 0)
}

func (s *Assignment_statementContext) Function_call_statement() IFunction_call_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_call_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_call_statementContext)
}

func (s *Assignment_statementContext) DOT() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserDOT, 0)
}

func (s *Assignment_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Assignment_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Assignment_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterAssignment_statement(s)
	}
}

func (s *Assignment_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitAssignment_statement(s)
	}
}

func (p *PowerBuilderParser) Assignment_statement() (localctx IAssignment_statementContext) {
	this := p
	_ = this

	localctx = NewAssignment_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 136, PowerBuilderParserRULE_assignment_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1294)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PowerBuilderParserAT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1277)
			p.Match(PowerBuilderParserAT)
		}
		{
			p.SetState(1278)
			p.Variable_name()
		}
		{
			p.SetState(1279)
			p.Match(PowerBuilderParserEQ)
		}
		{
			p.SetState(1280)
			p.Bind_param()
		}
		{
			p.SetState(1281)
			p.Match(PowerBuilderParserSEMI)
		}

	case PowerBuilderParserANY, PowerBuilderParserBLOB, PowerBuilderParserBOOLEAN, PowerBuilderParserBYTE, PowerBuilderParserCHARACTER, PowerBuilderParserCHAR, PowerBuilderParserDATE_TYPE, PowerBuilderParserDATETIME, PowerBuilderParserDECIMAL, PowerBuilderParserDEC, PowerBuilderParserDOUBLE, PowerBuilderParserINTEGER, PowerBuilderParserINT, PowerBuilderParserLONG, PowerBuilderParserLONGLONG, PowerBuilderParserREAL, PowerBuilderParserSTRING, PowerBuilderParserTIME_TYPE, PowerBuilderParserUNSIGNEDINTEGER, PowerBuilderParserUINT, PowerBuilderParserUNSIGNEDLONG, PowerBuilderParserULONG, PowerBuilderParserWINDOW, PowerBuilderParserFUNCTION, PowerBuilderParserREADONLY, PowerBuilderParserTYPE, PowerBuilderParserUPDATE, PowerBuilderParserDYNAMIC, PowerBuilderParserEVENT, PowerBuilderParserOPEN, PowerBuilderParserGOTO, PowerBuilderParserCLOSE, PowerBuilderParserCREATE, PowerBuilderParserPOST, PowerBuilderParserSELECT, PowerBuilderParserDELETE, PowerBuilderParserINSERT, PowerBuilderParserDESCRIBE, PowerBuilderParserHALT, PowerBuilderParserSYSTEM, PowerBuilderParserSQLCA, PowerBuilderParserVALUES, PowerBuilderParserCOLONCOLON, PowerBuilderParserUNDERSCORE, PowerBuilderParserID:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(1286)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 178, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1283)
				p.Function_call_statement()
			}
			{
				p.SetState(1284)
				p.Match(PowerBuilderParserDOT)
			}

		}
		{
			p.SetState(1288)
			p.Variable_name()
		}
		{
			p.SetState(1289)
			_la = p.GetTokenStream().LA(1)

			if !(((_la-120)&-(0x1f+1)) == 0 && ((1<<uint((_la-120)))&((1<<(PowerBuilderParserEQ-120))|(1<<(PowerBuilderParserPLUSEQ-120))|(1<<(PowerBuilderParserMINUSEQ-120))|(1<<(PowerBuilderParserMULTEQ-120))|(1<<(PowerBuilderParserDIVEQ-120)))) != 0) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(1290)
			p.Assignment_rhs()
		}
		p.SetState(1292)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 179, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1291)
				p.Match(PowerBuilderParserSEMI)
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IVariable_nameContext is an interface to support dynamic dispatch.
type IVariable_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVariable_nameContext differentiates from other interfaces.
	IsVariable_nameContext()
}

type Variable_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariable_nameContext() *Variable_nameContext {
	var p = new(Variable_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_variable_name
	return p
}

func (*Variable_nameContext) IsVariable_nameContext() {}

func NewVariable_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Variable_nameContext {
	var p = new(Variable_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_variable_name

	return p
}

func (s *Variable_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Variable_nameContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Variable_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Variable_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Variable_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterVariable_name(s)
	}
}

func (s *Variable_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitVariable_name(s)
	}
}

func (p *PowerBuilderParser) Variable_name() (localctx IVariable_nameContext) {
	this := p
	_ = this

	localctx = NewVariable_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 138, PowerBuilderParserRULE_variable_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1296)
		p.Identifier()
	}

	return localctx
}

// IReturn_statementContext is an interface to support dynamic dispatch.
type IReturn_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReturn_statementContext differentiates from other interfaces.
	IsReturn_statementContext()
}

type Return_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReturn_statementContext() *Return_statementContext {
	var p = new(Return_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_return_statement
	return p
}

func (*Return_statementContext) IsReturn_statementContext() {}

func NewReturn_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Return_statementContext {
	var p = new(Return_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_return_statement

	return p
}

func (s *Return_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Return_statementContext) RETURN() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserRETURN, 0)
}

func (s *Return_statementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Return_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Return_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Return_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterReturn_statement(s)
	}
}

func (s *Return_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitReturn_statement(s)
	}
}

func (p *PowerBuilderParser) Return_statement() (localctx IReturn_statementContext) {
	this := p
	_ = this

	localctx = NewReturn_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 140, PowerBuilderParserRULE_return_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1298)
		p.Match(PowerBuilderParserRETURN)
	}
	p.SetState(1300)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 181, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1299)
			p.expression(0)
		}

	}

	return localctx
}

// IFunction_call_expression_subContext is an interface to support dynamic dispatch.
type IFunction_call_expression_subContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunction_call_expression_subContext differentiates from other interfaces.
	IsFunction_call_expression_subContext()
}

type Function_call_expression_subContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunction_call_expression_subContext() *Function_call_expression_subContext {
	var p = new(Function_call_expression_subContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_function_call_expression_sub
	return p
}

func (*Function_call_expression_subContext) IsFunction_call_expression_subContext() {}

func NewFunction_call_expression_subContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_call_expression_subContext {
	var p = new(Function_call_expression_subContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_function_call_expression_sub

	return p
}

func (s *Function_call_expression_subContext) GetParser() antlr.Parser { return s.parser }

func (s *Function_call_expression_subContext) Function_name() IFunction_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_nameContext)
}

func (s *Function_call_expression_subContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserLPAREN, 0)
}

func (s *Function_call_expression_subContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserRPAREN, 0)
}

func (s *Function_call_expression_subContext) AllVariable_name() []IVariable_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVariable_nameContext)(nil)).Elem())
	var tst = make([]IVariable_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVariable_nameContext)
		}
	}

	return tst
}

func (s *Function_call_expression_subContext) Variable_name(i int) IVariable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVariable_nameContext)
}

func (s *Function_call_expression_subContext) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(PowerBuilderParserDOT)
}

func (s *Function_call_expression_subContext) DOT(i int) antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserDOT, i)
}

func (s *Function_call_expression_subContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserFUNCTION, 0)
}

func (s *Function_call_expression_subContext) POST() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserPOST, 0)
}

func (s *Function_call_expression_subContext) DYNAMIC() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserDYNAMIC, 0)
}

func (s *Function_call_expression_subContext) EVENT() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserEVENT, 0)
}

func (s *Function_call_expression_subContext) Expression_list() IExpression_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_listContext)
}

func (s *Function_call_expression_subContext) AllFunction_call_expression_sub() []IFunction_call_expression_subContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunction_call_expression_subContext)(nil)).Elem())
	var tst = make([]IFunction_call_expression_subContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunction_call_expression_subContext)
		}
	}

	return tst
}

func (s *Function_call_expression_subContext) Function_call_expression_sub(i int) IFunction_call_expression_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_call_expression_subContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunction_call_expression_subContext)
}

func (s *Function_call_expression_subContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_call_expression_subContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Function_call_expression_subContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterFunction_call_expression_sub(s)
	}
}

func (s *Function_call_expression_subContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitFunction_call_expression_sub(s)
	}
}

func (p *PowerBuilderParser) Function_call_expression_sub() (localctx IFunction_call_expression_subContext) {
	this := p
	_ = this

	localctx = NewFunction_call_expression_subContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 142, PowerBuilderParserRULE_function_call_expression_sub)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1307)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 182, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1302)
				p.Variable_name()
			}
			{
				p.SetState(1303)
				p.Match(PowerBuilderParserDOT)
			}

		}
		p.SetState(1309)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 182, p.GetParserRuleContext())
	}
	p.SetState(1311)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PowerBuilderParserFUNCTION {
		{
			p.SetState(1310)
			p.Match(PowerBuilderParserFUNCTION)
		}

	}
	p.SetState(1314)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 184, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1313)
			p.Match(PowerBuilderParserPOST)
		}

	}
	p.SetState(1317)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PowerBuilderParserDYNAMIC {
		{
			p.SetState(1316)
			p.Match(PowerBuilderParserDYNAMIC)
		}

	}
	p.SetState(1320)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PowerBuilderParserEVENT {
		{
			p.SetState(1319)
			p.Match(PowerBuilderParserEVENT)
		}

	}
	{
		p.SetState(1322)
		p.Function_name()
	}
	{
		p.SetState(1323)
		p.Match(PowerBuilderParserLPAREN)
	}
	p.SetState(1325)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<PowerBuilderParserANY)|(1<<PowerBuilderParserBLOB)|(1<<PowerBuilderParserBOOLEAN)|(1<<PowerBuilderParserBYTE)|(1<<PowerBuilderParserCHARACTER)|(1<<PowerBuilderParserCHAR)|(1<<PowerBuilderParserDATE_TYPE)|(1<<PowerBuilderParserDATETIME)|(1<<PowerBuilderParserDECIMAL)|(1<<PowerBuilderParserDEC)|(1<<PowerBuilderParserDOUBLE)|(1<<PowerBuilderParserINTEGER)|(1<<PowerBuilderParserINT)|(1<<PowerBuilderParserLONG)|(1<<PowerBuilderParserLONGLONG)|(1<<PowerBuilderParserREAL)|(1<<PowerBuilderParserSTRING)|(1<<PowerBuilderParserTIME_TYPE)|(1<<PowerBuilderParserUNSIGNEDINTEGER)|(1<<PowerBuilderParserUINT)|(1<<PowerBuilderParserUNSIGNEDLONG)|(1<<PowerBuilderParserULONG)|(1<<PowerBuilderParserWINDOW)|(1<<PowerBuilderParserTRUE)|(1<<PowerBuilderParserFALSE))) != 0) || (((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(PowerBuilderParserFUNCTION-34))|(1<<(PowerBuilderParserREADONLY-34))|(1<<(PowerBuilderParserTYPE-34))|(1<<(PowerBuilderParserREF-34))|(1<<(PowerBuilderParserUPDATE-34))|(1<<(PowerBuilderParserDYNAMIC-34))|(1<<(PowerBuilderParserEVENT-34))|(1<<(PowerBuilderParserOPEN-34))|(1<<(PowerBuilderParserGOTO-34)))) != 0) || (((_la-69)&-(0x1f+1)) == 0 && ((1<<uint((_la-69)))&((1<<(PowerBuilderParserCLOSE-69))|(1<<(PowerBuilderParserCREATE-69))|(1<<(PowerBuilderParserPOST-69))|(1<<(PowerBuilderParserSELECT-69))|(1<<(PowerBuilderParserDELETE-69))|(1<<(PowerBuilderParserINSERT-69))|(1<<(PowerBuilderParserDESCRIBE-69))|(1<<(PowerBuilderParserNOT-69))|(1<<(PowerBuilderParserHALT-69))|(1<<(PowerBuilderParserSYSTEM-69)))) != 0) || (((_la-101)&-(0x1f+1)) == 0 && ((1<<uint((_la-101)))&((1<<(PowerBuilderParserSQLCA-101))|(1<<(PowerBuilderParserVALUES-101))|(1<<(PowerBuilderParserPLUS-101))|(1<<(PowerBuilderParserMINUS-101))|(1<<(PowerBuilderParserCOLONCOLON-101)))) != 0) || (((_la-136)&-(0x1f+1)) == 0 && ((1<<uint((_la-136)))&((1<<(PowerBuilderParserLCURLY-136))|(1<<(PowerBuilderParserDQUOTED_STRING-136))|(1<<(PowerBuilderParserQUOTED_STRING-136))|(1<<(PowerBuilderParserLPAREN-136))|(1<<(PowerBuilderParserCOLON-136))|(1<<(PowerBuilderParserUNDERSCORE-136))|(1<<(PowerBuilderParserNUMBER-136))|(1<<(PowerBuilderParserDATE-136))|(1<<(PowerBuilderParserTIME-136))|(1<<(PowerBuilderParserENUM-136))|(1<<(PowerBuilderParserID-136)))) != 0) {
		{
			p.SetState(1324)
			p.Expression_list()
		}

	}
	{
		p.SetState(1327)
		p.Match(PowerBuilderParserRPAREN)
	}
	p.SetState(1335)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 189, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1328)
				p.Match(PowerBuilderParserDOT)
			}
			p.SetState(1331)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 188, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(1329)
					p.Variable_name()
				}

			case 2:
				{
					p.SetState(1330)
					p.Function_call_expression_sub()
				}

			}

		}
		p.SetState(1337)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 189, p.GetParserRuleContext())
	}

	return localctx
}

// IFunction_nameContext is an interface to support dynamic dispatch.
type IFunction_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunction_nameContext differentiates from other interfaces.
	IsFunction_nameContext()
}

type Function_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunction_nameContext() *Function_nameContext {
	var p = new(Function_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_function_name
	return p
}

func (*Function_nameContext) IsFunction_nameContext() {}

func NewFunction_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_nameContext {
	var p = new(Function_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_function_name

	return p
}

func (s *Function_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Function_nameContext) POST() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserPOST, 0)
}

func (s *Function_nameContext) OPEN() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserOPEN, 0)
}

func (s *Function_nameContext) CLOSE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserCLOSE, 0)
}

func (s *Function_nameContext) Variable_name() IVariable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariable_nameContext)
}

func (s *Function_nameContext) DataTypeSub() IDataTypeSubContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDataTypeSubContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDataTypeSubContext)
}

func (s *Function_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Function_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterFunction_name(s)
	}
}

func (s *Function_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitFunction_name(s)
	}
}

func (p *PowerBuilderParser) Function_name() (localctx IFunction_nameContext) {
	this := p
	_ = this

	localctx = NewFunction_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 144, PowerBuilderParserRULE_function_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1343)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 190, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1338)
			p.Match(PowerBuilderParserPOST)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1339)
			p.Match(PowerBuilderParserOPEN)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1340)
			p.Match(PowerBuilderParserCLOSE)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1341)
			p.Variable_name()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1342)
			p.DataTypeSub()
		}

	}

	return localctx
}

// IFunction_event_callContext is an interface to support dynamic dispatch.
type IFunction_event_callContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunction_event_callContext differentiates from other interfaces.
	IsFunction_event_callContext()
}

type Function_event_callContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunction_event_callContext() *Function_event_callContext {
	var p = new(Function_event_callContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_function_event_call
	return p
}

func (*Function_event_callContext) IsFunction_event_callContext() {}

func NewFunction_event_callContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_event_callContext {
	var p = new(Function_event_callContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_function_event_call

	return p
}

func (s *Function_event_callContext) GetParser() antlr.Parser { return s.parser }

func (s *Function_event_callContext) Function_name() IFunction_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_nameContext)
}

func (s *Function_event_callContext) DOT() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserDOT, 0)
}

func (s *Function_event_callContext) Function_call_expression_sub() IFunction_call_expression_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_call_expression_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_call_expression_subContext)
}

func (s *Function_event_callContext) EVENT() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserEVENT, 0)
}

func (s *Function_event_callContext) POST() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserPOST, 0)
}

func (s *Function_event_callContext) DYNAMIC() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserDYNAMIC, 0)
}

func (s *Function_event_callContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_event_callContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Function_event_callContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterFunction_event_call(s)
	}
}

func (s *Function_event_callContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitFunction_event_call(s)
	}
}

func (p *PowerBuilderParser) Function_event_call() (localctx IFunction_event_callContext) {
	this := p
	_ = this

	localctx = NewFunction_event_callContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 146, PowerBuilderParserRULE_function_event_call)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1345)
		p.Function_name()
	}
	{
		p.SetState(1346)
		p.Match(PowerBuilderParserDOT)
	}
	p.SetState(1348)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 191, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1347)
			p.Match(PowerBuilderParserEVENT)
		}

	}
	p.SetState(1351)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 192, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1350)
			p.Match(PowerBuilderParserPOST)
		}

	}
	p.SetState(1354)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 193, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1353)
			p.Match(PowerBuilderParserDYNAMIC)
		}

	}
	{
		p.SetState(1356)
		p.Function_call_expression_sub()
	}

	return localctx
}

// IFunction_virtual_call_expression_subContext is an interface to support dynamic dispatch.
type IFunction_virtual_call_expression_subContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunction_virtual_call_expression_subContext differentiates from other interfaces.
	IsFunction_virtual_call_expression_subContext()
}

type Function_virtual_call_expression_subContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunction_virtual_call_expression_subContext() *Function_virtual_call_expression_subContext {
	var p = new(Function_virtual_call_expression_subContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_function_virtual_call_expression_sub
	return p
}

func (*Function_virtual_call_expression_subContext) IsFunction_virtual_call_expression_subContext() {}

func NewFunction_virtual_call_expression_subContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_virtual_call_expression_subContext {
	var p = new(Function_virtual_call_expression_subContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_function_virtual_call_expression_sub

	return p
}

func (s *Function_virtual_call_expression_subContext) GetParser() antlr.Parser { return s.parser }

func (s *Function_virtual_call_expression_subContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Function_virtual_call_expression_subContext) DOT() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserDOT, 0)
}

func (s *Function_virtual_call_expression_subContext) TRIGGER() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserTRIGGER, 0)
}

func (s *Function_virtual_call_expression_subContext) EVENT() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserEVENT, 0)
}

func (s *Function_virtual_call_expression_subContext) Function_call_expression_sub() IFunction_call_expression_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_call_expression_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_call_expression_subContext)
}

func (s *Function_virtual_call_expression_subContext) DYNAMIC() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserDYNAMIC, 0)
}

func (s *Function_virtual_call_expression_subContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_virtual_call_expression_subContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Function_virtual_call_expression_subContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterFunction_virtual_call_expression_sub(s)
	}
}

func (s *Function_virtual_call_expression_subContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitFunction_virtual_call_expression_sub(s)
	}
}

func (p *PowerBuilderParser) Function_virtual_call_expression_sub() (localctx IFunction_virtual_call_expression_subContext) {
	this := p
	_ = this

	localctx = NewFunction_virtual_call_expression_subContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 148, PowerBuilderParserRULE_function_virtual_call_expression_sub)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1379)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 197, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1358)
			p.Identifier()
		}
		{
			p.SetState(1359)
			p.Match(PowerBuilderParserDOT)
		}
		{
			p.SetState(1360)
			p.Match(PowerBuilderParserTRIGGER)
		}
		{
			p.SetState(1361)
			p.Match(PowerBuilderParserEVENT)
		}
		{
			p.SetState(1362)
			p.Function_call_expression_sub()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1364)
			p.Identifier()
		}
		{
			p.SetState(1365)
			p.Match(PowerBuilderParserDOT)
		}
		p.SetState(1375)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case PowerBuilderParserDYNAMIC:
			{
				p.SetState(1366)
				p.Match(PowerBuilderParserDYNAMIC)
			}
			p.SetState(1368)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 194, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(1367)
					p.Match(PowerBuilderParserEVENT)
				}

			}

		case PowerBuilderParserEVENT:
			{
				p.SetState(1370)
				p.Match(PowerBuilderParserEVENT)
			}
			p.SetState(1372)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == PowerBuilderParserTRIGGER {
				{
					p.SetState(1371)
					p.Match(PowerBuilderParserTRIGGER)
				}

			}
			{
				p.SetState(1374)
				p.Match(PowerBuilderParserDYNAMIC)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(1377)
			p.Function_call_expression_sub()
		}

	}

	return localctx
}

// IOpen_call_subContext is an interface to support dynamic dispatch.
type IOpen_call_subContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOpen_call_subContext differentiates from other interfaces.
	IsOpen_call_subContext()
}

type Open_call_subContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpen_call_subContext() *Open_call_subContext {
	var p = new(Open_call_subContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_open_call_sub
	return p
}

func (*Open_call_subContext) IsOpen_call_subContext() {}

func NewOpen_call_subContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Open_call_subContext {
	var p = new(Open_call_subContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_open_call_sub

	return p
}

func (s *Open_call_subContext) GetParser() antlr.Parser { return s.parser }

func (s *Open_call_subContext) OPEN() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserOPEN, 0)
}

func (s *Open_call_subContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserLPAREN, 0)
}

func (s *Open_call_subContext) Expression_list() IExpression_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_listContext)
}

func (s *Open_call_subContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserRPAREN, 0)
}

func (s *Open_call_subContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Open_call_subContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Open_call_subContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterOpen_call_sub(s)
	}
}

func (s *Open_call_subContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitOpen_call_sub(s)
	}
}

func (p *PowerBuilderParser) Open_call_sub() (localctx IOpen_call_subContext) {
	this := p
	_ = this

	localctx = NewOpen_call_subContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 150, PowerBuilderParserRULE_open_call_sub)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1381)
		p.Match(PowerBuilderParserOPEN)
	}
	{
		p.SetState(1382)
		p.Match(PowerBuilderParserLPAREN)
	}
	{
		p.SetState(1383)
		p.Expression_list()
	}
	{
		p.SetState(1384)
		p.Match(PowerBuilderParserRPAREN)
	}

	return localctx
}

// IClose_call_subContext is an interface to support dynamic dispatch.
type IClose_call_subContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClose_call_subContext differentiates from other interfaces.
	IsClose_call_subContext()
}

type Close_call_subContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClose_call_subContext() *Close_call_subContext {
	var p = new(Close_call_subContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_close_call_sub
	return p
}

func (*Close_call_subContext) IsClose_call_subContext() {}

func NewClose_call_subContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Close_call_subContext {
	var p = new(Close_call_subContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_close_call_sub

	return p
}

func (s *Close_call_subContext) GetParser() antlr.Parser { return s.parser }

func (s *Close_call_subContext) CLOSE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserCLOSE, 0)
}

func (s *Close_call_subContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserLPAREN, 0)
}

func (s *Close_call_subContext) Expression_list() IExpression_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_listContext)
}

func (s *Close_call_subContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserRPAREN, 0)
}

func (s *Close_call_subContext) HALT() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserHALT, 0)
}

func (s *Close_call_subContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Close_call_subContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Close_call_subContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterClose_call_sub(s)
	}
}

func (s *Close_call_subContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitClose_call_sub(s)
	}
}

func (p *PowerBuilderParser) Close_call_sub() (localctx IClose_call_subContext) {
	this := p
	_ = this

	localctx = NewClose_call_subContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 152, PowerBuilderParserRULE_close_call_sub)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1395)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PowerBuilderParserCLOSE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1386)
			p.Match(PowerBuilderParserCLOSE)
		}
		{
			p.SetState(1387)
			p.Match(PowerBuilderParserLPAREN)
		}
		{
			p.SetState(1388)
			p.Expression_list()
		}
		{
			p.SetState(1389)
			p.Match(PowerBuilderParserRPAREN)
		}

	case PowerBuilderParserHALT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1391)
			p.Match(PowerBuilderParserHALT)
		}
		p.SetState(1393)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 198, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1392)
				p.Match(PowerBuilderParserCLOSE)
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IFunction_call_statementContext is an interface to support dynamic dispatch.
type IFunction_call_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunction_call_statementContext differentiates from other interfaces.
	IsFunction_call_statementContext()
}

type Function_call_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunction_call_statementContext() *Function_call_statementContext {
	var p = new(Function_call_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_function_call_statement
	return p
}

func (*Function_call_statementContext) IsFunction_call_statementContext() {}

func NewFunction_call_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_call_statementContext {
	var p = new(Function_call_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_function_call_statement

	return p
}

func (s *Function_call_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Function_call_statementContext) Function_call_expression_sub() IFunction_call_expression_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_call_expression_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_call_expression_subContext)
}

func (s *Function_call_statementContext) Ancestor_function_call() IAncestor_function_callContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAncestor_function_callContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAncestor_function_callContext)
}

func (s *Function_call_statementContext) Describe_function_call() IDescribe_function_callContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDescribe_function_callContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDescribe_function_callContext)
}

func (s *Function_call_statementContext) Ancestor_event_call_statement() IAncestor_event_call_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAncestor_event_call_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAncestor_event_call_statementContext)
}

func (s *Function_call_statementContext) Function_event_call() IFunction_event_callContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_event_callContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_event_callContext)
}

func (s *Function_call_statementContext) Function_virtual_call_expression_sub() IFunction_virtual_call_expression_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_virtual_call_expression_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_virtual_call_expression_subContext)
}

func (s *Function_call_statementContext) Open_call_sub() IOpen_call_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOpen_call_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOpen_call_subContext)
}

func (s *Function_call_statementContext) Close_call_sub() IClose_call_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClose_call_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClose_call_subContext)
}

func (s *Function_call_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_call_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Function_call_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterFunction_call_statement(s)
	}
}

func (s *Function_call_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitFunction_call_statement(s)
	}
}

func (p *PowerBuilderParser) Function_call_statement() (localctx IFunction_call_statementContext) {
	this := p
	_ = this

	localctx = NewFunction_call_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 154, PowerBuilderParserRULE_function_call_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1405)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 200, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1397)
			p.Function_call_expression_sub()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1398)
			p.Ancestor_function_call()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1399)
			p.Describe_function_call()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1400)
			p.Ancestor_event_call_statement()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1401)
			p.Function_event_call()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1402)
			p.Function_virtual_call_expression_sub()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1403)
			p.Open_call_sub()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1404)
			p.Close_call_sub()
		}

	}

	return localctx
}

// IAncestor_function_callContext is an interface to support dynamic dispatch.
type IAncestor_function_callContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAncestor_function_callContext differentiates from other interfaces.
	IsAncestor_function_callContext()
}

type Ancestor_function_callContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAncestor_function_callContext() *Ancestor_function_callContext {
	var p = new(Ancestor_function_callContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_ancestor_function_call
	return p
}

func (*Ancestor_function_callContext) IsAncestor_function_callContext() {}

func NewAncestor_function_callContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Ancestor_function_callContext {
	var p = new(Ancestor_function_callContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_ancestor_function_call

	return p
}

func (s *Ancestor_function_callContext) GetParser() antlr.Parser { return s.parser }

func (s *Ancestor_function_callContext) COLONCOLON() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserCOLONCOLON, 0)
}

func (s *Ancestor_function_callContext) Function_call_expression_sub() IFunction_call_expression_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_call_expression_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_call_expression_subContext)
}

func (s *Ancestor_function_callContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Ancestor_function_callContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Ancestor_function_callContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterAncestor_function_call(s)
	}
}

func (s *Ancestor_function_callContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitAncestor_function_call(s)
	}
}

func (p *PowerBuilderParser) Ancestor_function_call() (localctx IAncestor_function_callContext) {
	this := p
	_ = this

	localctx = NewAncestor_function_callContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 156, PowerBuilderParserRULE_ancestor_function_call)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1407)
		p.Match(PowerBuilderParserCOLONCOLON)
	}
	{
		p.SetState(1408)
		p.Function_call_expression_sub()
	}

	return localctx
}

// ICall_statementContext is an interface to support dynamic dispatch.
type ICall_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCall_statementContext differentiates from other interfaces.
	IsCall_statementContext()
}

type Call_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCall_statementContext() *Call_statementContext {
	var p = new(Call_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_call_statement
	return p
}

func (*Call_statementContext) IsCall_statementContext() {}

func NewCall_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Call_statementContext {
	var p = new(Call_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_call_statement

	return p
}

func (s *Call_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Call_statementContext) CALL() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserCALL, 0)
}

func (s *Call_statementContext) Variable_name() IVariable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariable_nameContext)
}

func (s *Call_statementContext) COLONCOLON() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserCOLONCOLON, 0)
}

func (s *Call_statementContext) SEMI() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserSEMI, 0)
}

func (s *Call_statementContext) CREATE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserCREATE, 0)
}

func (s *Call_statementContext) DESTROY() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserDESTROY, 0)
}

func (s *Call_statementContext) OPEN() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserOPEN, 0)
}

func (s *Call_statementContext) CLOSE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserCLOSE, 0)
}

func (s *Call_statementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Call_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Call_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Call_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterCall_statement(s)
	}
}

func (s *Call_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitCall_statement(s)
	}
}

func (p *PowerBuilderParser) Call_statement() (localctx ICall_statementContext) {
	this := p
	_ = this

	localctx = NewCall_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 158, PowerBuilderParserRULE_call_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1410)
		p.Match(PowerBuilderParserCALL)
	}
	{
		p.SetState(1411)
		p.Variable_name()
	}
	p.SetState(1420)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 202, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1412)
			p.Match(PowerBuilderParserCOLONCOLON)
		}
		p.SetState(1418)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 201, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(1413)
				p.Match(PowerBuilderParserCREATE)
			}

		case 2:
			{
				p.SetState(1414)
				p.Match(PowerBuilderParserDESTROY)
			}

		case 3:
			{
				p.SetState(1415)
				p.Match(PowerBuilderParserOPEN)
			}

		case 4:
			{
				p.SetState(1416)
				p.Match(PowerBuilderParserCLOSE)
			}

		case 5:
			{
				p.SetState(1417)
				p.Identifier()
			}

		}

	}
	p.SetState(1423)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 203, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1422)
			p.Match(PowerBuilderParserSEMI)
		}

	}

	return localctx
}

// ISuper_call_statementContext is an interface to support dynamic dispatch.
type ISuper_call_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSuper_call_statementContext differentiates from other interfaces.
	IsSuper_call_statementContext()
}

type Super_call_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySuper_call_statementContext() *Super_call_statementContext {
	var p = new(Super_call_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_super_call_statement
	return p
}

func (*Super_call_statementContext) IsSuper_call_statementContext() {}

func NewSuper_call_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Super_call_statementContext {
	var p = new(Super_call_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_super_call_statement

	return p
}

func (s *Super_call_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Super_call_statementContext) CALL() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserCALL, 0)
}

func (s *Super_call_statementContext) Atom_sub_call1() IAtom_sub_call1Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAtom_sub_call1Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAtom_sub_call1Context)
}

func (s *Super_call_statementContext) Atom_sub_member1() IAtom_sub_member1Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAtom_sub_member1Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAtom_sub_member1Context)
}

func (s *Super_call_statementContext) Identifier_name() IIdentifier_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_nameContext)
}

func (s *Super_call_statementContext) TICK() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserTICK, 0)
}

func (s *Super_call_statementContext) SUPER() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserSUPER, 0)
}

func (s *Super_call_statementContext) COLONCOLON() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserCOLONCOLON, 0)
}

func (s *Super_call_statementContext) EVENT() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserEVENT, 0)
}

func (s *Super_call_statementContext) CREATE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserCREATE, 0)
}

func (s *Super_call_statementContext) DESTROY() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserDESTROY, 0)
}

func (s *Super_call_statementContext) OPEN() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserOPEN, 0)
}

func (s *Super_call_statementContext) CLOSE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserCLOSE, 0)
}

func (s *Super_call_statementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Super_call_statementContext) Function_call_statement() IFunction_call_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_call_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_call_statementContext)
}

func (s *Super_call_statementContext) POST() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserPOST, 0)
}

func (s *Super_call_statementContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserFUNCTION, 0)
}

func (s *Super_call_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Super_call_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Super_call_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterSuper_call_statement(s)
	}
}

func (s *Super_call_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitSuper_call_statement(s)
	}
}

func (p *PowerBuilderParser) Super_call_statement() (localctx ISuper_call_statementContext) {
	this := p
	_ = this

	localctx = NewSuper_call_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 160, PowerBuilderParserRULE_super_call_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1458)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 210, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1425)
			p.Match(PowerBuilderParserCALL)
		}
		p.SetState(1429)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 204, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1426)
				p.Identifier_name()
			}
			{
				p.SetState(1427)
				p.Match(PowerBuilderParserTICK)
			}

		}
		p.SetState(1433)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 205, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(1431)
				p.Atom_sub_call1()
			}

		case 2:
			{
				p.SetState(1432)
				p.Atom_sub_member1()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1435)
			p.Match(PowerBuilderParserCALL)
		}
		{
			p.SetState(1436)
			p.Match(PowerBuilderParserSUPER)
		}
		{
			p.SetState(1437)
			p.Match(PowerBuilderParserCOLONCOLON)
		}
		p.SetState(1444)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 206, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(1438)
				p.Match(PowerBuilderParserEVENT)
			}

		case 2:
			{
				p.SetState(1439)
				p.Match(PowerBuilderParserCREATE)
			}

		case 3:
			{
				p.SetState(1440)
				p.Match(PowerBuilderParserDESTROY)
			}

		case 4:
			{
				p.SetState(1441)
				p.Match(PowerBuilderParserOPEN)
			}

		case 5:
			{
				p.SetState(1442)
				p.Match(PowerBuilderParserCLOSE)
			}

		case 6:
			{
				p.SetState(1443)
				p.Identifier()
			}

		}
		p.SetState(1447)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 207, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1446)
				p.Function_call_statement()
			}

		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1449)
			p.Match(PowerBuilderParserSUPER)
		}
		{
			p.SetState(1450)
			p.Match(PowerBuilderParserCOLONCOLON)
		}
		p.SetState(1452)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 208, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1451)
				_la = p.GetTokenStream().LA(1)

				if !(_la == PowerBuilderParserFUNCTION || _la == PowerBuilderParserEVENT) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		p.SetState(1455)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 209, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1454)
				p.Match(PowerBuilderParserPOST)
			}

		}
		{
			p.SetState(1457)
			p.Function_call_statement()
		}

	}

	return localctx
}

// IAncestor_event_call_statementContext is an interface to support dynamic dispatch.
type IAncestor_event_call_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAncestor_event_call_statementContext differentiates from other interfaces.
	IsAncestor_event_call_statementContext()
}

type Ancestor_event_call_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAncestor_event_call_statementContext() *Ancestor_event_call_statementContext {
	var p = new(Ancestor_event_call_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_ancestor_event_call_statement
	return p
}

func (*Ancestor_event_call_statementContext) IsAncestor_event_call_statementContext() {}

func NewAncestor_event_call_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Ancestor_event_call_statementContext {
	var p = new(Ancestor_event_call_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_ancestor_event_call_statement

	return p
}

func (s *Ancestor_event_call_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Ancestor_event_call_statementContext) AllIdentifier_name() []IIdentifier_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifier_nameContext)(nil)).Elem())
	var tst = make([]IIdentifier_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifier_nameContext)
		}
	}

	return tst
}

func (s *Ancestor_event_call_statementContext) Identifier_name(i int) IIdentifier_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_nameContext)
}

func (s *Ancestor_event_call_statementContext) COLONCOLON() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserCOLONCOLON, 0)
}

func (s *Ancestor_event_call_statementContext) Function_call_statement() IFunction_call_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_call_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_call_statementContext)
}

func (s *Ancestor_event_call_statementContext) DOT() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserDOT, 0)
}

func (s *Ancestor_event_call_statementContext) EVENT() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserEVENT, 0)
}

func (s *Ancestor_event_call_statementContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserFUNCTION, 0)
}

func (s *Ancestor_event_call_statementContext) TRIGGER() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserTRIGGER, 0)
}

func (s *Ancestor_event_call_statementContext) POST() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserPOST, 0)
}

func (s *Ancestor_event_call_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Ancestor_event_call_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Ancestor_event_call_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterAncestor_event_call_statement(s)
	}
}

func (s *Ancestor_event_call_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitAncestor_event_call_statement(s)
	}
}

func (p *PowerBuilderParser) Ancestor_event_call_statement() (localctx IAncestor_event_call_statementContext) {
	this := p
	_ = this

	localctx = NewAncestor_event_call_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 162, PowerBuilderParserRULE_ancestor_event_call_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1463)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 211, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1460)
			p.Identifier_name()
		}
		{
			p.SetState(1461)
			p.Match(PowerBuilderParserDOT)
		}

	}
	{
		p.SetState(1465)
		p.Identifier_name()
	}
	{
		p.SetState(1466)
		p.Match(PowerBuilderParserCOLONCOLON)
	}
	p.SetState(1468)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 212, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1467)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PowerBuilderParserFUNCTION || _la == PowerBuilderParserEVENT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(1471)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 213, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1470)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PowerBuilderParserPOST || _la == PowerBuilderParserTRIGGER) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(1473)
		p.Function_call_statement()
	}

	return localctx
}

// IEvent_call_statement_subContext is an interface to support dynamic dispatch.
type IEvent_call_statement_subContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEvent_call_statement_subContext differentiates from other interfaces.
	IsEvent_call_statement_subContext()
}

type Event_call_statement_subContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEvent_call_statement_subContext() *Event_call_statement_subContext {
	var p = new(Event_call_statement_subContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_event_call_statement_sub
	return p
}

func (*Event_call_statement_subContext) IsEvent_call_statement_subContext() {}

func NewEvent_call_statement_subContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Event_call_statement_subContext {
	var p = new(Event_call_statement_subContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_event_call_statement_sub

	return p
}

func (s *Event_call_statement_subContext) GetParser() antlr.Parser { return s.parser }

func (s *Event_call_statement_subContext) EVENT() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserEVENT, 0)
}

func (s *Event_call_statement_subContext) Variable_name() IVariable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariable_nameContext)
}

func (s *Event_call_statement_subContext) Function_call_statement() IFunction_call_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_call_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_call_statementContext)
}

func (s *Event_call_statement_subContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Event_call_statement_subContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Event_call_statement_subContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterEvent_call_statement_sub(s)
	}
}

func (s *Event_call_statement_subContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitEvent_call_statement_sub(s)
	}
}

func (p *PowerBuilderParser) Event_call_statement_sub() (localctx IEvent_call_statement_subContext) {
	this := p
	_ = this

	localctx = NewEvent_call_statement_subContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 164, PowerBuilderParserRULE_event_call_statement_sub)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1476)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-7)&-(0x1f+1)) == 0 && ((1<<uint((_la-7)))&((1<<(PowerBuilderParserDATE_TYPE-7))|(1<<(PowerBuilderParserTIME_TYPE-7))|(1<<(PowerBuilderParserWINDOW-7))|(1<<(PowerBuilderParserREADONLY-7))|(1<<(PowerBuilderParserTYPE-7)))) != 0) || (((_la-44)&-(0x1f+1)) == 0 && ((1<<uint((_la-44)))&((1<<(PowerBuilderParserUPDATE-44))|(1<<(PowerBuilderParserOPEN-44))|(1<<(PowerBuilderParserGOTO-44))|(1<<(PowerBuilderParserCLOSE-44)))) != 0) || (((_la-78)&-(0x1f+1)) == 0 && ((1<<uint((_la-78)))&((1<<(PowerBuilderParserCREATE-78))|(1<<(PowerBuilderParserSELECT-78))|(1<<(PowerBuilderParserDELETE-78))|(1<<(PowerBuilderParserINSERT-78))|(1<<(PowerBuilderParserSYSTEM-78))|(1<<(PowerBuilderParserSQLCA-78))|(1<<(PowerBuilderParserVALUES-78)))) != 0) || _la == PowerBuilderParserUNDERSCORE || _la == PowerBuilderParserID {
		{
			p.SetState(1475)
			p.Variable_name()
		}

	}
	{
		p.SetState(1478)
		p.Match(PowerBuilderParserEVENT)
	}
	p.SetState(1480)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 215, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1479)
			p.Function_call_statement()
		}

	}

	return localctx
}

// IEvent_call_statementContext is an interface to support dynamic dispatch.
type IEvent_call_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEvent_call_statementContext differentiates from other interfaces.
	IsEvent_call_statementContext()
}

type Event_call_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEvent_call_statementContext() *Event_call_statementContext {
	var p = new(Event_call_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_event_call_statement
	return p
}

func (*Event_call_statementContext) IsEvent_call_statementContext() {}

func NewEvent_call_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Event_call_statementContext {
	var p = new(Event_call_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_event_call_statement

	return p
}

func (s *Event_call_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Event_call_statementContext) Event_call_statement_sub() IEvent_call_statement_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEvent_call_statement_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEvent_call_statement_subContext)
}

func (s *Event_call_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Event_call_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Event_call_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterEvent_call_statement(s)
	}
}

func (s *Event_call_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitEvent_call_statement(s)
	}
}

func (p *PowerBuilderParser) Event_call_statement() (localctx IEvent_call_statementContext) {
	this := p
	_ = this

	localctx = NewEvent_call_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 166, PowerBuilderParserRULE_event_call_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1482)
		p.Event_call_statement_sub()
	}

	return localctx
}

// ICreate_call_subContext is an interface to support dynamic dispatch.
type ICreate_call_subContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_call_subContext differentiates from other interfaces.
	IsCreate_call_subContext()
}

type Create_call_subContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_call_subContext() *Create_call_subContext {
	var p = new(Create_call_subContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_create_call_sub
	return p
}

func (*Create_call_subContext) IsCreate_call_subContext() {}

func NewCreate_call_subContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_call_subContext {
	var p = new(Create_call_subContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_create_call_sub

	return p
}

func (s *Create_call_subContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_call_subContext) CREATE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserCREATE, 0)
}

func (s *Create_call_subContext) USING() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserUSING, 0)
}

func (s *Create_call_subContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Create_call_subContext) Data_type_name() IData_type_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_type_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_type_nameContext)
}

func (s *Create_call_subContext) Identifier_name() IIdentifier_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_nameContext)
}

func (s *Create_call_subContext) DOT() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserDOT, 0)
}

func (s *Create_call_subContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserLPAREN, 0)
}

func (s *Create_call_subContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserRPAREN, 0)
}

func (s *Create_call_subContext) Expression_list() IExpression_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_listContext)
}

func (s *Create_call_subContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_call_subContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_call_subContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterCreate_call_sub(s)
	}
}

func (s *Create_call_subContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitCreate_call_sub(s)
	}
}

func (p *PowerBuilderParser) Create_call_sub() (localctx ICreate_call_subContext) {
	this := p
	_ = this

	localctx = NewCreate_call_subContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 168, PowerBuilderParserRULE_create_call_sub)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1504)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 220, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1484)
			p.Match(PowerBuilderParserCREATE)
		}
		{
			p.SetState(1485)
			p.Match(PowerBuilderParserUSING)
		}
		{
			p.SetState(1486)
			p.expression(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1487)
			p.Match(PowerBuilderParserCREATE)
		}
		p.SetState(1489)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PowerBuilderParserUSING {
			{
				p.SetState(1488)
				p.Match(PowerBuilderParserUSING)
			}

		}
		p.SetState(1494)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 217, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1491)
				p.Identifier_name()
			}
			{
				p.SetState(1492)
				p.Match(PowerBuilderParserDOT)
			}

		}
		{
			p.SetState(1496)
			p.Data_type_name()
		}
		p.SetState(1502)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PowerBuilderParserLPAREN {
			{
				p.SetState(1497)
				p.Match(PowerBuilderParserLPAREN)
			}
			p.SetState(1499)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<PowerBuilderParserANY)|(1<<PowerBuilderParserBLOB)|(1<<PowerBuilderParserBOOLEAN)|(1<<PowerBuilderParserBYTE)|(1<<PowerBuilderParserCHARACTER)|(1<<PowerBuilderParserCHAR)|(1<<PowerBuilderParserDATE_TYPE)|(1<<PowerBuilderParserDATETIME)|(1<<PowerBuilderParserDECIMAL)|(1<<PowerBuilderParserDEC)|(1<<PowerBuilderParserDOUBLE)|(1<<PowerBuilderParserINTEGER)|(1<<PowerBuilderParserINT)|(1<<PowerBuilderParserLONG)|(1<<PowerBuilderParserLONGLONG)|(1<<PowerBuilderParserREAL)|(1<<PowerBuilderParserSTRING)|(1<<PowerBuilderParserTIME_TYPE)|(1<<PowerBuilderParserUNSIGNEDINTEGER)|(1<<PowerBuilderParserUINT)|(1<<PowerBuilderParserUNSIGNEDLONG)|(1<<PowerBuilderParserULONG)|(1<<PowerBuilderParserWINDOW)|(1<<PowerBuilderParserTRUE)|(1<<PowerBuilderParserFALSE))) != 0) || (((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(PowerBuilderParserFUNCTION-34))|(1<<(PowerBuilderParserREADONLY-34))|(1<<(PowerBuilderParserTYPE-34))|(1<<(PowerBuilderParserREF-34))|(1<<(PowerBuilderParserUPDATE-34))|(1<<(PowerBuilderParserDYNAMIC-34))|(1<<(PowerBuilderParserEVENT-34))|(1<<(PowerBuilderParserOPEN-34))|(1<<(PowerBuilderParserGOTO-34)))) != 0) || (((_la-69)&-(0x1f+1)) == 0 && ((1<<uint((_la-69)))&((1<<(PowerBuilderParserCLOSE-69))|(1<<(PowerBuilderParserCREATE-69))|(1<<(PowerBuilderParserPOST-69))|(1<<(PowerBuilderParserSELECT-69))|(1<<(PowerBuilderParserDELETE-69))|(1<<(PowerBuilderParserINSERT-69))|(1<<(PowerBuilderParserDESCRIBE-69))|(1<<(PowerBuilderParserNOT-69))|(1<<(PowerBuilderParserHALT-69))|(1<<(PowerBuilderParserSYSTEM-69)))) != 0) || (((_la-101)&-(0x1f+1)) == 0 && ((1<<uint((_la-101)))&((1<<(PowerBuilderParserSQLCA-101))|(1<<(PowerBuilderParserVALUES-101))|(1<<(PowerBuilderParserPLUS-101))|(1<<(PowerBuilderParserMINUS-101))|(1<<(PowerBuilderParserCOLONCOLON-101)))) != 0) || (((_la-136)&-(0x1f+1)) == 0 && ((1<<uint((_la-136)))&((1<<(PowerBuilderParserLCURLY-136))|(1<<(PowerBuilderParserDQUOTED_STRING-136))|(1<<(PowerBuilderParserQUOTED_STRING-136))|(1<<(PowerBuilderParserLPAREN-136))|(1<<(PowerBuilderParserCOLON-136))|(1<<(PowerBuilderParserUNDERSCORE-136))|(1<<(PowerBuilderParserNUMBER-136))|(1<<(PowerBuilderParserDATE-136))|(1<<(PowerBuilderParserTIME-136))|(1<<(PowerBuilderParserENUM-136))|(1<<(PowerBuilderParserID-136)))) != 0) {
				{
					p.SetState(1498)
					p.Expression_list()
				}

			}
			{
				p.SetState(1501)
				p.Match(PowerBuilderParserRPAREN)
			}

		}

	}

	return localctx
}

// ICreate_call_statementContext is an interface to support dynamic dispatch.
type ICreate_call_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_call_statementContext differentiates from other interfaces.
	IsCreate_call_statementContext()
}

type Create_call_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_call_statementContext() *Create_call_statementContext {
	var p = new(Create_call_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_create_call_statement
	return p
}

func (*Create_call_statementContext) IsCreate_call_statementContext() {}

func NewCreate_call_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_call_statementContext {
	var p = new(Create_call_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_create_call_statement

	return p
}

func (s *Create_call_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_call_statementContext) Create_call_sub() ICreate_call_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_call_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_call_subContext)
}

func (s *Create_call_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_call_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_call_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterCreate_call_statement(s)
	}
}

func (s *Create_call_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitCreate_call_statement(s)
	}
}

func (p *PowerBuilderParser) Create_call_statement() (localctx ICreate_call_statementContext) {
	this := p
	_ = this

	localctx = NewCreate_call_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 170, PowerBuilderParserRULE_create_call_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1506)
		p.Create_call_sub()
	}

	return localctx
}

// IDestroy_call_subContext is an interface to support dynamic dispatch.
type IDestroy_call_subContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDestroy_call_subContext differentiates from other interfaces.
	IsDestroy_call_subContext()
}

type Destroy_call_subContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDestroy_call_subContext() *Destroy_call_subContext {
	var p = new(Destroy_call_subContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_destroy_call_sub
	return p
}

func (*Destroy_call_subContext) IsDestroy_call_subContext() {}

func NewDestroy_call_subContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Destroy_call_subContext {
	var p = new(Destroy_call_subContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_destroy_call_sub

	return p
}

func (s *Destroy_call_subContext) GetParser() antlr.Parser { return s.parser }

func (s *Destroy_call_subContext) DESTROY() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserDESTROY, 0)
}

func (s *Destroy_call_subContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Destroy_call_subContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Destroy_call_subContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Destroy_call_subContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterDestroy_call_sub(s)
	}
}

func (s *Destroy_call_subContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitDestroy_call_sub(s)
	}
}

func (p *PowerBuilderParser) Destroy_call_sub() (localctx IDestroy_call_subContext) {
	this := p
	_ = this

	localctx = NewDestroy_call_subContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 172, PowerBuilderParserRULE_destroy_call_sub)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1508)
		p.Match(PowerBuilderParserDESTROY)
	}
	{
		p.SetState(1509)
		p.expression(0)
	}

	return localctx
}

// IDestroy_call_statementContext is an interface to support dynamic dispatch.
type IDestroy_call_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDestroy_call_statementContext differentiates from other interfaces.
	IsDestroy_call_statementContext()
}

type Destroy_call_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDestroy_call_statementContext() *Destroy_call_statementContext {
	var p = new(Destroy_call_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_destroy_call_statement
	return p
}

func (*Destroy_call_statementContext) IsDestroy_call_statementContext() {}

func NewDestroy_call_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Destroy_call_statementContext {
	var p = new(Destroy_call_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_destroy_call_statement

	return p
}

func (s *Destroy_call_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Destroy_call_statementContext) Destroy_call_sub() IDestroy_call_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDestroy_call_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDestroy_call_subContext)
}

func (s *Destroy_call_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Destroy_call_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Destroy_call_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterDestroy_call_statement(s)
	}
}

func (s *Destroy_call_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitDestroy_call_statement(s)
	}
}

func (p *PowerBuilderParser) Destroy_call_statement() (localctx IDestroy_call_statementContext) {
	this := p
	_ = this

	localctx = NewDestroy_call_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 174, PowerBuilderParserRULE_destroy_call_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1511)
		p.Destroy_call_sub()
	}

	return localctx
}

// IFor_loop_statementContext is an interface to support dynamic dispatch.
type IFor_loop_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFor_loop_statementContext differentiates from other interfaces.
	IsFor_loop_statementContext()
}

type For_loop_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFor_loop_statementContext() *For_loop_statementContext {
	var p = new(For_loop_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_for_loop_statement
	return p
}

func (*For_loop_statementContext) IsFor_loop_statementContext() {}

func NewFor_loop_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *For_loop_statementContext {
	var p = new(For_loop_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_for_loop_statement

	return p
}

func (s *For_loop_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *For_loop_statementContext) AllFOR() []antlr.TerminalNode {
	return s.GetTokens(PowerBuilderParserFOR)
}

func (s *For_loop_statementContext) FOR(i int) antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserFOR, i)
}

func (s *For_loop_statementContext) Variable_name() IVariable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariable_nameContext)
}

func (s *For_loop_statementContext) EQ() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserEQ, 0)
}

func (s *For_loop_statementContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *For_loop_statementContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *For_loop_statementContext) TO() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserTO, 0)
}

func (s *For_loop_statementContext) NEXT() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserNEXT, 0)
}

func (s *For_loop_statementContext) END() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserEND, 0)
}

func (s *For_loop_statementContext) STEP() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserSTEP, 0)
}

func (s *For_loop_statementContext) AllStatement() []IStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatementContext)(nil)).Elem())
	var tst = make([]IStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatementContext)
		}
	}

	return tst
}

func (s *For_loop_statementContext) Statement(i int) IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *For_loop_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *For_loop_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *For_loop_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterFor_loop_statement(s)
	}
}

func (s *For_loop_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitFor_loop_statement(s)
	}
}

func (p *PowerBuilderParser) For_loop_statement() (localctx IFor_loop_statementContext) {
	this := p
	_ = this

	localctx = NewFor_loop_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 176, PowerBuilderParserRULE_for_loop_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1513)
		p.Match(PowerBuilderParserFOR)
	}
	{
		p.SetState(1514)
		p.Variable_name()
	}
	{
		p.SetState(1515)
		p.Match(PowerBuilderParserEQ)
	}
	{
		p.SetState(1516)
		p.expression(0)
	}
	{
		p.SetState(1517)
		p.Match(PowerBuilderParserTO)
	}
	{
		p.SetState(1518)
		p.expression(0)
	}
	p.SetState(1521)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PowerBuilderParserSTEP {
		{
			p.SetState(1519)
			p.Match(PowerBuilderParserSTEP)
		}
		{
			p.SetState(1520)
			p.expression(0)
		}

	}
	p.SetState(1526)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<PowerBuilderParserANY)|(1<<PowerBuilderParserBLOB)|(1<<PowerBuilderParserBOOLEAN)|(1<<PowerBuilderParserBYTE)|(1<<PowerBuilderParserCHARACTER)|(1<<PowerBuilderParserCHAR)|(1<<PowerBuilderParserDATE_TYPE)|(1<<PowerBuilderParserDATETIME)|(1<<PowerBuilderParserDECIMAL)|(1<<PowerBuilderParserDEC)|(1<<PowerBuilderParserDOUBLE)|(1<<PowerBuilderParserINTEGER)|(1<<PowerBuilderParserINT)|(1<<PowerBuilderParserLONG)|(1<<PowerBuilderParserLONGLONG)|(1<<PowerBuilderParserREAL)|(1<<PowerBuilderParserSTRING)|(1<<PowerBuilderParserTIME_TYPE)|(1<<PowerBuilderParserUNSIGNEDINTEGER)|(1<<PowerBuilderParserUINT)|(1<<PowerBuilderParserUNSIGNEDLONG)|(1<<PowerBuilderParserULONG)|(1<<PowerBuilderParserWINDOW)|(1<<PowerBuilderParserGLOBAL)|(1<<PowerBuilderParserINDIRECT))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(PowerBuilderParserPUBLIC-32))|(1<<(PowerBuilderParserPRIVATE-32))|(1<<(PowerBuilderParserFUNCTION-32))|(1<<(PowerBuilderParserREADONLY-32))|(1<<(PowerBuilderParserTYPE-32))|(1<<(PowerBuilderParserUPDATE-32))|(1<<(PowerBuilderParserDYNAMIC-32))|(1<<(PowerBuilderParserPRIVATEWRITE-32))|(1<<(PowerBuilderParserPROTECTED-32))|(1<<(PowerBuilderParserPRIVATEREAD-32))|(1<<(PowerBuilderParserPROTECTEDREAD-32))|(1<<(PowerBuilderParserPROTECTEDWRITE-32))|(1<<(PowerBuilderParserLOCAL-32))|(1<<(PowerBuilderParserEVENT-32))|(1<<(PowerBuilderParserOPEN-32))|(1<<(PowerBuilderParserGOTO-32))|(1<<(PowerBuilderParserIF-32))|(1<<(PowerBuilderParserTRY-32))|(1<<(PowerBuilderParserEXIT-32))|(1<<(PowerBuilderParserCHOOSE-32)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(PowerBuilderParserCONTINUE-65))|(1<<(PowerBuilderParserDO-65))|(1<<(PowerBuilderParserFOR-65))|(1<<(PowerBuilderParserCLOSE-65))|(1<<(PowerBuilderParserTHROW-65))|(1<<(PowerBuilderParserCREATE-65))|(1<<(PowerBuilderParserDESTROY-65))|(1<<(PowerBuilderParserPOST-65))|(1<<(PowerBuilderParserTRIGGER-65))|(1<<(PowerBuilderParserSELECT-65))|(1<<(PowerBuilderParserDELETE-65))|(1<<(PowerBuilderParserINSERT-65))|(1<<(PowerBuilderParserDESCRIBE-65))|(1<<(PowerBuilderParserRETURN-65))|(1<<(PowerBuilderParserCALL-65))|(1<<(PowerBuilderParserHALT-65))|(1<<(PowerBuilderParserSUPER-65))|(1<<(PowerBuilderParserSYSTEM-65)))) != 0) || (((_la-101)&-(0x1f+1)) == 0 && ((1<<uint((_la-101)))&((1<<(PowerBuilderParserSQLCA-101))|(1<<(PowerBuilderParserEXECUTE-101))|(1<<(PowerBuilderParserDECLARE-101))|(1<<(PowerBuilderParserVALUES-101))|(1<<(PowerBuilderParserCOMMIT-101))|(1<<(PowerBuilderParserPREPARE-101))|(1<<(PowerBuilderParserFETCH-101))|(1<<(PowerBuilderParserCONNECT-101))|(1<<(PowerBuilderParserDISCONNECT-101))|(1<<(PowerBuilderParserCONSTANT-101))|(1<<(PowerBuilderParserSELECTBLOB-101))|(1<<(PowerBuilderParserUPDATEBLOB-101))|(1<<(PowerBuilderParserROLLBACK-101))|(1<<(PowerBuilderParserCOLONCOLON-101)))) != 0) || (((_la-152)&-(0x1f+1)) == 0 && ((1<<uint((_la-152)))&((1<<(PowerBuilderParserAT-152))|(1<<(PowerBuilderParserUNDERSCORE-152))|(1<<(PowerBuilderParserID-152)))) != 0) {
		{
			p.SetState(1523)
			p.Statement()
		}

		p.SetState(1528)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(1532)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PowerBuilderParserNEXT:
		{
			p.SetState(1529)
			p.Match(PowerBuilderParserNEXT)
		}

	case PowerBuilderParserEND:
		{
			p.SetState(1530)
			p.Match(PowerBuilderParserEND)
		}
		{
			p.SetState(1531)
			p.Match(PowerBuilderParserFOR)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IDo_while_loop_statementContext is an interface to support dynamic dispatch.
type IDo_while_loop_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDo_while_loop_statementContext differentiates from other interfaces.
	IsDo_while_loop_statementContext()
}

type Do_while_loop_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDo_while_loop_statementContext() *Do_while_loop_statementContext {
	var p = new(Do_while_loop_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_do_while_loop_statement
	return p
}

func (*Do_while_loop_statementContext) IsDo_while_loop_statementContext() {}

func NewDo_while_loop_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Do_while_loop_statementContext {
	var p = new(Do_while_loop_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_do_while_loop_statement

	return p
}

func (s *Do_while_loop_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Do_while_loop_statementContext) DO() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserDO, 0)
}

func (s *Do_while_loop_statementContext) Boolean_expression() IBoolean_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBoolean_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBoolean_expressionContext)
}

func (s *Do_while_loop_statementContext) LOOP() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserLOOP, 0)
}

func (s *Do_while_loop_statementContext) WHILE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserWHILE, 0)
}

func (s *Do_while_loop_statementContext) UNTIL() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserUNTIL, 0)
}

func (s *Do_while_loop_statementContext) AllStatement() []IStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatementContext)(nil)).Elem())
	var tst = make([]IStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatementContext)
		}
	}

	return tst
}

func (s *Do_while_loop_statementContext) Statement(i int) IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *Do_while_loop_statementContext) AllSEMI() []antlr.TerminalNode {
	return s.GetTokens(PowerBuilderParserSEMI)
}

func (s *Do_while_loop_statementContext) SEMI(i int) antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserSEMI, i)
}

func (s *Do_while_loop_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Do_while_loop_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Do_while_loop_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterDo_while_loop_statement(s)
	}
}

func (s *Do_while_loop_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitDo_while_loop_statement(s)
	}
}

func (p *PowerBuilderParser) Do_while_loop_statement() (localctx IDo_while_loop_statementContext) {
	this := p
	_ = this

	localctx = NewDo_while_loop_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 178, PowerBuilderParserRULE_do_while_loop_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1534)
		p.Match(PowerBuilderParserDO)
	}
	{
		p.SetState(1535)
		_la = p.GetTokenStream().LA(1)

		if !(_la == PowerBuilderParserWHILE || _la == PowerBuilderParserUNTIL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(1536)
		p.Boolean_expression()
	}
	p.SetState(1543)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<PowerBuilderParserANY)|(1<<PowerBuilderParserBLOB)|(1<<PowerBuilderParserBOOLEAN)|(1<<PowerBuilderParserBYTE)|(1<<PowerBuilderParserCHARACTER)|(1<<PowerBuilderParserCHAR)|(1<<PowerBuilderParserDATE_TYPE)|(1<<PowerBuilderParserDATETIME)|(1<<PowerBuilderParserDECIMAL)|(1<<PowerBuilderParserDEC)|(1<<PowerBuilderParserDOUBLE)|(1<<PowerBuilderParserINTEGER)|(1<<PowerBuilderParserINT)|(1<<PowerBuilderParserLONG)|(1<<PowerBuilderParserLONGLONG)|(1<<PowerBuilderParserREAL)|(1<<PowerBuilderParserSTRING)|(1<<PowerBuilderParserTIME_TYPE)|(1<<PowerBuilderParserUNSIGNEDINTEGER)|(1<<PowerBuilderParserUINT)|(1<<PowerBuilderParserUNSIGNEDLONG)|(1<<PowerBuilderParserULONG)|(1<<PowerBuilderParserWINDOW)|(1<<PowerBuilderParserGLOBAL)|(1<<PowerBuilderParserINDIRECT))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(PowerBuilderParserPUBLIC-32))|(1<<(PowerBuilderParserPRIVATE-32))|(1<<(PowerBuilderParserFUNCTION-32))|(1<<(PowerBuilderParserREADONLY-32))|(1<<(PowerBuilderParserTYPE-32))|(1<<(PowerBuilderParserUPDATE-32))|(1<<(PowerBuilderParserDYNAMIC-32))|(1<<(PowerBuilderParserPRIVATEWRITE-32))|(1<<(PowerBuilderParserPROTECTED-32))|(1<<(PowerBuilderParserPRIVATEREAD-32))|(1<<(PowerBuilderParserPROTECTEDREAD-32))|(1<<(PowerBuilderParserPROTECTEDWRITE-32))|(1<<(PowerBuilderParserLOCAL-32))|(1<<(PowerBuilderParserEVENT-32))|(1<<(PowerBuilderParserOPEN-32))|(1<<(PowerBuilderParserGOTO-32))|(1<<(PowerBuilderParserIF-32))|(1<<(PowerBuilderParserTRY-32))|(1<<(PowerBuilderParserEXIT-32))|(1<<(PowerBuilderParserCHOOSE-32)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(PowerBuilderParserCONTINUE-65))|(1<<(PowerBuilderParserDO-65))|(1<<(PowerBuilderParserFOR-65))|(1<<(PowerBuilderParserCLOSE-65))|(1<<(PowerBuilderParserTHROW-65))|(1<<(PowerBuilderParserCREATE-65))|(1<<(PowerBuilderParserDESTROY-65))|(1<<(PowerBuilderParserPOST-65))|(1<<(PowerBuilderParserTRIGGER-65))|(1<<(PowerBuilderParserSELECT-65))|(1<<(PowerBuilderParserDELETE-65))|(1<<(PowerBuilderParserINSERT-65))|(1<<(PowerBuilderParserDESCRIBE-65))|(1<<(PowerBuilderParserRETURN-65))|(1<<(PowerBuilderParserCALL-65))|(1<<(PowerBuilderParserHALT-65))|(1<<(PowerBuilderParserSUPER-65))|(1<<(PowerBuilderParserSYSTEM-65)))) != 0) || (((_la-101)&-(0x1f+1)) == 0 && ((1<<uint((_la-101)))&((1<<(PowerBuilderParserSQLCA-101))|(1<<(PowerBuilderParserEXECUTE-101))|(1<<(PowerBuilderParserDECLARE-101))|(1<<(PowerBuilderParserVALUES-101))|(1<<(PowerBuilderParserCOMMIT-101))|(1<<(PowerBuilderParserPREPARE-101))|(1<<(PowerBuilderParserFETCH-101))|(1<<(PowerBuilderParserCONNECT-101))|(1<<(PowerBuilderParserDISCONNECT-101))|(1<<(PowerBuilderParserCONSTANT-101))|(1<<(PowerBuilderParserSELECTBLOB-101))|(1<<(PowerBuilderParserUPDATEBLOB-101))|(1<<(PowerBuilderParserROLLBACK-101))|(1<<(PowerBuilderParserCOLONCOLON-101)))) != 0) || (((_la-152)&-(0x1f+1)) == 0 && ((1<<uint((_la-152)))&((1<<(PowerBuilderParserAT-152))|(1<<(PowerBuilderParserUNDERSCORE-152))|(1<<(PowerBuilderParserID-152)))) != 0) {
		{
			p.SetState(1537)
			p.Statement()
		}
		p.SetState(1539)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PowerBuilderParserSEMI {
			{
				p.SetState(1538)
				p.Match(PowerBuilderParserSEMI)
			}

		}

		p.SetState(1545)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1546)
		p.Match(PowerBuilderParserLOOP)
	}

	return localctx
}

// IDo_loop_while_statementContext is an interface to support dynamic dispatch.
type IDo_loop_while_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDo_loop_while_statementContext differentiates from other interfaces.
	IsDo_loop_while_statementContext()
}

type Do_loop_while_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDo_loop_while_statementContext() *Do_loop_while_statementContext {
	var p = new(Do_loop_while_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_do_loop_while_statement
	return p
}

func (*Do_loop_while_statementContext) IsDo_loop_while_statementContext() {}

func NewDo_loop_while_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Do_loop_while_statementContext {
	var p = new(Do_loop_while_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_do_loop_while_statement

	return p
}

func (s *Do_loop_while_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Do_loop_while_statementContext) DO() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserDO, 0)
}

func (s *Do_loop_while_statementContext) LOOP() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserLOOP, 0)
}

func (s *Do_loop_while_statementContext) Boolean_expression() IBoolean_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBoolean_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBoolean_expressionContext)
}

func (s *Do_loop_while_statementContext) WHILE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserWHILE, 0)
}

func (s *Do_loop_while_statementContext) UNTIL() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserUNTIL, 0)
}

func (s *Do_loop_while_statementContext) AllStatement() []IStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatementContext)(nil)).Elem())
	var tst = make([]IStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatementContext)
		}
	}

	return tst
}

func (s *Do_loop_while_statementContext) Statement(i int) IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *Do_loop_while_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Do_loop_while_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Do_loop_while_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterDo_loop_while_statement(s)
	}
}

func (s *Do_loop_while_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitDo_loop_while_statement(s)
	}
}

func (p *PowerBuilderParser) Do_loop_while_statement() (localctx IDo_loop_while_statementContext) {
	this := p
	_ = this

	localctx = NewDo_loop_while_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 180, PowerBuilderParserRULE_do_loop_while_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1548)
		p.Match(PowerBuilderParserDO)
	}
	p.SetState(1552)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<PowerBuilderParserANY)|(1<<PowerBuilderParserBLOB)|(1<<PowerBuilderParserBOOLEAN)|(1<<PowerBuilderParserBYTE)|(1<<PowerBuilderParserCHARACTER)|(1<<PowerBuilderParserCHAR)|(1<<PowerBuilderParserDATE_TYPE)|(1<<PowerBuilderParserDATETIME)|(1<<PowerBuilderParserDECIMAL)|(1<<PowerBuilderParserDEC)|(1<<PowerBuilderParserDOUBLE)|(1<<PowerBuilderParserINTEGER)|(1<<PowerBuilderParserINT)|(1<<PowerBuilderParserLONG)|(1<<PowerBuilderParserLONGLONG)|(1<<PowerBuilderParserREAL)|(1<<PowerBuilderParserSTRING)|(1<<PowerBuilderParserTIME_TYPE)|(1<<PowerBuilderParserUNSIGNEDINTEGER)|(1<<PowerBuilderParserUINT)|(1<<PowerBuilderParserUNSIGNEDLONG)|(1<<PowerBuilderParserULONG)|(1<<PowerBuilderParserWINDOW)|(1<<PowerBuilderParserGLOBAL)|(1<<PowerBuilderParserINDIRECT))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(PowerBuilderParserPUBLIC-32))|(1<<(PowerBuilderParserPRIVATE-32))|(1<<(PowerBuilderParserFUNCTION-32))|(1<<(PowerBuilderParserREADONLY-32))|(1<<(PowerBuilderParserTYPE-32))|(1<<(PowerBuilderParserUPDATE-32))|(1<<(PowerBuilderParserDYNAMIC-32))|(1<<(PowerBuilderParserPRIVATEWRITE-32))|(1<<(PowerBuilderParserPROTECTED-32))|(1<<(PowerBuilderParserPRIVATEREAD-32))|(1<<(PowerBuilderParserPROTECTEDREAD-32))|(1<<(PowerBuilderParserPROTECTEDWRITE-32))|(1<<(PowerBuilderParserLOCAL-32))|(1<<(PowerBuilderParserEVENT-32))|(1<<(PowerBuilderParserOPEN-32))|(1<<(PowerBuilderParserGOTO-32))|(1<<(PowerBuilderParserIF-32))|(1<<(PowerBuilderParserTRY-32))|(1<<(PowerBuilderParserEXIT-32))|(1<<(PowerBuilderParserCHOOSE-32)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(PowerBuilderParserCONTINUE-65))|(1<<(PowerBuilderParserDO-65))|(1<<(PowerBuilderParserFOR-65))|(1<<(PowerBuilderParserCLOSE-65))|(1<<(PowerBuilderParserTHROW-65))|(1<<(PowerBuilderParserCREATE-65))|(1<<(PowerBuilderParserDESTROY-65))|(1<<(PowerBuilderParserPOST-65))|(1<<(PowerBuilderParserTRIGGER-65))|(1<<(PowerBuilderParserSELECT-65))|(1<<(PowerBuilderParserDELETE-65))|(1<<(PowerBuilderParserINSERT-65))|(1<<(PowerBuilderParserDESCRIBE-65))|(1<<(PowerBuilderParserRETURN-65))|(1<<(PowerBuilderParserCALL-65))|(1<<(PowerBuilderParserHALT-65))|(1<<(PowerBuilderParserSUPER-65))|(1<<(PowerBuilderParserSYSTEM-65)))) != 0) || (((_la-101)&-(0x1f+1)) == 0 && ((1<<uint((_la-101)))&((1<<(PowerBuilderParserSQLCA-101))|(1<<(PowerBuilderParserEXECUTE-101))|(1<<(PowerBuilderParserDECLARE-101))|(1<<(PowerBuilderParserVALUES-101))|(1<<(PowerBuilderParserCOMMIT-101))|(1<<(PowerBuilderParserPREPARE-101))|(1<<(PowerBuilderParserFETCH-101))|(1<<(PowerBuilderParserCONNECT-101))|(1<<(PowerBuilderParserDISCONNECT-101))|(1<<(PowerBuilderParserCONSTANT-101))|(1<<(PowerBuilderParserSELECTBLOB-101))|(1<<(PowerBuilderParserUPDATEBLOB-101))|(1<<(PowerBuilderParserROLLBACK-101))|(1<<(PowerBuilderParserCOLONCOLON-101)))) != 0) || (((_la-152)&-(0x1f+1)) == 0 && ((1<<uint((_la-152)))&((1<<(PowerBuilderParserAT-152))|(1<<(PowerBuilderParserUNDERSCORE-152))|(1<<(PowerBuilderParserID-152)))) != 0) {
		{
			p.SetState(1549)
			p.Statement()
		}

		p.SetState(1554)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1555)
		p.Match(PowerBuilderParserLOOP)
	}
	{
		p.SetState(1556)
		_la = p.GetTokenStream().LA(1)

		if !(_la == PowerBuilderParserWHILE || _la == PowerBuilderParserUNTIL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(1557)
		p.Boolean_expression()
	}

	return localctx
}

// IIf_statementContext is an interface to support dynamic dispatch.
type IIf_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIf_statementContext differentiates from other interfaces.
	IsIf_statementContext()
}

type If_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIf_statementContext() *If_statementContext {
	var p = new(If_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_if_statement
	return p
}

func (*If_statementContext) IsIf_statementContext() {}

func NewIf_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *If_statementContext {
	var p = new(If_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_if_statement

	return p
}

func (s *If_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *If_statementContext) AllIF() []antlr.TerminalNode {
	return s.GetTokens(PowerBuilderParserIF)
}

func (s *If_statementContext) IF(i int) antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserIF, i)
}

func (s *If_statementContext) Boolean_expression() IBoolean_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBoolean_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBoolean_expressionContext)
}

func (s *If_statementContext) THEN() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserTHEN, 0)
}

func (s *If_statementContext) END() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserEND, 0)
}

func (s *If_statementContext) AllStatement() []IStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatementContext)(nil)).Elem())
	var tst = make([]IStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatementContext)
		}
	}

	return tst
}

func (s *If_statementContext) Statement(i int) IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *If_statementContext) AllElseif_statement() []IElseif_statementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IElseif_statementContext)(nil)).Elem())
	var tst = make([]IElseif_statementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IElseif_statementContext)
		}
	}

	return tst
}

func (s *If_statementContext) Elseif_statement(i int) IElseif_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElseif_statementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IElseif_statementContext)
}

func (s *If_statementContext) Else_statement() IElse_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElse_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElse_statementContext)
}

func (s *If_statementContext) AllSEMI() []antlr.TerminalNode {
	return s.GetTokens(PowerBuilderParserSEMI)
}

func (s *If_statementContext) SEMI(i int) antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserSEMI, i)
}

func (s *If_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *If_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *If_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterIf_statement(s)
	}
}

func (s *If_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitIf_statement(s)
	}
}

func (p *PowerBuilderParser) If_statement() (localctx IIf_statementContext) {
	this := p
	_ = this

	localctx = NewIf_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 182, PowerBuilderParserRULE_if_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1559)
		p.Match(PowerBuilderParserIF)
	}
	{
		p.SetState(1560)
		p.Boolean_expression()
	}
	{
		p.SetState(1561)
		p.Match(PowerBuilderParserTHEN)
	}
	p.SetState(1568)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<PowerBuilderParserANY)|(1<<PowerBuilderParserBLOB)|(1<<PowerBuilderParserBOOLEAN)|(1<<PowerBuilderParserBYTE)|(1<<PowerBuilderParserCHARACTER)|(1<<PowerBuilderParserCHAR)|(1<<PowerBuilderParserDATE_TYPE)|(1<<PowerBuilderParserDATETIME)|(1<<PowerBuilderParserDECIMAL)|(1<<PowerBuilderParserDEC)|(1<<PowerBuilderParserDOUBLE)|(1<<PowerBuilderParserINTEGER)|(1<<PowerBuilderParserINT)|(1<<PowerBuilderParserLONG)|(1<<PowerBuilderParserLONGLONG)|(1<<PowerBuilderParserREAL)|(1<<PowerBuilderParserSTRING)|(1<<PowerBuilderParserTIME_TYPE)|(1<<PowerBuilderParserUNSIGNEDINTEGER)|(1<<PowerBuilderParserUINT)|(1<<PowerBuilderParserUNSIGNEDLONG)|(1<<PowerBuilderParserULONG)|(1<<PowerBuilderParserWINDOW)|(1<<PowerBuilderParserGLOBAL)|(1<<PowerBuilderParserINDIRECT))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(PowerBuilderParserPUBLIC-32))|(1<<(PowerBuilderParserPRIVATE-32))|(1<<(PowerBuilderParserFUNCTION-32))|(1<<(PowerBuilderParserREADONLY-32))|(1<<(PowerBuilderParserTYPE-32))|(1<<(PowerBuilderParserUPDATE-32))|(1<<(PowerBuilderParserDYNAMIC-32))|(1<<(PowerBuilderParserPRIVATEWRITE-32))|(1<<(PowerBuilderParserPROTECTED-32))|(1<<(PowerBuilderParserPRIVATEREAD-32))|(1<<(PowerBuilderParserPROTECTEDREAD-32))|(1<<(PowerBuilderParserPROTECTEDWRITE-32))|(1<<(PowerBuilderParserLOCAL-32))|(1<<(PowerBuilderParserEVENT-32))|(1<<(PowerBuilderParserOPEN-32))|(1<<(PowerBuilderParserGOTO-32))|(1<<(PowerBuilderParserIF-32))|(1<<(PowerBuilderParserTRY-32))|(1<<(PowerBuilderParserEXIT-32))|(1<<(PowerBuilderParserCHOOSE-32)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(PowerBuilderParserCONTINUE-65))|(1<<(PowerBuilderParserDO-65))|(1<<(PowerBuilderParserFOR-65))|(1<<(PowerBuilderParserCLOSE-65))|(1<<(PowerBuilderParserTHROW-65))|(1<<(PowerBuilderParserCREATE-65))|(1<<(PowerBuilderParserDESTROY-65))|(1<<(PowerBuilderParserPOST-65))|(1<<(PowerBuilderParserTRIGGER-65))|(1<<(PowerBuilderParserSELECT-65))|(1<<(PowerBuilderParserDELETE-65))|(1<<(PowerBuilderParserINSERT-65))|(1<<(PowerBuilderParserDESCRIBE-65))|(1<<(PowerBuilderParserRETURN-65))|(1<<(PowerBuilderParserCALL-65))|(1<<(PowerBuilderParserHALT-65))|(1<<(PowerBuilderParserSUPER-65))|(1<<(PowerBuilderParserSYSTEM-65)))) != 0) || (((_la-101)&-(0x1f+1)) == 0 && ((1<<uint((_la-101)))&((1<<(PowerBuilderParserSQLCA-101))|(1<<(PowerBuilderParserEXECUTE-101))|(1<<(PowerBuilderParserDECLARE-101))|(1<<(PowerBuilderParserVALUES-101))|(1<<(PowerBuilderParserCOMMIT-101))|(1<<(PowerBuilderParserPREPARE-101))|(1<<(PowerBuilderParserFETCH-101))|(1<<(PowerBuilderParserCONNECT-101))|(1<<(PowerBuilderParserDISCONNECT-101))|(1<<(PowerBuilderParserCONSTANT-101))|(1<<(PowerBuilderParserSELECTBLOB-101))|(1<<(PowerBuilderParserUPDATEBLOB-101))|(1<<(PowerBuilderParserROLLBACK-101))|(1<<(PowerBuilderParserCOLONCOLON-101)))) != 0) || (((_la-152)&-(0x1f+1)) == 0 && ((1<<uint((_la-152)))&((1<<(PowerBuilderParserAT-152))|(1<<(PowerBuilderParserUNDERSCORE-152))|(1<<(PowerBuilderParserID-152)))) != 0) {
		{
			p.SetState(1562)
			p.Statement()
		}
		p.SetState(1564)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PowerBuilderParserSEMI {
			{
				p.SetState(1563)
				p.Match(PowerBuilderParserSEMI)
			}

		}

		p.SetState(1570)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(1574)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == PowerBuilderParserELSEIF {
		{
			p.SetState(1571)
			p.Elseif_statement()
		}

		p.SetState(1576)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(1578)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PowerBuilderParserELSE {
		{
			p.SetState(1577)
			p.Else_statement()
		}

	}
	{
		p.SetState(1580)
		p.Match(PowerBuilderParserEND)
	}
	{
		p.SetState(1581)
		p.Match(PowerBuilderParserIF)
	}
	p.SetState(1583)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 231, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1582)
			p.Match(PowerBuilderParserSEMI)
		}

	}

	return localctx
}

// IElseif_statementContext is an interface to support dynamic dispatch.
type IElseif_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsElseif_statementContext differentiates from other interfaces.
	IsElseif_statementContext()
}

type Elseif_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyElseif_statementContext() *Elseif_statementContext {
	var p = new(Elseif_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_elseif_statement
	return p
}

func (*Elseif_statementContext) IsElseif_statementContext() {}

func NewElseif_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Elseif_statementContext {
	var p = new(Elseif_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_elseif_statement

	return p
}

func (s *Elseif_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Elseif_statementContext) ELSEIF() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserELSEIF, 0)
}

func (s *Elseif_statementContext) Boolean_expression() IBoolean_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBoolean_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBoolean_expressionContext)
}

func (s *Elseif_statementContext) THEN() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserTHEN, 0)
}

func (s *Elseif_statementContext) AllStatement() []IStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatementContext)(nil)).Elem())
	var tst = make([]IStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatementContext)
		}
	}

	return tst
}

func (s *Elseif_statementContext) Statement(i int) IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *Elseif_statementContext) AllSEMI() []antlr.TerminalNode {
	return s.GetTokens(PowerBuilderParserSEMI)
}

func (s *Elseif_statementContext) SEMI(i int) antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserSEMI, i)
}

func (s *Elseif_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Elseif_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Elseif_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterElseif_statement(s)
	}
}

func (s *Elseif_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitElseif_statement(s)
	}
}

func (p *PowerBuilderParser) Elseif_statement() (localctx IElseif_statementContext) {
	this := p
	_ = this

	localctx = NewElseif_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 184, PowerBuilderParserRULE_elseif_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1585)
		p.Match(PowerBuilderParserELSEIF)
	}
	{
		p.SetState(1586)
		p.Boolean_expression()
	}
	{
		p.SetState(1587)
		p.Match(PowerBuilderParserTHEN)
	}
	p.SetState(1594)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<PowerBuilderParserANY)|(1<<PowerBuilderParserBLOB)|(1<<PowerBuilderParserBOOLEAN)|(1<<PowerBuilderParserBYTE)|(1<<PowerBuilderParserCHARACTER)|(1<<PowerBuilderParserCHAR)|(1<<PowerBuilderParserDATE_TYPE)|(1<<PowerBuilderParserDATETIME)|(1<<PowerBuilderParserDECIMAL)|(1<<PowerBuilderParserDEC)|(1<<PowerBuilderParserDOUBLE)|(1<<PowerBuilderParserINTEGER)|(1<<PowerBuilderParserINT)|(1<<PowerBuilderParserLONG)|(1<<PowerBuilderParserLONGLONG)|(1<<PowerBuilderParserREAL)|(1<<PowerBuilderParserSTRING)|(1<<PowerBuilderParserTIME_TYPE)|(1<<PowerBuilderParserUNSIGNEDINTEGER)|(1<<PowerBuilderParserUINT)|(1<<PowerBuilderParserUNSIGNEDLONG)|(1<<PowerBuilderParserULONG)|(1<<PowerBuilderParserWINDOW)|(1<<PowerBuilderParserGLOBAL)|(1<<PowerBuilderParserINDIRECT))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(PowerBuilderParserPUBLIC-32))|(1<<(PowerBuilderParserPRIVATE-32))|(1<<(PowerBuilderParserFUNCTION-32))|(1<<(PowerBuilderParserREADONLY-32))|(1<<(PowerBuilderParserTYPE-32))|(1<<(PowerBuilderParserUPDATE-32))|(1<<(PowerBuilderParserDYNAMIC-32))|(1<<(PowerBuilderParserPRIVATEWRITE-32))|(1<<(PowerBuilderParserPROTECTED-32))|(1<<(PowerBuilderParserPRIVATEREAD-32))|(1<<(PowerBuilderParserPROTECTEDREAD-32))|(1<<(PowerBuilderParserPROTECTEDWRITE-32))|(1<<(PowerBuilderParserLOCAL-32))|(1<<(PowerBuilderParserEVENT-32))|(1<<(PowerBuilderParserOPEN-32))|(1<<(PowerBuilderParserGOTO-32))|(1<<(PowerBuilderParserIF-32))|(1<<(PowerBuilderParserTRY-32))|(1<<(PowerBuilderParserEXIT-32))|(1<<(PowerBuilderParserCHOOSE-32)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(PowerBuilderParserCONTINUE-65))|(1<<(PowerBuilderParserDO-65))|(1<<(PowerBuilderParserFOR-65))|(1<<(PowerBuilderParserCLOSE-65))|(1<<(PowerBuilderParserTHROW-65))|(1<<(PowerBuilderParserCREATE-65))|(1<<(PowerBuilderParserDESTROY-65))|(1<<(PowerBuilderParserPOST-65))|(1<<(PowerBuilderParserTRIGGER-65))|(1<<(PowerBuilderParserSELECT-65))|(1<<(PowerBuilderParserDELETE-65))|(1<<(PowerBuilderParserINSERT-65))|(1<<(PowerBuilderParserDESCRIBE-65))|(1<<(PowerBuilderParserRETURN-65))|(1<<(PowerBuilderParserCALL-65))|(1<<(PowerBuilderParserHALT-65))|(1<<(PowerBuilderParserSUPER-65))|(1<<(PowerBuilderParserSYSTEM-65)))) != 0) || (((_la-101)&-(0x1f+1)) == 0 && ((1<<uint((_la-101)))&((1<<(PowerBuilderParserSQLCA-101))|(1<<(PowerBuilderParserEXECUTE-101))|(1<<(PowerBuilderParserDECLARE-101))|(1<<(PowerBuilderParserVALUES-101))|(1<<(PowerBuilderParserCOMMIT-101))|(1<<(PowerBuilderParserPREPARE-101))|(1<<(PowerBuilderParserFETCH-101))|(1<<(PowerBuilderParserCONNECT-101))|(1<<(PowerBuilderParserDISCONNECT-101))|(1<<(PowerBuilderParserCONSTANT-101))|(1<<(PowerBuilderParserSELECTBLOB-101))|(1<<(PowerBuilderParserUPDATEBLOB-101))|(1<<(PowerBuilderParserROLLBACK-101))|(1<<(PowerBuilderParserCOLONCOLON-101)))) != 0) || (((_la-152)&-(0x1f+1)) == 0 && ((1<<uint((_la-152)))&((1<<(PowerBuilderParserAT-152))|(1<<(PowerBuilderParserUNDERSCORE-152))|(1<<(PowerBuilderParserID-152)))) != 0) {
		{
			p.SetState(1588)
			p.Statement()
		}
		p.SetState(1590)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PowerBuilderParserSEMI {
			{
				p.SetState(1589)
				p.Match(PowerBuilderParserSEMI)
			}

		}

		p.SetState(1596)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IElse_statementContext is an interface to support dynamic dispatch.
type IElse_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsElse_statementContext differentiates from other interfaces.
	IsElse_statementContext()
}

type Else_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyElse_statementContext() *Else_statementContext {
	var p = new(Else_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_else_statement
	return p
}

func (*Else_statementContext) IsElse_statementContext() {}

func NewElse_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Else_statementContext {
	var p = new(Else_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_else_statement

	return p
}

func (s *Else_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Else_statementContext) ELSE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserELSE, 0)
}

func (s *Else_statementContext) AllStatement() []IStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatementContext)(nil)).Elem())
	var tst = make([]IStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatementContext)
		}
	}

	return tst
}

func (s *Else_statementContext) Statement(i int) IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *Else_statementContext) AllSEMI() []antlr.TerminalNode {
	return s.GetTokens(PowerBuilderParserSEMI)
}

func (s *Else_statementContext) SEMI(i int) antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserSEMI, i)
}

func (s *Else_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Else_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Else_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterElse_statement(s)
	}
}

func (s *Else_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitElse_statement(s)
	}
}

func (p *PowerBuilderParser) Else_statement() (localctx IElse_statementContext) {
	this := p
	_ = this

	localctx = NewElse_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 186, PowerBuilderParserRULE_else_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1597)
		p.Match(PowerBuilderParserELSE)
	}
	p.SetState(1604)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<PowerBuilderParserANY)|(1<<PowerBuilderParserBLOB)|(1<<PowerBuilderParserBOOLEAN)|(1<<PowerBuilderParserBYTE)|(1<<PowerBuilderParserCHARACTER)|(1<<PowerBuilderParserCHAR)|(1<<PowerBuilderParserDATE_TYPE)|(1<<PowerBuilderParserDATETIME)|(1<<PowerBuilderParserDECIMAL)|(1<<PowerBuilderParserDEC)|(1<<PowerBuilderParserDOUBLE)|(1<<PowerBuilderParserINTEGER)|(1<<PowerBuilderParserINT)|(1<<PowerBuilderParserLONG)|(1<<PowerBuilderParserLONGLONG)|(1<<PowerBuilderParserREAL)|(1<<PowerBuilderParserSTRING)|(1<<PowerBuilderParserTIME_TYPE)|(1<<PowerBuilderParserUNSIGNEDINTEGER)|(1<<PowerBuilderParserUINT)|(1<<PowerBuilderParserUNSIGNEDLONG)|(1<<PowerBuilderParserULONG)|(1<<PowerBuilderParserWINDOW)|(1<<PowerBuilderParserGLOBAL)|(1<<PowerBuilderParserINDIRECT))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(PowerBuilderParserPUBLIC-32))|(1<<(PowerBuilderParserPRIVATE-32))|(1<<(PowerBuilderParserFUNCTION-32))|(1<<(PowerBuilderParserREADONLY-32))|(1<<(PowerBuilderParserTYPE-32))|(1<<(PowerBuilderParserUPDATE-32))|(1<<(PowerBuilderParserDYNAMIC-32))|(1<<(PowerBuilderParserPRIVATEWRITE-32))|(1<<(PowerBuilderParserPROTECTED-32))|(1<<(PowerBuilderParserPRIVATEREAD-32))|(1<<(PowerBuilderParserPROTECTEDREAD-32))|(1<<(PowerBuilderParserPROTECTEDWRITE-32))|(1<<(PowerBuilderParserLOCAL-32))|(1<<(PowerBuilderParserEVENT-32))|(1<<(PowerBuilderParserOPEN-32))|(1<<(PowerBuilderParserGOTO-32))|(1<<(PowerBuilderParserIF-32))|(1<<(PowerBuilderParserTRY-32))|(1<<(PowerBuilderParserEXIT-32))|(1<<(PowerBuilderParserCHOOSE-32)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(PowerBuilderParserCONTINUE-65))|(1<<(PowerBuilderParserDO-65))|(1<<(PowerBuilderParserFOR-65))|(1<<(PowerBuilderParserCLOSE-65))|(1<<(PowerBuilderParserTHROW-65))|(1<<(PowerBuilderParserCREATE-65))|(1<<(PowerBuilderParserDESTROY-65))|(1<<(PowerBuilderParserPOST-65))|(1<<(PowerBuilderParserTRIGGER-65))|(1<<(PowerBuilderParserSELECT-65))|(1<<(PowerBuilderParserDELETE-65))|(1<<(PowerBuilderParserINSERT-65))|(1<<(PowerBuilderParserDESCRIBE-65))|(1<<(PowerBuilderParserRETURN-65))|(1<<(PowerBuilderParserCALL-65))|(1<<(PowerBuilderParserHALT-65))|(1<<(PowerBuilderParserSUPER-65))|(1<<(PowerBuilderParserSYSTEM-65)))) != 0) || (((_la-101)&-(0x1f+1)) == 0 && ((1<<uint((_la-101)))&((1<<(PowerBuilderParserSQLCA-101))|(1<<(PowerBuilderParserEXECUTE-101))|(1<<(PowerBuilderParserDECLARE-101))|(1<<(PowerBuilderParserVALUES-101))|(1<<(PowerBuilderParserCOMMIT-101))|(1<<(PowerBuilderParserPREPARE-101))|(1<<(PowerBuilderParserFETCH-101))|(1<<(PowerBuilderParserCONNECT-101))|(1<<(PowerBuilderParserDISCONNECT-101))|(1<<(PowerBuilderParserCONSTANT-101))|(1<<(PowerBuilderParserSELECTBLOB-101))|(1<<(PowerBuilderParserUPDATEBLOB-101))|(1<<(PowerBuilderParserROLLBACK-101))|(1<<(PowerBuilderParserCOLONCOLON-101)))) != 0) || (((_la-152)&-(0x1f+1)) == 0 && ((1<<uint((_la-152)))&((1<<(PowerBuilderParserAT-152))|(1<<(PowerBuilderParserUNDERSCORE-152))|(1<<(PowerBuilderParserID-152)))) != 0) {
		{
			p.SetState(1598)
			p.Statement()
		}
		p.SetState(1600)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PowerBuilderParserSEMI {
			{
				p.SetState(1599)
				p.Match(PowerBuilderParserSEMI)
			}

		}

		p.SetState(1606)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IIf_simple_statementContext is an interface to support dynamic dispatch.
type IIf_simple_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIf_simple_statementContext differentiates from other interfaces.
	IsIf_simple_statementContext()
}

type If_simple_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIf_simple_statementContext() *If_simple_statementContext {
	var p = new(If_simple_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_if_simple_statement
	return p
}

func (*If_simple_statementContext) IsIf_simple_statementContext() {}

func NewIf_simple_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *If_simple_statementContext {
	var p = new(If_simple_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_if_simple_statement

	return p
}

func (s *If_simple_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *If_simple_statementContext) IF() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserIF, 0)
}

func (s *If_simple_statementContext) Boolean_expression() IBoolean_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBoolean_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBoolean_expressionContext)
}

func (s *If_simple_statementContext) THEN() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserTHEN, 0)
}

func (s *If_simple_statementContext) AllStatement() []IStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatementContext)(nil)).Elem())
	var tst = make([]IStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatementContext)
		}
	}

	return tst
}

func (s *If_simple_statementContext) Statement(i int) IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *If_simple_statementContext) ELSE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserELSE, 0)
}

func (s *If_simple_statementContext) SEMI() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserSEMI, 0)
}

func (s *If_simple_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *If_simple_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *If_simple_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterIf_simple_statement(s)
	}
}

func (s *If_simple_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitIf_simple_statement(s)
	}
}

func (p *PowerBuilderParser) If_simple_statement() (localctx IIf_simple_statementContext) {
	this := p
	_ = this

	localctx = NewIf_simple_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 188, PowerBuilderParserRULE_if_simple_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1607)
		p.Match(PowerBuilderParserIF)
	}
	{
		p.SetState(1608)
		p.Boolean_expression()
	}
	{
		p.SetState(1609)
		p.Match(PowerBuilderParserTHEN)
	}
	{
		p.SetState(1610)
		p.Statement()
	}
	p.SetState(1613)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 236, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1611)
			p.Match(PowerBuilderParserELSE)
		}
		{
			p.SetState(1612)
			p.Statement()
		}

	}
	p.SetState(1616)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 237, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1615)
			p.Match(PowerBuilderParserSEMI)
		}

	}

	return localctx
}

// IContinue_statementContext is an interface to support dynamic dispatch.
type IContinue_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsContinue_statementContext differentiates from other interfaces.
	IsContinue_statementContext()
}

type Continue_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyContinue_statementContext() *Continue_statementContext {
	var p = new(Continue_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_continue_statement
	return p
}

func (*Continue_statementContext) IsContinue_statementContext() {}

func NewContinue_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Continue_statementContext {
	var p = new(Continue_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_continue_statement

	return p
}

func (s *Continue_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Continue_statementContext) CONTINUE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserCONTINUE, 0)
}

func (s *Continue_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Continue_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Continue_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterContinue_statement(s)
	}
}

func (s *Continue_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitContinue_statement(s)
	}
}

func (p *PowerBuilderParser) Continue_statement() (localctx IContinue_statementContext) {
	this := p
	_ = this

	localctx = NewContinue_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 190, PowerBuilderParserRULE_continue_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1618)
		p.Match(PowerBuilderParserCONTINUE)
	}

	return localctx
}

// IContinue_subContext is an interface to support dynamic dispatch.
type IContinue_subContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsContinue_subContext differentiates from other interfaces.
	IsContinue_subContext()
}

type Continue_subContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyContinue_subContext() *Continue_subContext {
	var p = new(Continue_subContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_continue_sub
	return p
}

func (*Continue_subContext) IsContinue_subContext() {}

func NewContinue_subContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Continue_subContext {
	var p = new(Continue_subContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_continue_sub

	return p
}

func (s *Continue_subContext) GetParser() antlr.Parser { return s.parser }

func (s *Continue_subContext) CONTINUE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserCONTINUE, 0)
}

func (s *Continue_subContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Continue_subContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Continue_subContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterContinue_sub(s)
	}
}

func (s *Continue_subContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitContinue_sub(s)
	}
}

func (p *PowerBuilderParser) Continue_sub() (localctx IContinue_subContext) {
	this := p
	_ = this

	localctx = NewContinue_subContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 192, PowerBuilderParserRULE_continue_sub)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1620)
		p.Match(PowerBuilderParserCONTINUE)
	}

	return localctx
}

// IPost_eventContext is an interface to support dynamic dispatch.
type IPost_eventContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPost_eventContext differentiates from other interfaces.
	IsPost_eventContext()
}

type Post_eventContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPost_eventContext() *Post_eventContext {
	var p = new(Post_eventContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_post_event
	return p
}

func (*Post_eventContext) IsPost_eventContext() {}

func NewPost_eventContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Post_eventContext {
	var p = new(Post_eventContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_post_event

	return p
}

func (s *Post_eventContext) GetParser() antlr.Parser { return s.parser }

func (s *Post_eventContext) Identifier_name_ex() IIdentifier_name_exContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_name_exContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_name_exContext)
}

func (s *Post_eventContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserLPAREN, 0)
}

func (s *Post_eventContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserRPAREN, 0)
}

func (s *Post_eventContext) POST() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserPOST, 0)
}

func (s *Post_eventContext) TRIGGER() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserTRIGGER, 0)
}

func (s *Post_eventContext) Atom_sub_member1() IAtom_sub_member1Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAtom_sub_member1Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAtom_sub_member1Context)
}

func (s *Post_eventContext) DOT() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserDOT, 0)
}

func (s *Post_eventContext) EVENT() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserEVENT, 0)
}

func (s *Post_eventContext) Expression_list() IExpression_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_listContext)
}

func (s *Post_eventContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Post_eventContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Post_eventContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterPost_event(s)
	}
}

func (s *Post_eventContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitPost_event(s)
	}
}

func (p *PowerBuilderParser) Post_event() (localctx IPost_eventContext) {
	this := p
	_ = this

	localctx = NewPost_eventContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 194, PowerBuilderParserRULE_post_event)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1625)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-7)&-(0x1f+1)) == 0 && ((1<<uint((_la-7)))&((1<<(PowerBuilderParserDATE_TYPE-7))|(1<<(PowerBuilderParserTIME_TYPE-7))|(1<<(PowerBuilderParserWINDOW-7))|(1<<(PowerBuilderParserREADONLY-7))|(1<<(PowerBuilderParserTYPE-7)))) != 0) || (((_la-44)&-(0x1f+1)) == 0 && ((1<<uint((_la-44)))&((1<<(PowerBuilderParserUPDATE-44))|(1<<(PowerBuilderParserOPEN-44))|(1<<(PowerBuilderParserGOTO-44))|(1<<(PowerBuilderParserCLOSE-44)))) != 0) || (((_la-78)&-(0x1f+1)) == 0 && ((1<<uint((_la-78)))&((1<<(PowerBuilderParserCREATE-78))|(1<<(PowerBuilderParserSELECT-78))|(1<<(PowerBuilderParserDELETE-78))|(1<<(PowerBuilderParserINSERT-78))|(1<<(PowerBuilderParserSYSTEM-78))|(1<<(PowerBuilderParserSQLCA-78))|(1<<(PowerBuilderParserVALUES-78)))) != 0) || _la == PowerBuilderParserUNDERSCORE || _la == PowerBuilderParserID {
		{
			p.SetState(1622)
			p.Atom_sub_member1()
		}
		{
			p.SetState(1623)
			p.Match(PowerBuilderParserDOT)
		}

	}
	{
		p.SetState(1627)
		_la = p.GetTokenStream().LA(1)

		if !(_la == PowerBuilderParserPOST || _la == PowerBuilderParserTRIGGER) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(1629)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PowerBuilderParserEVENT {
		{
			p.SetState(1628)
			p.Match(PowerBuilderParserEVENT)
		}

	}
	{
		p.SetState(1631)
		p.Identifier_name_ex()
	}
	{
		p.SetState(1632)
		p.Match(PowerBuilderParserLPAREN)
	}
	p.SetState(1634)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<PowerBuilderParserANY)|(1<<PowerBuilderParserBLOB)|(1<<PowerBuilderParserBOOLEAN)|(1<<PowerBuilderParserBYTE)|(1<<PowerBuilderParserCHARACTER)|(1<<PowerBuilderParserCHAR)|(1<<PowerBuilderParserDATE_TYPE)|(1<<PowerBuilderParserDATETIME)|(1<<PowerBuilderParserDECIMAL)|(1<<PowerBuilderParserDEC)|(1<<PowerBuilderParserDOUBLE)|(1<<PowerBuilderParserINTEGER)|(1<<PowerBuilderParserINT)|(1<<PowerBuilderParserLONG)|(1<<PowerBuilderParserLONGLONG)|(1<<PowerBuilderParserREAL)|(1<<PowerBuilderParserSTRING)|(1<<PowerBuilderParserTIME_TYPE)|(1<<PowerBuilderParserUNSIGNEDINTEGER)|(1<<PowerBuilderParserUINT)|(1<<PowerBuilderParserUNSIGNEDLONG)|(1<<PowerBuilderParserULONG)|(1<<PowerBuilderParserWINDOW)|(1<<PowerBuilderParserTRUE)|(1<<PowerBuilderParserFALSE))) != 0) || (((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(PowerBuilderParserFUNCTION-34))|(1<<(PowerBuilderParserREADONLY-34))|(1<<(PowerBuilderParserTYPE-34))|(1<<(PowerBuilderParserREF-34))|(1<<(PowerBuilderParserUPDATE-34))|(1<<(PowerBuilderParserDYNAMIC-34))|(1<<(PowerBuilderParserEVENT-34))|(1<<(PowerBuilderParserOPEN-34))|(1<<(PowerBuilderParserGOTO-34)))) != 0) || (((_la-69)&-(0x1f+1)) == 0 && ((1<<uint((_la-69)))&((1<<(PowerBuilderParserCLOSE-69))|(1<<(PowerBuilderParserCREATE-69))|(1<<(PowerBuilderParserPOST-69))|(1<<(PowerBuilderParserSELECT-69))|(1<<(PowerBuilderParserDELETE-69))|(1<<(PowerBuilderParserINSERT-69))|(1<<(PowerBuilderParserDESCRIBE-69))|(1<<(PowerBuilderParserNOT-69))|(1<<(PowerBuilderParserHALT-69))|(1<<(PowerBuilderParserSYSTEM-69)))) != 0) || (((_la-101)&-(0x1f+1)) == 0 && ((1<<uint((_la-101)))&((1<<(PowerBuilderParserSQLCA-101))|(1<<(PowerBuilderParserVALUES-101))|(1<<(PowerBuilderParserPLUS-101))|(1<<(PowerBuilderParserMINUS-101))|(1<<(PowerBuilderParserCOLONCOLON-101)))) != 0) || (((_la-136)&-(0x1f+1)) == 0 && ((1<<uint((_la-136)))&((1<<(PowerBuilderParserLCURLY-136))|(1<<(PowerBuilderParserDQUOTED_STRING-136))|(1<<(PowerBuilderParserQUOTED_STRING-136))|(1<<(PowerBuilderParserLPAREN-136))|(1<<(PowerBuilderParserCOLON-136))|(1<<(PowerBuilderParserUNDERSCORE-136))|(1<<(PowerBuilderParserNUMBER-136))|(1<<(PowerBuilderParserDATE-136))|(1<<(PowerBuilderParserTIME-136))|(1<<(PowerBuilderParserENUM-136))|(1<<(PowerBuilderParserID-136)))) != 0) {
		{
			p.SetState(1633)
			p.Expression_list()
		}

	}
	{
		p.SetState(1636)
		p.Match(PowerBuilderParserRPAREN)
	}

	return localctx
}

// IExit_statementContext is an interface to support dynamic dispatch.
type IExit_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExit_statementContext differentiates from other interfaces.
	IsExit_statementContext()
}

type Exit_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExit_statementContext() *Exit_statementContext {
	var p = new(Exit_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_exit_statement
	return p
}

func (*Exit_statementContext) IsExit_statementContext() {}

func NewExit_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Exit_statementContext {
	var p = new(Exit_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_exit_statement

	return p
}

func (s *Exit_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Exit_statementContext) EXIT() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserEXIT, 0)
}

func (s *Exit_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Exit_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Exit_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterExit_statement(s)
	}
}

func (s *Exit_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitExit_statement(s)
	}
}

func (p *PowerBuilderParser) Exit_statement() (localctx IExit_statementContext) {
	this := p
	_ = this

	localctx = NewExit_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 196, PowerBuilderParserRULE_exit_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1638)
		p.Match(PowerBuilderParserEXIT)
	}

	return localctx
}

// IChoose_statementContext is an interface to support dynamic dispatch.
type IChoose_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsChoose_statementContext differentiates from other interfaces.
	IsChoose_statementContext()
}

type Choose_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyChoose_statementContext() *Choose_statementContext {
	var p = new(Choose_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_choose_statement
	return p
}

func (*Choose_statementContext) IsChoose_statementContext() {}

func NewChoose_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Choose_statementContext {
	var p = new(Choose_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_choose_statement

	return p
}

func (s *Choose_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Choose_statementContext) AllCHOOSE() []antlr.TerminalNode {
	return s.GetTokens(PowerBuilderParserCHOOSE)
}

func (s *Choose_statementContext) CHOOSE(i int) antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserCHOOSE, i)
}

func (s *Choose_statementContext) CASE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserCASE, 0)
}

func (s *Choose_statementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Choose_statementContext) END() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserEND, 0)
}

func (s *Choose_statementContext) AllChoose_case_cond_sub() []IChoose_case_cond_subContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IChoose_case_cond_subContext)(nil)).Elem())
	var tst = make([]IChoose_case_cond_subContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IChoose_case_cond_subContext)
		}
	}

	return tst
}

func (s *Choose_statementContext) Choose_case_cond_sub(i int) IChoose_case_cond_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IChoose_case_cond_subContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IChoose_case_cond_subContext)
}

func (s *Choose_statementContext) AllChoose_case_else_sub() []IChoose_case_else_subContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IChoose_case_else_subContext)(nil)).Elem())
	var tst = make([]IChoose_case_else_subContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IChoose_case_else_subContext)
		}
	}

	return tst
}

func (s *Choose_statementContext) Choose_case_else_sub(i int) IChoose_case_else_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IChoose_case_else_subContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IChoose_case_else_subContext)
}

func (s *Choose_statementContext) AllChoose_case_value_sub() []IChoose_case_value_subContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IChoose_case_value_subContext)(nil)).Elem())
	var tst = make([]IChoose_case_value_subContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IChoose_case_value_subContext)
		}
	}

	return tst
}

func (s *Choose_statementContext) Choose_case_value_sub(i int) IChoose_case_value_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IChoose_case_value_subContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IChoose_case_value_subContext)
}

func (s *Choose_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Choose_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Choose_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterChoose_statement(s)
	}
}

func (s *Choose_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitChoose_statement(s)
	}
}

func (p *PowerBuilderParser) Choose_statement() (localctx IChoose_statementContext) {
	this := p
	_ = this

	localctx = NewChoose_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 198, PowerBuilderParserRULE_choose_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1640)
		p.Match(PowerBuilderParserCHOOSE)
	}
	{
		p.SetState(1641)
		p.Match(PowerBuilderParserCASE)
	}
	{
		p.SetState(1642)
		p.expression(0)
	}
	p.SetState(1646)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == PowerBuilderParserCASE {
		p.SetState(1646)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 241, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(1643)
				p.Choose_case_cond_sub()
			}

		case 2:
			{
				p.SetState(1644)
				p.Choose_case_else_sub()
			}

		case 3:
			{
				p.SetState(1645)
				p.Choose_case_value_sub()
			}

		}

		p.SetState(1648)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1650)
		p.Match(PowerBuilderParserEND)
	}
	{
		p.SetState(1651)
		p.Match(PowerBuilderParserCHOOSE)
	}

	return localctx
}

// IChoose_case_value_subContext is an interface to support dynamic dispatch.
type IChoose_case_value_subContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsChoose_case_value_subContext differentiates from other interfaces.
	IsChoose_case_value_subContext()
}

type Choose_case_value_subContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyChoose_case_value_subContext() *Choose_case_value_subContext {
	var p = new(Choose_case_value_subContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_choose_case_value_sub
	return p
}

func (*Choose_case_value_subContext) IsChoose_case_value_subContext() {}

func NewChoose_case_value_subContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Choose_case_value_subContext {
	var p = new(Choose_case_value_subContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_choose_case_value_sub

	return p
}

func (s *Choose_case_value_subContext) GetParser() antlr.Parser { return s.parser }

func (s *Choose_case_value_subContext) CASE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserCASE, 0)
}

func (s *Choose_case_value_subContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *Choose_case_value_subContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Choose_case_value_subContext) AllTO() []antlr.TerminalNode {
	return s.GetTokens(PowerBuilderParserTO)
}

func (s *Choose_case_value_subContext) TO(i int) antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserTO, i)
}

func (s *Choose_case_value_subContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PowerBuilderParserCOMMA)
}

func (s *Choose_case_value_subContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserCOMMA, i)
}

func (s *Choose_case_value_subContext) AllStatement() []IStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatementContext)(nil)).Elem())
	var tst = make([]IStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatementContext)
		}
	}

	return tst
}

func (s *Choose_case_value_subContext) Statement(i int) IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *Choose_case_value_subContext) AllSEMI() []antlr.TerminalNode {
	return s.GetTokens(PowerBuilderParserSEMI)
}

func (s *Choose_case_value_subContext) SEMI(i int) antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserSEMI, i)
}

func (s *Choose_case_value_subContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Choose_case_value_subContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Choose_case_value_subContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterChoose_case_value_sub(s)
	}
}

func (s *Choose_case_value_subContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitChoose_case_value_sub(s)
	}
}

func (p *PowerBuilderParser) Choose_case_value_sub() (localctx IChoose_case_value_subContext) {
	this := p
	_ = this

	localctx = NewChoose_case_value_subContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 200, PowerBuilderParserRULE_choose_case_value_sub)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1653)
		p.Match(PowerBuilderParserCASE)
	}
	{
		p.SetState(1654)
		p.expression(0)
	}
	p.SetState(1657)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PowerBuilderParserTO {
		{
			p.SetState(1655)
			p.Match(PowerBuilderParserTO)
		}
		{
			p.SetState(1656)
			p.expression(0)
		}

	}
	p.SetState(1667)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == PowerBuilderParserCOMMA {
		{
			p.SetState(1659)
			p.Match(PowerBuilderParserCOMMA)
		}
		{
			p.SetState(1660)
			p.expression(0)
		}
		p.SetState(1663)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PowerBuilderParserTO {
			{
				p.SetState(1661)
				p.Match(PowerBuilderParserTO)
			}
			{
				p.SetState(1662)
				p.expression(0)
			}

		}

		p.SetState(1669)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(1676)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<PowerBuilderParserANY)|(1<<PowerBuilderParserBLOB)|(1<<PowerBuilderParserBOOLEAN)|(1<<PowerBuilderParserBYTE)|(1<<PowerBuilderParserCHARACTER)|(1<<PowerBuilderParserCHAR)|(1<<PowerBuilderParserDATE_TYPE)|(1<<PowerBuilderParserDATETIME)|(1<<PowerBuilderParserDECIMAL)|(1<<PowerBuilderParserDEC)|(1<<PowerBuilderParserDOUBLE)|(1<<PowerBuilderParserINTEGER)|(1<<PowerBuilderParserINT)|(1<<PowerBuilderParserLONG)|(1<<PowerBuilderParserLONGLONG)|(1<<PowerBuilderParserREAL)|(1<<PowerBuilderParserSTRING)|(1<<PowerBuilderParserTIME_TYPE)|(1<<PowerBuilderParserUNSIGNEDINTEGER)|(1<<PowerBuilderParserUINT)|(1<<PowerBuilderParserUNSIGNEDLONG)|(1<<PowerBuilderParserULONG)|(1<<PowerBuilderParserWINDOW)|(1<<PowerBuilderParserGLOBAL)|(1<<PowerBuilderParserINDIRECT))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(PowerBuilderParserPUBLIC-32))|(1<<(PowerBuilderParserPRIVATE-32))|(1<<(PowerBuilderParserFUNCTION-32))|(1<<(PowerBuilderParserREADONLY-32))|(1<<(PowerBuilderParserTYPE-32))|(1<<(PowerBuilderParserUPDATE-32))|(1<<(PowerBuilderParserDYNAMIC-32))|(1<<(PowerBuilderParserPRIVATEWRITE-32))|(1<<(PowerBuilderParserPROTECTED-32))|(1<<(PowerBuilderParserPRIVATEREAD-32))|(1<<(PowerBuilderParserPROTECTEDREAD-32))|(1<<(PowerBuilderParserPROTECTEDWRITE-32))|(1<<(PowerBuilderParserLOCAL-32))|(1<<(PowerBuilderParserEVENT-32))|(1<<(PowerBuilderParserOPEN-32))|(1<<(PowerBuilderParserGOTO-32))|(1<<(PowerBuilderParserIF-32))|(1<<(PowerBuilderParserTRY-32))|(1<<(PowerBuilderParserEXIT-32))|(1<<(PowerBuilderParserCHOOSE-32)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(PowerBuilderParserCONTINUE-65))|(1<<(PowerBuilderParserDO-65))|(1<<(PowerBuilderParserFOR-65))|(1<<(PowerBuilderParserCLOSE-65))|(1<<(PowerBuilderParserTHROW-65))|(1<<(PowerBuilderParserCREATE-65))|(1<<(PowerBuilderParserDESTROY-65))|(1<<(PowerBuilderParserPOST-65))|(1<<(PowerBuilderParserTRIGGER-65))|(1<<(PowerBuilderParserSELECT-65))|(1<<(PowerBuilderParserDELETE-65))|(1<<(PowerBuilderParserINSERT-65))|(1<<(PowerBuilderParserDESCRIBE-65))|(1<<(PowerBuilderParserRETURN-65))|(1<<(PowerBuilderParserCALL-65))|(1<<(PowerBuilderParserHALT-65))|(1<<(PowerBuilderParserSUPER-65))|(1<<(PowerBuilderParserSYSTEM-65)))) != 0) || (((_la-101)&-(0x1f+1)) == 0 && ((1<<uint((_la-101)))&((1<<(PowerBuilderParserSQLCA-101))|(1<<(PowerBuilderParserEXECUTE-101))|(1<<(PowerBuilderParserDECLARE-101))|(1<<(PowerBuilderParserVALUES-101))|(1<<(PowerBuilderParserCOMMIT-101))|(1<<(PowerBuilderParserPREPARE-101))|(1<<(PowerBuilderParserFETCH-101))|(1<<(PowerBuilderParserCONNECT-101))|(1<<(PowerBuilderParserDISCONNECT-101))|(1<<(PowerBuilderParserCONSTANT-101))|(1<<(PowerBuilderParserSELECTBLOB-101))|(1<<(PowerBuilderParserUPDATEBLOB-101))|(1<<(PowerBuilderParserROLLBACK-101))|(1<<(PowerBuilderParserCOLONCOLON-101)))) != 0) || (((_la-152)&-(0x1f+1)) == 0 && ((1<<uint((_la-152)))&((1<<(PowerBuilderParserAT-152))|(1<<(PowerBuilderParserUNDERSCORE-152))|(1<<(PowerBuilderParserID-152)))) != 0) {
		{
			p.SetState(1670)
			p.Statement()
		}
		p.SetState(1672)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PowerBuilderParserSEMI {
			{
				p.SetState(1671)
				p.Match(PowerBuilderParserSEMI)
			}

		}

		p.SetState(1678)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IChoose_case_cond_subContext is an interface to support dynamic dispatch.
type IChoose_case_cond_subContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsChoose_case_cond_subContext differentiates from other interfaces.
	IsChoose_case_cond_subContext()
}

type Choose_case_cond_subContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyChoose_case_cond_subContext() *Choose_case_cond_subContext {
	var p = new(Choose_case_cond_subContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_choose_case_cond_sub
	return p
}

func (*Choose_case_cond_subContext) IsChoose_case_cond_subContext() {}

func NewChoose_case_cond_subContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Choose_case_cond_subContext {
	var p = new(Choose_case_cond_subContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_choose_case_cond_sub

	return p
}

func (s *Choose_case_cond_subContext) GetParser() antlr.Parser { return s.parser }

func (s *Choose_case_cond_subContext) CASE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserCASE, 0)
}

func (s *Choose_case_cond_subContext) IS() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserIS, 0)
}

func (s *Choose_case_cond_subContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Choose_case_cond_subContext) EQ() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserEQ, 0)
}

func (s *Choose_case_cond_subContext) GT() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserGT, 0)
}

func (s *Choose_case_cond_subContext) LT() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserLT, 0)
}

func (s *Choose_case_cond_subContext) GTLT() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserGTLT, 0)
}

func (s *Choose_case_cond_subContext) GTE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserGTE, 0)
}

func (s *Choose_case_cond_subContext) LTE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserLTE, 0)
}

func (s *Choose_case_cond_subContext) AllStatement() []IStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatementContext)(nil)).Elem())
	var tst = make([]IStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatementContext)
		}
	}

	return tst
}

func (s *Choose_case_cond_subContext) Statement(i int) IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *Choose_case_cond_subContext) AllSEMI() []antlr.TerminalNode {
	return s.GetTokens(PowerBuilderParserSEMI)
}

func (s *Choose_case_cond_subContext) SEMI(i int) antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserSEMI, i)
}

func (s *Choose_case_cond_subContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Choose_case_cond_subContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Choose_case_cond_subContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterChoose_case_cond_sub(s)
	}
}

func (s *Choose_case_cond_subContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitChoose_case_cond_sub(s)
	}
}

func (p *PowerBuilderParser) Choose_case_cond_sub() (localctx IChoose_case_cond_subContext) {
	this := p
	_ = this

	localctx = NewChoose_case_cond_subContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 202, PowerBuilderParserRULE_choose_case_cond_sub)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1679)
		p.Match(PowerBuilderParserCASE)
	}
	{
		p.SetState(1680)
		p.Match(PowerBuilderParserIS)
	}
	{
		p.SetState(1681)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-120)&-(0x1f+1)) == 0 && ((1<<uint((_la-120)))&((1<<(PowerBuilderParserEQ-120))|(1<<(PowerBuilderParserGT-120))|(1<<(PowerBuilderParserGTE-120))|(1<<(PowerBuilderParserLT-120))|(1<<(PowerBuilderParserLTE-120))|(1<<(PowerBuilderParserGTLT-120)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(1682)
		p.expression(0)
	}
	p.SetState(1689)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<PowerBuilderParserANY)|(1<<PowerBuilderParserBLOB)|(1<<PowerBuilderParserBOOLEAN)|(1<<PowerBuilderParserBYTE)|(1<<PowerBuilderParserCHARACTER)|(1<<PowerBuilderParserCHAR)|(1<<PowerBuilderParserDATE_TYPE)|(1<<PowerBuilderParserDATETIME)|(1<<PowerBuilderParserDECIMAL)|(1<<PowerBuilderParserDEC)|(1<<PowerBuilderParserDOUBLE)|(1<<PowerBuilderParserINTEGER)|(1<<PowerBuilderParserINT)|(1<<PowerBuilderParserLONG)|(1<<PowerBuilderParserLONGLONG)|(1<<PowerBuilderParserREAL)|(1<<PowerBuilderParserSTRING)|(1<<PowerBuilderParserTIME_TYPE)|(1<<PowerBuilderParserUNSIGNEDINTEGER)|(1<<PowerBuilderParserUINT)|(1<<PowerBuilderParserUNSIGNEDLONG)|(1<<PowerBuilderParserULONG)|(1<<PowerBuilderParserWINDOW)|(1<<PowerBuilderParserGLOBAL)|(1<<PowerBuilderParserINDIRECT))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(PowerBuilderParserPUBLIC-32))|(1<<(PowerBuilderParserPRIVATE-32))|(1<<(PowerBuilderParserFUNCTION-32))|(1<<(PowerBuilderParserREADONLY-32))|(1<<(PowerBuilderParserTYPE-32))|(1<<(PowerBuilderParserUPDATE-32))|(1<<(PowerBuilderParserDYNAMIC-32))|(1<<(PowerBuilderParserPRIVATEWRITE-32))|(1<<(PowerBuilderParserPROTECTED-32))|(1<<(PowerBuilderParserPRIVATEREAD-32))|(1<<(PowerBuilderParserPROTECTEDREAD-32))|(1<<(PowerBuilderParserPROTECTEDWRITE-32))|(1<<(PowerBuilderParserLOCAL-32))|(1<<(PowerBuilderParserEVENT-32))|(1<<(PowerBuilderParserOPEN-32))|(1<<(PowerBuilderParserGOTO-32))|(1<<(PowerBuilderParserIF-32))|(1<<(PowerBuilderParserTRY-32))|(1<<(PowerBuilderParserEXIT-32))|(1<<(PowerBuilderParserCHOOSE-32)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(PowerBuilderParserCONTINUE-65))|(1<<(PowerBuilderParserDO-65))|(1<<(PowerBuilderParserFOR-65))|(1<<(PowerBuilderParserCLOSE-65))|(1<<(PowerBuilderParserTHROW-65))|(1<<(PowerBuilderParserCREATE-65))|(1<<(PowerBuilderParserDESTROY-65))|(1<<(PowerBuilderParserPOST-65))|(1<<(PowerBuilderParserTRIGGER-65))|(1<<(PowerBuilderParserSELECT-65))|(1<<(PowerBuilderParserDELETE-65))|(1<<(PowerBuilderParserINSERT-65))|(1<<(PowerBuilderParserDESCRIBE-65))|(1<<(PowerBuilderParserRETURN-65))|(1<<(PowerBuilderParserCALL-65))|(1<<(PowerBuilderParserHALT-65))|(1<<(PowerBuilderParserSUPER-65))|(1<<(PowerBuilderParserSYSTEM-65)))) != 0) || (((_la-101)&-(0x1f+1)) == 0 && ((1<<uint((_la-101)))&((1<<(PowerBuilderParserSQLCA-101))|(1<<(PowerBuilderParserEXECUTE-101))|(1<<(PowerBuilderParserDECLARE-101))|(1<<(PowerBuilderParserVALUES-101))|(1<<(PowerBuilderParserCOMMIT-101))|(1<<(PowerBuilderParserPREPARE-101))|(1<<(PowerBuilderParserFETCH-101))|(1<<(PowerBuilderParserCONNECT-101))|(1<<(PowerBuilderParserDISCONNECT-101))|(1<<(PowerBuilderParserCONSTANT-101))|(1<<(PowerBuilderParserSELECTBLOB-101))|(1<<(PowerBuilderParserUPDATEBLOB-101))|(1<<(PowerBuilderParserROLLBACK-101))|(1<<(PowerBuilderParserCOLONCOLON-101)))) != 0) || (((_la-152)&-(0x1f+1)) == 0 && ((1<<uint((_la-152)))&((1<<(PowerBuilderParserAT-152))|(1<<(PowerBuilderParserUNDERSCORE-152))|(1<<(PowerBuilderParserID-152)))) != 0) {
		{
			p.SetState(1683)
			p.Statement()
		}
		p.SetState(1685)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PowerBuilderParserSEMI {
			{
				p.SetState(1684)
				p.Match(PowerBuilderParserSEMI)
			}

		}

		p.SetState(1691)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IChoose_case_else_subContext is an interface to support dynamic dispatch.
type IChoose_case_else_subContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsChoose_case_else_subContext differentiates from other interfaces.
	IsChoose_case_else_subContext()
}

type Choose_case_else_subContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyChoose_case_else_subContext() *Choose_case_else_subContext {
	var p = new(Choose_case_else_subContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_choose_case_else_sub
	return p
}

func (*Choose_case_else_subContext) IsChoose_case_else_subContext() {}

func NewChoose_case_else_subContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Choose_case_else_subContext {
	var p = new(Choose_case_else_subContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_choose_case_else_sub

	return p
}

func (s *Choose_case_else_subContext) GetParser() antlr.Parser { return s.parser }

func (s *Choose_case_else_subContext) CASE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserCASE, 0)
}

func (s *Choose_case_else_subContext) ELSE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserELSE, 0)
}

func (s *Choose_case_else_subContext) AllStatement() []IStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatementContext)(nil)).Elem())
	var tst = make([]IStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatementContext)
		}
	}

	return tst
}

func (s *Choose_case_else_subContext) Statement(i int) IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *Choose_case_else_subContext) AllSEMI() []antlr.TerminalNode {
	return s.GetTokens(PowerBuilderParserSEMI)
}

func (s *Choose_case_else_subContext) SEMI(i int) antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserSEMI, i)
}

func (s *Choose_case_else_subContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Choose_case_else_subContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Choose_case_else_subContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterChoose_case_else_sub(s)
	}
}

func (s *Choose_case_else_subContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitChoose_case_else_sub(s)
	}
}

func (p *PowerBuilderParser) Choose_case_else_sub() (localctx IChoose_case_else_subContext) {
	this := p
	_ = this

	localctx = NewChoose_case_else_subContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 204, PowerBuilderParserRULE_choose_case_else_sub)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1692)
		p.Match(PowerBuilderParserCASE)
	}
	{
		p.SetState(1693)
		p.Match(PowerBuilderParserELSE)
	}
	p.SetState(1700)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<PowerBuilderParserANY)|(1<<PowerBuilderParserBLOB)|(1<<PowerBuilderParserBOOLEAN)|(1<<PowerBuilderParserBYTE)|(1<<PowerBuilderParserCHARACTER)|(1<<PowerBuilderParserCHAR)|(1<<PowerBuilderParserDATE_TYPE)|(1<<PowerBuilderParserDATETIME)|(1<<PowerBuilderParserDECIMAL)|(1<<PowerBuilderParserDEC)|(1<<PowerBuilderParserDOUBLE)|(1<<PowerBuilderParserINTEGER)|(1<<PowerBuilderParserINT)|(1<<PowerBuilderParserLONG)|(1<<PowerBuilderParserLONGLONG)|(1<<PowerBuilderParserREAL)|(1<<PowerBuilderParserSTRING)|(1<<PowerBuilderParserTIME_TYPE)|(1<<PowerBuilderParserUNSIGNEDINTEGER)|(1<<PowerBuilderParserUINT)|(1<<PowerBuilderParserUNSIGNEDLONG)|(1<<PowerBuilderParserULONG)|(1<<PowerBuilderParserWINDOW)|(1<<PowerBuilderParserGLOBAL)|(1<<PowerBuilderParserINDIRECT))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(PowerBuilderParserPUBLIC-32))|(1<<(PowerBuilderParserPRIVATE-32))|(1<<(PowerBuilderParserFUNCTION-32))|(1<<(PowerBuilderParserREADONLY-32))|(1<<(PowerBuilderParserTYPE-32))|(1<<(PowerBuilderParserUPDATE-32))|(1<<(PowerBuilderParserDYNAMIC-32))|(1<<(PowerBuilderParserPRIVATEWRITE-32))|(1<<(PowerBuilderParserPROTECTED-32))|(1<<(PowerBuilderParserPRIVATEREAD-32))|(1<<(PowerBuilderParserPROTECTEDREAD-32))|(1<<(PowerBuilderParserPROTECTEDWRITE-32))|(1<<(PowerBuilderParserLOCAL-32))|(1<<(PowerBuilderParserEVENT-32))|(1<<(PowerBuilderParserOPEN-32))|(1<<(PowerBuilderParserGOTO-32))|(1<<(PowerBuilderParserIF-32))|(1<<(PowerBuilderParserTRY-32))|(1<<(PowerBuilderParserEXIT-32))|(1<<(PowerBuilderParserCHOOSE-32)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(PowerBuilderParserCONTINUE-65))|(1<<(PowerBuilderParserDO-65))|(1<<(PowerBuilderParserFOR-65))|(1<<(PowerBuilderParserCLOSE-65))|(1<<(PowerBuilderParserTHROW-65))|(1<<(PowerBuilderParserCREATE-65))|(1<<(PowerBuilderParserDESTROY-65))|(1<<(PowerBuilderParserPOST-65))|(1<<(PowerBuilderParserTRIGGER-65))|(1<<(PowerBuilderParserSELECT-65))|(1<<(PowerBuilderParserDELETE-65))|(1<<(PowerBuilderParserINSERT-65))|(1<<(PowerBuilderParserDESCRIBE-65))|(1<<(PowerBuilderParserRETURN-65))|(1<<(PowerBuilderParserCALL-65))|(1<<(PowerBuilderParserHALT-65))|(1<<(PowerBuilderParserSUPER-65))|(1<<(PowerBuilderParserSYSTEM-65)))) != 0) || (((_la-101)&-(0x1f+1)) == 0 && ((1<<uint((_la-101)))&((1<<(PowerBuilderParserSQLCA-101))|(1<<(PowerBuilderParserEXECUTE-101))|(1<<(PowerBuilderParserDECLARE-101))|(1<<(PowerBuilderParserVALUES-101))|(1<<(PowerBuilderParserCOMMIT-101))|(1<<(PowerBuilderParserPREPARE-101))|(1<<(PowerBuilderParserFETCH-101))|(1<<(PowerBuilderParserCONNECT-101))|(1<<(PowerBuilderParserDISCONNECT-101))|(1<<(PowerBuilderParserCONSTANT-101))|(1<<(PowerBuilderParserSELECTBLOB-101))|(1<<(PowerBuilderParserUPDATEBLOB-101))|(1<<(PowerBuilderParserROLLBACK-101))|(1<<(PowerBuilderParserCOLONCOLON-101)))) != 0) || (((_la-152)&-(0x1f+1)) == 0 && ((1<<uint((_la-152)))&((1<<(PowerBuilderParserAT-152))|(1<<(PowerBuilderParserUNDERSCORE-152))|(1<<(PowerBuilderParserID-152)))) != 0) {
		{
			p.SetState(1694)
			p.Statement()
		}
		p.SetState(1696)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PowerBuilderParserSEMI {
			{
				p.SetState(1695)
				p.Match(PowerBuilderParserSEMI)
			}

		}

		p.SetState(1702)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ILabel_statContext is an interface to support dynamic dispatch.
type ILabel_statContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLabel_statContext differentiates from other interfaces.
	IsLabel_statContext()
}

type Label_statContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLabel_statContext() *Label_statContext {
	var p = new(Label_statContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_label_stat
	return p
}

func (*Label_statContext) IsLabel_statContext() {}

func NewLabel_statContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Label_statContext {
	var p = new(Label_statContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_label_stat

	return p
}

func (s *Label_statContext) GetParser() antlr.Parser { return s.parser }

func (s *Label_statContext) Identifier_name() IIdentifier_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_nameContext)
}

func (s *Label_statContext) COLON() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserCOLON, 0)
}

func (s *Label_statContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Label_statContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Label_statContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterLabel_stat(s)
	}
}

func (s *Label_statContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitLabel_stat(s)
	}
}

func (p *PowerBuilderParser) Label_stat() (localctx ILabel_statContext) {
	this := p
	_ = this

	localctx = NewLabel_statContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 206, PowerBuilderParserRULE_label_stat)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1703)
		p.Identifier_name()
	}
	{
		p.SetState(1704)
		p.Match(PowerBuilderParserCOLON)
	}

	return localctx
}

// IIdentifierContext is an interface to support dynamic dispatch.
type IIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdentifierContext differentiates from other interfaces.
	IsIdentifierContext()
}

type IdentifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifierContext() *IdentifierContext {
	var p = new(IdentifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_identifier
	return p
}

func (*IdentifierContext) IsIdentifierContext() {}

func NewIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdentifierContext {
	var p = new(IdentifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_identifier

	return p
}

func (s *IdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *IdentifierContext) AllIdentifier_name_ex() []IIdentifier_name_exContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifier_name_exContext)(nil)).Elem())
	var tst = make([]IIdentifier_name_exContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifier_name_exContext)
		}
	}

	return tst
}

func (s *IdentifierContext) Identifier_name_ex(i int) IIdentifier_name_exContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_name_exContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_name_exContext)
}

func (s *IdentifierContext) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(PowerBuilderParserDOT)
}

func (s *IdentifierContext) DOT(i int) antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserDOT, i)
}

func (s *IdentifierContext) AllIdentifier_array() []IIdentifier_arrayContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifier_arrayContext)(nil)).Elem())
	var tst = make([]IIdentifier_arrayContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifier_arrayContext)
		}
	}

	return tst
}

func (s *IdentifierContext) Identifier_array(i int) IIdentifier_arrayContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_arrayContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_arrayContext)
}

func (s *IdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdentifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterIdentifier(s)
	}
}

func (s *IdentifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitIdentifier(s)
	}
}

func (p *PowerBuilderParser) Identifier() (localctx IIdentifierContext) {
	this := p
	_ = this

	localctx = NewIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 208, PowerBuilderParserRULE_identifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1706)
		p.Identifier_name_ex()
	}
	p.SetState(1711)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 252, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1707)
				p.Match(PowerBuilderParserDOT)
			}
			{
				p.SetState(1708)
				p.Identifier_name_ex()
			}

		}
		p.SetState(1713)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 252, p.GetParserRuleContext())
	}
	p.SetState(1715)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 253, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1714)
			p.Identifier_array()
		}

	}
	p.SetState(1724)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 255, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1717)
				p.Match(PowerBuilderParserDOT)
			}
			{
				p.SetState(1718)
				p.Identifier_name_ex()
			}
			p.SetState(1720)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 254, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(1719)
					p.Identifier_array()
				}

			}

		}
		p.SetState(1726)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 255, p.GetParserRuleContext())
	}

	return localctx
}

// IString_literalContext is an interface to support dynamic dispatch.
type IString_literalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsString_literalContext differentiates from other interfaces.
	IsString_literalContext()
}

type String_literalContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyString_literalContext() *String_literalContext {
	var p = new(String_literalContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_string_literal
	return p
}

func (*String_literalContext) IsString_literalContext() {}

func NewString_literalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *String_literalContext {
	var p = new(String_literalContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_string_literal

	return p
}

func (s *String_literalContext) GetParser() antlr.Parser { return s.parser }

func (s *String_literalContext) AllDQUOTED_STRING() []antlr.TerminalNode {
	return s.GetTokens(PowerBuilderParserDQUOTED_STRING)
}

func (s *String_literalContext) DQUOTED_STRING(i int) antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserDQUOTED_STRING, i)
}

func (s *String_literalContext) AllQUOTED_STRING() []antlr.TerminalNode {
	return s.GetTokens(PowerBuilderParserQUOTED_STRING)
}

func (s *String_literalContext) QUOTED_STRING(i int) antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserQUOTED_STRING, i)
}

func (s *String_literalContext) AllPLUS() []antlr.TerminalNode {
	return s.GetTokens(PowerBuilderParserPLUS)
}

func (s *String_literalContext) PLUS(i int) antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserPLUS, i)
}

func (s *String_literalContext) AllVariable_name() []IVariable_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVariable_nameContext)(nil)).Elem())
	var tst = make([]IVariable_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVariable_nameContext)
		}
	}

	return tst
}

func (s *String_literalContext) Variable_name(i int) IVariable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVariable_nameContext)
}

func (s *String_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *String_literalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *String_literalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterString_literal(s)
	}
}

func (s *String_literalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitString_literal(s)
	}
}

func (p *PowerBuilderParser) String_literal() (localctx IString_literalContext) {
	this := p
	_ = this

	localctx = NewString_literalContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 210, PowerBuilderParserRULE_string_literal)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1727)
		_la = p.GetTokenStream().LA(1)

		if !(_la == PowerBuilderParserDQUOTED_STRING || _la == PowerBuilderParserQUOTED_STRING) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(1736)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 257, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1728)
				p.Match(PowerBuilderParserPLUS)
			}
			p.SetState(1732)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case PowerBuilderParserDATE_TYPE, PowerBuilderParserTIME_TYPE, PowerBuilderParserWINDOW, PowerBuilderParserREADONLY, PowerBuilderParserTYPE, PowerBuilderParserUPDATE, PowerBuilderParserOPEN, PowerBuilderParserGOTO, PowerBuilderParserCLOSE, PowerBuilderParserCREATE, PowerBuilderParserSELECT, PowerBuilderParserDELETE, PowerBuilderParserINSERT, PowerBuilderParserSYSTEM, PowerBuilderParserSQLCA, PowerBuilderParserVALUES, PowerBuilderParserUNDERSCORE, PowerBuilderParserID:
				{
					p.SetState(1729)
					p.Variable_name()
				}

			case PowerBuilderParserDQUOTED_STRING:
				{
					p.SetState(1730)
					p.Match(PowerBuilderParserDQUOTED_STRING)
				}

			case PowerBuilderParserQUOTED_STRING:
				{
					p.SetState(1731)
					p.Match(PowerBuilderParserQUOTED_STRING)
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		}
		p.SetState(1738)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 257, p.GetParserRuleContext())
	}

	return localctx
}

// IIdentifier_arrayContext is an interface to support dynamic dispatch.
type IIdentifier_arrayContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdentifier_arrayContext differentiates from other interfaces.
	IsIdentifier_arrayContext()
}

type Identifier_arrayContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifier_arrayContext() *Identifier_arrayContext {
	var p = new(Identifier_arrayContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_identifier_array
	return p
}

func (*Identifier_arrayContext) IsIdentifier_arrayContext() {}

func NewIdentifier_arrayContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Identifier_arrayContext {
	var p = new(Identifier_arrayContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_identifier_array

	return p
}

func (s *Identifier_arrayContext) GetParser() antlr.Parser { return s.parser }

func (s *Identifier_arrayContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserLBRACE, 0)
}

func (s *Identifier_arrayContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserRBRACE, 0)
}

func (s *Identifier_arrayContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Identifier_arrayContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Identifier_arrayContext) AllValue() []IValueContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IValueContext)(nil)).Elem())
	var tst = make([]IValueContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IValueContext)
		}
	}

	return tst
}

func (s *Identifier_arrayContext) Value(i int) IValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValueContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IValueContext)
}

func (s *Identifier_arrayContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PowerBuilderParserCOMMA)
}

func (s *Identifier_arrayContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserCOMMA, i)
}

func (s *Identifier_arrayContext) Function_call_statement() IFunction_call_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_call_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_call_statementContext)
}

func (s *Identifier_arrayContext) NUMBER() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserNUMBER, 0)
}

func (s *Identifier_arrayContext) Operator() IOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOperatorContext)
}

func (s *Identifier_arrayContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Identifier_arrayContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Identifier_arrayContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterIdentifier_array(s)
	}
}

func (s *Identifier_arrayContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitIdentifier_array(s)
	}
}

func (p *PowerBuilderParser) Identifier_array() (localctx IIdentifier_arrayContext) {
	this := p
	_ = this

	localctx = NewIdentifier_arrayContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 212, PowerBuilderParserRULE_identifier_array)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1768)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 264, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1739)
			p.Match(PowerBuilderParserLBRACE)
		}
		p.SetState(1742)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case PowerBuilderParserDATE_TYPE, PowerBuilderParserTIME_TYPE, PowerBuilderParserWINDOW, PowerBuilderParserREADONLY, PowerBuilderParserTYPE, PowerBuilderParserUPDATE, PowerBuilderParserOPEN, PowerBuilderParserGOTO, PowerBuilderParserCLOSE, PowerBuilderParserCREATE, PowerBuilderParserSELECT, PowerBuilderParserDELETE, PowerBuilderParserINSERT, PowerBuilderParserSYSTEM, PowerBuilderParserSQLCA, PowerBuilderParserVALUES, PowerBuilderParserUNDERSCORE, PowerBuilderParserID:
			{
				p.SetState(1740)
				p.Identifier()
			}

		case PowerBuilderParserTRUE, PowerBuilderParserFALSE, PowerBuilderParserDQUOTED_STRING, PowerBuilderParserQUOTED_STRING, PowerBuilderParserNUMBER, PowerBuilderParserDATE, PowerBuilderParserTIME, PowerBuilderParserENUM:
			{
				p.SetState(1741)
				p.Value()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(1751)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == PowerBuilderParserCOMMA {
			{
				p.SetState(1744)
				p.Match(PowerBuilderParserCOMMA)
			}
			p.SetState(1747)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case PowerBuilderParserDATE_TYPE, PowerBuilderParserTIME_TYPE, PowerBuilderParserWINDOW, PowerBuilderParserREADONLY, PowerBuilderParserTYPE, PowerBuilderParserUPDATE, PowerBuilderParserOPEN, PowerBuilderParserGOTO, PowerBuilderParserCLOSE, PowerBuilderParserCREATE, PowerBuilderParserSELECT, PowerBuilderParserDELETE, PowerBuilderParserINSERT, PowerBuilderParserSYSTEM, PowerBuilderParserSQLCA, PowerBuilderParserVALUES, PowerBuilderParserUNDERSCORE, PowerBuilderParserID:
				{
					p.SetState(1745)
					p.Identifier()
				}

			case PowerBuilderParserTRUE, PowerBuilderParserFALSE, PowerBuilderParserDQUOTED_STRING, PowerBuilderParserQUOTED_STRING, PowerBuilderParserNUMBER, PowerBuilderParserDATE, PowerBuilderParserTIME, PowerBuilderParserENUM:
				{
					p.SetState(1746)
					p.Value()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(1753)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1754)
			p.Match(PowerBuilderParserRBRACE)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1756)
			p.Match(PowerBuilderParserLBRACE)
		}
		p.SetState(1759)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 261, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1757)
				p.Identifier()
			}

		} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 261, p.GetParserRuleContext()) == 2 {
			{
				p.SetState(1758)
				p.Function_call_statement()
			}

		}
		p.SetState(1765)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if ((_la-126)&-(0x1f+1)) == 0 && ((1<<uint((_la-126)))&((1<<(PowerBuilderParserPLUS-126))|(1<<(PowerBuilderParserMINUS-126))|(1<<(PowerBuilderParserMULT-126))|(1<<(PowerBuilderParserDIV-126))|(1<<(PowerBuilderParserNUMBER-126)))) != 0 {
			p.SetState(1762)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if ((_la-126)&-(0x1f+1)) == 0 && ((1<<uint((_la-126)))&((1<<(PowerBuilderParserPLUS-126))|(1<<(PowerBuilderParserMINUS-126))|(1<<(PowerBuilderParserMULT-126))|(1<<(PowerBuilderParserDIV-126)))) != 0 {
				{
					p.SetState(1761)
					p.Operator()
				}

			}
			{
				p.SetState(1764)
				p.Match(PowerBuilderParserNUMBER)
			}

		}
		{
			p.SetState(1767)
			p.Match(PowerBuilderParserRBRACE)
		}

	}

	return localctx
}

// IOperatorContext is an interface to support dynamic dispatch.
type IOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOperatorContext differentiates from other interfaces.
	IsOperatorContext()
}

type OperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOperatorContext() *OperatorContext {
	var p = new(OperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_operator
	return p
}

func (*OperatorContext) IsOperatorContext() {}

func NewOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OperatorContext {
	var p = new(OperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_operator

	return p
}

func (s *OperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *OperatorContext) PLUS() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserPLUS, 0)
}

func (s *OperatorContext) MINUS() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserMINUS, 0)
}

func (s *OperatorContext) MULT() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserMULT, 0)
}

func (s *OperatorContext) DIV() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserDIV, 0)
}

func (s *OperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OperatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterOperator(s)
	}
}

func (s *OperatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitOperator(s)
	}
}

func (p *PowerBuilderParser) Operator() (localctx IOperatorContext) {
	this := p
	_ = this

	localctx = NewOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 214, PowerBuilderParserRULE_operator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1770)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-126)&-(0x1f+1)) == 0 && ((1<<uint((_la-126)))&((1<<(PowerBuilderParserPLUS-126))|(1<<(PowerBuilderParserMINUS-126))|(1<<(PowerBuilderParserMULT-126))|(1<<(PowerBuilderParserDIV-126)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IIdentifier_name_exContext is an interface to support dynamic dispatch.
type IIdentifier_name_exContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdentifier_name_exContext differentiates from other interfaces.
	IsIdentifier_name_exContext()
}

type Identifier_name_exContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifier_name_exContext() *Identifier_name_exContext {
	var p = new(Identifier_name_exContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_identifier_name_ex
	return p
}

func (*Identifier_name_exContext) IsIdentifier_name_exContext() {}

func NewIdentifier_name_exContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Identifier_name_exContext {
	var p = new(Identifier_name_exContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_identifier_name_ex

	return p
}

func (s *Identifier_name_exContext) GetParser() antlr.Parser { return s.parser }

func (s *Identifier_name_exContext) Identifier_name() IIdentifier_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_nameContext)
}

func (s *Identifier_name_exContext) SELECT() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserSELECT, 0)
}

func (s *Identifier_name_exContext) TYPE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserTYPE, 0)
}

func (s *Identifier_name_exContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserUPDATE, 0)
}

func (s *Identifier_name_exContext) DELETE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserDELETE, 0)
}

func (s *Identifier_name_exContext) OPEN() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserOPEN, 0)
}

func (s *Identifier_name_exContext) CLOSE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserCLOSE, 0)
}

func (s *Identifier_name_exContext) GOTO() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserGOTO, 0)
}

func (s *Identifier_name_exContext) INSERT() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserINSERT, 0)
}

func (s *Identifier_name_exContext) TIME_TYPE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserTIME_TYPE, 0)
}

func (s *Identifier_name_exContext) READONLY() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserREADONLY, 0)
}

func (s *Identifier_name_exContext) SQLCA() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserSQLCA, 0)
}

func (s *Identifier_name_exContext) CREATE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserCREATE, 0)
}

func (s *Identifier_name_exContext) VALUES() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserVALUES, 0)
}

func (s *Identifier_name_exContext) WINDOW() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserWINDOW, 0)
}

func (s *Identifier_name_exContext) SYSTEM() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserSYSTEM, 0)
}

func (s *Identifier_name_exContext) DATE_TYPE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserDATE_TYPE, 0)
}

func (s *Identifier_name_exContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Identifier_name_exContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Identifier_name_exContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterIdentifier_name_ex(s)
	}
}

func (s *Identifier_name_exContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitIdentifier_name_ex(s)
	}
}

func (p *PowerBuilderParser) Identifier_name_ex() (localctx IIdentifier_name_exContext) {
	this := p
	_ = this

	localctx = NewIdentifier_name_exContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 216, PowerBuilderParserRULE_identifier_name_ex)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1789)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PowerBuilderParserUNDERSCORE, PowerBuilderParserID:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1772)
			p.Identifier_name()
		}

	case PowerBuilderParserSELECT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1773)
			p.Match(PowerBuilderParserSELECT)
		}

	case PowerBuilderParserTYPE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1774)
			p.Match(PowerBuilderParserTYPE)
		}

	case PowerBuilderParserUPDATE:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1775)
			p.Match(PowerBuilderParserUPDATE)
		}

	case PowerBuilderParserDELETE:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1776)
			p.Match(PowerBuilderParserDELETE)
		}

	case PowerBuilderParserOPEN:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1777)
			p.Match(PowerBuilderParserOPEN)
		}

	case PowerBuilderParserCLOSE:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1778)
			p.Match(PowerBuilderParserCLOSE)
		}

	case PowerBuilderParserGOTO:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1779)
			p.Match(PowerBuilderParserGOTO)
		}

	case PowerBuilderParserINSERT:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(1780)
			p.Match(PowerBuilderParserINSERT)
		}

	case PowerBuilderParserTIME_TYPE:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(1781)
			p.Match(PowerBuilderParserTIME_TYPE)
		}

	case PowerBuilderParserREADONLY:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(1782)
			p.Match(PowerBuilderParserREADONLY)
		}

	case PowerBuilderParserSQLCA:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(1783)
			p.Match(PowerBuilderParserSQLCA)
		}

	case PowerBuilderParserCREATE:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(1784)
			p.Match(PowerBuilderParserCREATE)
		}

	case PowerBuilderParserVALUES:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(1785)
			p.Match(PowerBuilderParserVALUES)
		}

	case PowerBuilderParserWINDOW:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(1786)
			p.Match(PowerBuilderParserWINDOW)
		}

	case PowerBuilderParserSYSTEM:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(1787)
			p.Match(PowerBuilderParserSYSTEM)
		}

	case PowerBuilderParserDATE_TYPE:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(1788)
			p.Match(PowerBuilderParserDATE_TYPE)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IIdentifier_nameContext is an interface to support dynamic dispatch.
type IIdentifier_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdentifier_nameContext differentiates from other interfaces.
	IsIdentifier_nameContext()
}

type Identifier_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifier_nameContext() *Identifier_nameContext {
	var p = new(Identifier_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_identifier_name
	return p
}

func (*Identifier_nameContext) IsIdentifier_nameContext() {}

func NewIdentifier_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Identifier_nameContext {
	var p = new(Identifier_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_identifier_name

	return p
}

func (s *Identifier_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Identifier_nameContext) ID() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserID, 0)
}

func (s *Identifier_nameContext) UNDERSCORE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserUNDERSCORE, 0)
}

func (s *Identifier_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Identifier_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Identifier_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterIdentifier_name(s)
	}
}

func (s *Identifier_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitIdentifier_name(s)
	}
}

func (p *PowerBuilderParser) Identifier_name() (localctx IIdentifier_nameContext) {
	this := p
	_ = this

	localctx = NewIdentifier_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 218, PowerBuilderParserRULE_identifier_name)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1792)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PowerBuilderParserUNDERSCORE {
		{
			p.SetState(1791)
			p.Match(PowerBuilderParserUNDERSCORE)
		}

	}
	{
		p.SetState(1794)
		p.Match(PowerBuilderParserID)
	}

	return localctx
}

// IBind_paramContext is an interface to support dynamic dispatch.
type IBind_paramContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBind_paramContext differentiates from other interfaces.
	IsBind_paramContext()
}

type Bind_paramContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBind_paramContext() *Bind_paramContext {
	var p = new(Bind_paramContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_bind_param
	return p
}

func (*Bind_paramContext) IsBind_paramContext() {}

func NewBind_paramContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Bind_paramContext {
	var p = new(Bind_paramContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_bind_param

	return p
}

func (s *Bind_paramContext) GetParser() antlr.Parser { return s.parser }

func (s *Bind_paramContext) COLON() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserCOLON, 0)
}

func (s *Bind_paramContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Bind_paramContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Bind_paramContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Bind_paramContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterBind_param(s)
	}
}

func (s *Bind_paramContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitBind_param(s)
	}
}

func (p *PowerBuilderParser) Bind_param() (localctx IBind_paramContext) {
	this := p
	_ = this

	localctx = NewBind_paramContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 220, PowerBuilderParserRULE_bind_param)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1796)
		p.Match(PowerBuilderParserCOLON)
	}
	{
		p.SetState(1797)
		p.Identifier()
	}

	return localctx
}

// IAtom_subContext is an interface to support dynamic dispatch.
type IAtom_subContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAtom_subContext differentiates from other interfaces.
	IsAtom_subContext()
}

type Atom_subContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAtom_subContext() *Atom_subContext {
	var p = new(Atom_subContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_atom_sub
	return p
}

func (*Atom_subContext) IsAtom_subContext() {}

func NewAtom_subContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Atom_subContext {
	var p = new(Atom_subContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_atom_sub

	return p
}

func (s *Atom_subContext) GetParser() antlr.Parser { return s.parser }

func (s *Atom_subContext) Array_access_atom() IArray_access_atomContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArray_access_atomContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArray_access_atomContext)
}

func (s *Atom_subContext) Identifier_name() IIdentifier_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_nameContext)
}

func (s *Atom_subContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserLPAREN, 0)
}

func (s *Atom_subContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserRPAREN, 0)
}

func (s *Atom_subContext) Expression_list() IExpression_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_listContext)
}

func (s *Atom_subContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Atom_subContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Atom_subContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterAtom_sub(s)
	}
}

func (s *Atom_subContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitAtom_sub(s)
	}
}

func (p *PowerBuilderParser) Atom_sub() (localctx IAtom_subContext) {
	this := p
	_ = this

	localctx = NewAtom_subContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 222, PowerBuilderParserRULE_atom_sub)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1808)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 269, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1799)
			p.Array_access_atom()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1800)
			p.Identifier_name()
		}
		p.SetState(1806)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PowerBuilderParserLPAREN {
			{
				p.SetState(1801)
				p.Match(PowerBuilderParserLPAREN)
			}
			p.SetState(1803)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<PowerBuilderParserANY)|(1<<PowerBuilderParserBLOB)|(1<<PowerBuilderParserBOOLEAN)|(1<<PowerBuilderParserBYTE)|(1<<PowerBuilderParserCHARACTER)|(1<<PowerBuilderParserCHAR)|(1<<PowerBuilderParserDATE_TYPE)|(1<<PowerBuilderParserDATETIME)|(1<<PowerBuilderParserDECIMAL)|(1<<PowerBuilderParserDEC)|(1<<PowerBuilderParserDOUBLE)|(1<<PowerBuilderParserINTEGER)|(1<<PowerBuilderParserINT)|(1<<PowerBuilderParserLONG)|(1<<PowerBuilderParserLONGLONG)|(1<<PowerBuilderParserREAL)|(1<<PowerBuilderParserSTRING)|(1<<PowerBuilderParserTIME_TYPE)|(1<<PowerBuilderParserUNSIGNEDINTEGER)|(1<<PowerBuilderParserUINT)|(1<<PowerBuilderParserUNSIGNEDLONG)|(1<<PowerBuilderParserULONG)|(1<<PowerBuilderParserWINDOW)|(1<<PowerBuilderParserTRUE)|(1<<PowerBuilderParserFALSE))) != 0) || (((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(PowerBuilderParserFUNCTION-34))|(1<<(PowerBuilderParserREADONLY-34))|(1<<(PowerBuilderParserTYPE-34))|(1<<(PowerBuilderParserREF-34))|(1<<(PowerBuilderParserUPDATE-34))|(1<<(PowerBuilderParserDYNAMIC-34))|(1<<(PowerBuilderParserEVENT-34))|(1<<(PowerBuilderParserOPEN-34))|(1<<(PowerBuilderParserGOTO-34)))) != 0) || (((_la-69)&-(0x1f+1)) == 0 && ((1<<uint((_la-69)))&((1<<(PowerBuilderParserCLOSE-69))|(1<<(PowerBuilderParserCREATE-69))|(1<<(PowerBuilderParserPOST-69))|(1<<(PowerBuilderParserSELECT-69))|(1<<(PowerBuilderParserDELETE-69))|(1<<(PowerBuilderParserINSERT-69))|(1<<(PowerBuilderParserDESCRIBE-69))|(1<<(PowerBuilderParserNOT-69))|(1<<(PowerBuilderParserHALT-69))|(1<<(PowerBuilderParserSYSTEM-69)))) != 0) || (((_la-101)&-(0x1f+1)) == 0 && ((1<<uint((_la-101)))&((1<<(PowerBuilderParserSQLCA-101))|(1<<(PowerBuilderParserVALUES-101))|(1<<(PowerBuilderParserPLUS-101))|(1<<(PowerBuilderParserMINUS-101))|(1<<(PowerBuilderParserCOLONCOLON-101)))) != 0) || (((_la-136)&-(0x1f+1)) == 0 && ((1<<uint((_la-136)))&((1<<(PowerBuilderParserLCURLY-136))|(1<<(PowerBuilderParserDQUOTED_STRING-136))|(1<<(PowerBuilderParserQUOTED_STRING-136))|(1<<(PowerBuilderParserLPAREN-136))|(1<<(PowerBuilderParserCOLON-136))|(1<<(PowerBuilderParserUNDERSCORE-136))|(1<<(PowerBuilderParserNUMBER-136))|(1<<(PowerBuilderParserDATE-136))|(1<<(PowerBuilderParserTIME-136))|(1<<(PowerBuilderParserENUM-136))|(1<<(PowerBuilderParserID-136)))) != 0) {
				{
					p.SetState(1802)
					p.Expression_list()
				}

			}
			{
				p.SetState(1805)
				p.Match(PowerBuilderParserRPAREN)
			}

		}

	}

	return localctx
}

// IAtom_sub_call1Context is an interface to support dynamic dispatch.
type IAtom_sub_call1Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAtom_sub_call1Context differentiates from other interfaces.
	IsAtom_sub_call1Context()
}

type Atom_sub_call1Context struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAtom_sub_call1Context() *Atom_sub_call1Context {
	var p = new(Atom_sub_call1Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_atom_sub_call1
	return p
}

func (*Atom_sub_call1Context) IsAtom_sub_call1Context() {}

func NewAtom_sub_call1Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Atom_sub_call1Context {
	var p = new(Atom_sub_call1Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_atom_sub_call1

	return p
}

func (s *Atom_sub_call1Context) GetParser() antlr.Parser { return s.parser }

func (s *Atom_sub_call1Context) LPAREN() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserLPAREN, 0)
}

func (s *Atom_sub_call1Context) RPAREN() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserRPAREN, 0)
}

func (s *Atom_sub_call1Context) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Atom_sub_call1Context) DESCRIBE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserDESCRIBE, 0)
}

func (s *Atom_sub_call1Context) Expression_list() IExpression_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_listContext)
}

func (s *Atom_sub_call1Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Atom_sub_call1Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Atom_sub_call1Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterAtom_sub_call1(s)
	}
}

func (s *Atom_sub_call1Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitAtom_sub_call1(s)
	}
}

func (p *PowerBuilderParser) Atom_sub_call1() (localctx IAtom_sub_call1Context) {
	this := p
	_ = this

	localctx = NewAtom_sub_call1Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 224, PowerBuilderParserRULE_atom_sub_call1)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1812)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PowerBuilderParserDATE_TYPE, PowerBuilderParserTIME_TYPE, PowerBuilderParserWINDOW, PowerBuilderParserREADONLY, PowerBuilderParserTYPE, PowerBuilderParserUPDATE, PowerBuilderParserOPEN, PowerBuilderParserGOTO, PowerBuilderParserCLOSE, PowerBuilderParserCREATE, PowerBuilderParserSELECT, PowerBuilderParserDELETE, PowerBuilderParserINSERT, PowerBuilderParserSYSTEM, PowerBuilderParserSQLCA, PowerBuilderParserVALUES, PowerBuilderParserUNDERSCORE, PowerBuilderParserID:
		{
			p.SetState(1810)
			p.Identifier()
		}

	case PowerBuilderParserDESCRIBE:
		{
			p.SetState(1811)
			p.Match(PowerBuilderParserDESCRIBE)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(1814)
		p.Match(PowerBuilderParserLPAREN)
	}
	p.SetState(1816)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<PowerBuilderParserANY)|(1<<PowerBuilderParserBLOB)|(1<<PowerBuilderParserBOOLEAN)|(1<<PowerBuilderParserBYTE)|(1<<PowerBuilderParserCHARACTER)|(1<<PowerBuilderParserCHAR)|(1<<PowerBuilderParserDATE_TYPE)|(1<<PowerBuilderParserDATETIME)|(1<<PowerBuilderParserDECIMAL)|(1<<PowerBuilderParserDEC)|(1<<PowerBuilderParserDOUBLE)|(1<<PowerBuilderParserINTEGER)|(1<<PowerBuilderParserINT)|(1<<PowerBuilderParserLONG)|(1<<PowerBuilderParserLONGLONG)|(1<<PowerBuilderParserREAL)|(1<<PowerBuilderParserSTRING)|(1<<PowerBuilderParserTIME_TYPE)|(1<<PowerBuilderParserUNSIGNEDINTEGER)|(1<<PowerBuilderParserUINT)|(1<<PowerBuilderParserUNSIGNEDLONG)|(1<<PowerBuilderParserULONG)|(1<<PowerBuilderParserWINDOW)|(1<<PowerBuilderParserTRUE)|(1<<PowerBuilderParserFALSE))) != 0) || (((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(PowerBuilderParserFUNCTION-34))|(1<<(PowerBuilderParserREADONLY-34))|(1<<(PowerBuilderParserTYPE-34))|(1<<(PowerBuilderParserREF-34))|(1<<(PowerBuilderParserUPDATE-34))|(1<<(PowerBuilderParserDYNAMIC-34))|(1<<(PowerBuilderParserEVENT-34))|(1<<(PowerBuilderParserOPEN-34))|(1<<(PowerBuilderParserGOTO-34)))) != 0) || (((_la-69)&-(0x1f+1)) == 0 && ((1<<uint((_la-69)))&((1<<(PowerBuilderParserCLOSE-69))|(1<<(PowerBuilderParserCREATE-69))|(1<<(PowerBuilderParserPOST-69))|(1<<(PowerBuilderParserSELECT-69))|(1<<(PowerBuilderParserDELETE-69))|(1<<(PowerBuilderParserINSERT-69))|(1<<(PowerBuilderParserDESCRIBE-69))|(1<<(PowerBuilderParserNOT-69))|(1<<(PowerBuilderParserHALT-69))|(1<<(PowerBuilderParserSYSTEM-69)))) != 0) || (((_la-101)&-(0x1f+1)) == 0 && ((1<<uint((_la-101)))&((1<<(PowerBuilderParserSQLCA-101))|(1<<(PowerBuilderParserVALUES-101))|(1<<(PowerBuilderParserPLUS-101))|(1<<(PowerBuilderParserMINUS-101))|(1<<(PowerBuilderParserCOLONCOLON-101)))) != 0) || (((_la-136)&-(0x1f+1)) == 0 && ((1<<uint((_la-136)))&((1<<(PowerBuilderParserLCURLY-136))|(1<<(PowerBuilderParserDQUOTED_STRING-136))|(1<<(PowerBuilderParserQUOTED_STRING-136))|(1<<(PowerBuilderParserLPAREN-136))|(1<<(PowerBuilderParserCOLON-136))|(1<<(PowerBuilderParserUNDERSCORE-136))|(1<<(PowerBuilderParserNUMBER-136))|(1<<(PowerBuilderParserDATE-136))|(1<<(PowerBuilderParserTIME-136))|(1<<(PowerBuilderParserENUM-136))|(1<<(PowerBuilderParserID-136)))) != 0) {
		{
			p.SetState(1815)
			p.Expression_list()
		}

	}
	{
		p.SetState(1818)
		p.Match(PowerBuilderParserRPAREN)
	}

	return localctx
}

// IAtom_sub_member1Context is an interface to support dynamic dispatch.
type IAtom_sub_member1Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAtom_sub_member1Context differentiates from other interfaces.
	IsAtom_sub_member1Context()
}

type Atom_sub_member1Context struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAtom_sub_member1Context() *Atom_sub_member1Context {
	var p = new(Atom_sub_member1Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_atom_sub_member1
	return p
}

func (*Atom_sub_member1Context) IsAtom_sub_member1Context() {}

func NewAtom_sub_member1Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Atom_sub_member1Context {
	var p = new(Atom_sub_member1Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_atom_sub_member1

	return p
}

func (s *Atom_sub_member1Context) GetParser() antlr.Parser { return s.parser }

func (s *Atom_sub_member1Context) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Atom_sub_member1Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Atom_sub_member1Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Atom_sub_member1Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterAtom_sub_member1(s)
	}
}

func (s *Atom_sub_member1Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitAtom_sub_member1(s)
	}
}

func (p *PowerBuilderParser) Atom_sub_member1() (localctx IAtom_sub_member1Context) {
	this := p
	_ = this

	localctx = NewAtom_sub_member1Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 226, PowerBuilderParserRULE_atom_sub_member1)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1820)
		p.Identifier()
	}

	return localctx
}

// IArray_access_atomContext is an interface to support dynamic dispatch.
type IArray_access_atomContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArray_access_atomContext differentiates from other interfaces.
	IsArray_access_atomContext()
}

type Array_access_atomContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArray_access_atomContext() *Array_access_atomContext {
	var p = new(Array_access_atomContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_array_access_atom
	return p
}

func (*Array_access_atomContext) IsArray_access_atomContext() {}

func NewArray_access_atomContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Array_access_atomContext {
	var p = new(Array_access_atomContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_array_access_atom

	return p
}

func (s *Array_access_atomContext) GetParser() antlr.Parser { return s.parser }

func (s *Array_access_atomContext) Identifier_name() IIdentifier_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_nameContext)
}

func (s *Array_access_atomContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserLBRACE, 0)
}

func (s *Array_access_atomContext) Expression_list() IExpression_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_listContext)
}

func (s *Array_access_atomContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserRBRACE, 0)
}

func (s *Array_access_atomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Array_access_atomContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Array_access_atomContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterArray_access_atom(s)
	}
}

func (s *Array_access_atomContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitArray_access_atom(s)
	}
}

func (p *PowerBuilderParser) Array_access_atom() (localctx IArray_access_atomContext) {
	this := p
	_ = this

	localctx = NewArray_access_atomContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 228, PowerBuilderParserRULE_array_access_atom)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1822)
		p.Identifier_name()
	}
	{
		p.SetState(1823)
		p.Match(PowerBuilderParserLBRACE)
	}
	{
		p.SetState(1824)
		p.Expression_list()
	}
	{
		p.SetState(1825)
		p.Match(PowerBuilderParserRBRACE)
	}

	return localctx
}

// IData_type_nameContext is an interface to support dynamic dispatch.
type IData_type_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsData_type_nameContext differentiates from other interfaces.
	IsData_type_nameContext()
}

type Data_type_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyData_type_nameContext() *Data_type_nameContext {
	var p = new(Data_type_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_data_type_name
	return p
}

func (*Data_type_nameContext) IsData_type_nameContext() {}

func NewData_type_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Data_type_nameContext {
	var p = new(Data_type_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_data_type_name

	return p
}

func (s *Data_type_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Data_type_nameContext) DataTypeSub() IDataTypeSubContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDataTypeSubContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDataTypeSubContext)
}

func (s *Data_type_nameContext) Identifier_name() IIdentifier_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_nameContext)
}

func (s *Data_type_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Data_type_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Data_type_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterData_type_name(s)
	}
}

func (s *Data_type_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitData_type_name(s)
	}
}

func (p *PowerBuilderParser) Data_type_name() (localctx IData_type_nameContext) {
	this := p
	_ = this

	localctx = NewData_type_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 230, PowerBuilderParserRULE_data_type_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1829)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PowerBuilderParserANY, PowerBuilderParserBLOB, PowerBuilderParserBOOLEAN, PowerBuilderParserBYTE, PowerBuilderParserCHARACTER, PowerBuilderParserCHAR, PowerBuilderParserDATE_TYPE, PowerBuilderParserDATETIME, PowerBuilderParserDECIMAL, PowerBuilderParserDEC, PowerBuilderParserDOUBLE, PowerBuilderParserINTEGER, PowerBuilderParserINT, PowerBuilderParserLONG, PowerBuilderParserLONGLONG, PowerBuilderParserREAL, PowerBuilderParserSTRING, PowerBuilderParserTIME_TYPE, PowerBuilderParserUNSIGNEDINTEGER, PowerBuilderParserUINT, PowerBuilderParserUNSIGNEDLONG, PowerBuilderParserULONG, PowerBuilderParserWINDOW:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1827)
			p.DataTypeSub()
		}

	case PowerBuilderParserUNDERSCORE, PowerBuilderParserID:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1828)
			p.Identifier_name()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IDataTypeSubContext is an interface to support dynamic dispatch.
type IDataTypeSubContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDataTypeSubContext differentiates from other interfaces.
	IsDataTypeSubContext()
}

type DataTypeSubContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDataTypeSubContext() *DataTypeSubContext {
	var p = new(DataTypeSubContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PowerBuilderParserRULE_dataTypeSub
	return p
}

func (*DataTypeSubContext) IsDataTypeSubContext() {}

func NewDataTypeSubContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DataTypeSubContext {
	var p = new(DataTypeSubContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PowerBuilderParserRULE_dataTypeSub

	return p
}

func (s *DataTypeSubContext) GetParser() antlr.Parser { return s.parser }

func (s *DataTypeSubContext) ANY() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserANY, 0)
}

func (s *DataTypeSubContext) BLOB() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserBLOB, 0)
}

func (s *DataTypeSubContext) BOOLEAN() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserBOOLEAN, 0)
}

func (s *DataTypeSubContext) BYTE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserBYTE, 0)
}

func (s *DataTypeSubContext) CHARACTER() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserCHARACTER, 0)
}

func (s *DataTypeSubContext) CHAR() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserCHAR, 0)
}

func (s *DataTypeSubContext) DATE_TYPE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserDATE_TYPE, 0)
}

func (s *DataTypeSubContext) DATETIME() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserDATETIME, 0)
}

func (s *DataTypeSubContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserDECIMAL, 0)
}

func (s *DataTypeSubContext) DEC() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserDEC, 0)
}

func (s *DataTypeSubContext) DOUBLE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserDOUBLE, 0)
}

func (s *DataTypeSubContext) INTEGER() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserINTEGER, 0)
}

func (s *DataTypeSubContext) INT() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserINT, 0)
}

func (s *DataTypeSubContext) LONG() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserLONG, 0)
}

func (s *DataTypeSubContext) LONGLONG() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserLONGLONG, 0)
}

func (s *DataTypeSubContext) REAL() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserREAL, 0)
}

func (s *DataTypeSubContext) STRING() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserSTRING, 0)
}

func (s *DataTypeSubContext) TIME_TYPE() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserTIME_TYPE, 0)
}

func (s *DataTypeSubContext) UNSIGNEDINTEGER() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserUNSIGNEDINTEGER, 0)
}

func (s *DataTypeSubContext) UINT() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserUINT, 0)
}

func (s *DataTypeSubContext) UNSIGNEDLONG() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserUNSIGNEDLONG, 0)
}

func (s *DataTypeSubContext) ULONG() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserULONG, 0)
}

func (s *DataTypeSubContext) WINDOW() antlr.TerminalNode {
	return s.GetToken(PowerBuilderParserWINDOW, 0)
}

func (s *DataTypeSubContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DataTypeSubContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DataTypeSubContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.EnterDataTypeSub(s)
	}
}

func (s *DataTypeSubContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PowerBuilderParserListener); ok {
		listenerT.ExitDataTypeSub(s)
	}
}

func (p *PowerBuilderParser) DataTypeSub() (localctx IDataTypeSubContext) {
	this := p
	_ = this

	localctx = NewDataTypeSubContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 232, PowerBuilderParserRULE_dataTypeSub)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1831)
		_la = p.GetTokenStream().LA(1)

		if !(((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<PowerBuilderParserANY)|(1<<PowerBuilderParserBLOB)|(1<<PowerBuilderParserBOOLEAN)|(1<<PowerBuilderParserBYTE)|(1<<PowerBuilderParserCHARACTER)|(1<<PowerBuilderParserCHAR)|(1<<PowerBuilderParserDATE_TYPE)|(1<<PowerBuilderParserDATETIME)|(1<<PowerBuilderParserDECIMAL)|(1<<PowerBuilderParserDEC)|(1<<PowerBuilderParserDOUBLE)|(1<<PowerBuilderParserINTEGER)|(1<<PowerBuilderParserINT)|(1<<PowerBuilderParserLONG)|(1<<PowerBuilderParserLONGLONG)|(1<<PowerBuilderParserREAL)|(1<<PowerBuilderParserSTRING)|(1<<PowerBuilderParserTIME_TYPE)|(1<<PowerBuilderParserUNSIGNEDINTEGER)|(1<<PowerBuilderParserUINT)|(1<<PowerBuilderParserUNSIGNEDLONG)|(1<<PowerBuilderParserULONG)|(1<<PowerBuilderParserWINDOW))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

func (p *PowerBuilderParser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 29:
		var t *ExpressionContext = nil
		if localctx != nil {
			t = localctx.(*ExpressionContext)
		}
		return p.Expression_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *PowerBuilderParser) Expression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 0:
		return p.Precpred(p.GetParserRuleContext(), 3)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
