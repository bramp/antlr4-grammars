// Code generated from Abnf.g4 by ANTLR 4.9.3. DO NOT EDIT.

package abnf

import (
	"fmt"
	"unicode"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = unicode.IsLetter

var serializedLexerAtn = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 2, 16, 201,
	8, 1, 4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7,
	9, 7, 4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12,
	4, 13, 9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4,
	18, 9, 18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 3, 2,
	3, 2, 3, 3, 3, 3, 3, 4, 3, 4, 3, 5, 3, 5, 3, 6, 3, 6, 3, 7, 3, 7, 3, 8,
	3, 8, 3, 9, 3, 9, 3, 9, 3, 9, 5, 9, 64, 10, 9, 3, 10, 3, 10, 6, 10, 68,
	10, 10, 13, 10, 14, 10, 69, 3, 10, 3, 10, 6, 10, 74, 10, 10, 13, 10, 14,
	10, 75, 6, 10, 78, 10, 10, 13, 10, 14, 10, 79, 3, 10, 3, 10, 6, 10, 84,
	10, 10, 13, 10, 14, 10, 85, 5, 10, 88, 10, 10, 3, 11, 3, 11, 6, 11, 92,
	10, 11, 13, 11, 14, 11, 93, 3, 11, 3, 11, 6, 11, 98, 10, 11, 13, 11, 14,
	11, 99, 6, 11, 102, 10, 11, 13, 11, 14, 11, 103, 3, 11, 3, 11, 6, 11, 108,
	10, 11, 13, 11, 14, 11, 109, 5, 11, 112, 10, 11, 3, 12, 3, 12, 6, 12, 116,
	10, 12, 13, 12, 14, 12, 117, 3, 12, 3, 12, 6, 12, 122, 10, 12, 13, 12,
	14, 12, 123, 6, 12, 126, 10, 12, 13, 12, 14, 12, 127, 3, 12, 3, 12, 6,
	12, 132, 10, 12, 13, 12, 14, 12, 133, 5, 12, 136, 10, 12, 3, 13, 3, 13,
	7, 13, 140, 10, 13, 12, 13, 14, 13, 143, 11, 13, 3, 13, 3, 13, 3, 14, 3,
	14, 3, 14, 3, 14, 7, 14, 151, 10, 14, 12, 14, 14, 14, 154, 11, 14, 3, 15,
	6, 15, 157, 10, 15, 13, 15, 14, 15, 158, 3, 16, 3, 16, 7, 16, 163, 10,
	16, 12, 16, 14, 16, 166, 11, 16, 3, 16, 5, 16, 169, 10, 16, 3, 16, 3, 16,
	3, 16, 3, 16, 3, 17, 3, 17, 3, 17, 3, 17, 3, 18, 3, 18, 3, 18, 3, 18, 5,
	18, 183, 10, 18, 3, 18, 3, 18, 7, 18, 187, 10, 18, 12, 18, 14, 18, 190,
	11, 18, 3, 18, 3, 18, 3, 19, 3, 19, 3, 20, 3, 20, 3, 21, 3, 21, 3, 22,
	3, 22, 2, 2, 23, 3, 3, 5, 4, 7, 5, 9, 6, 11, 7, 13, 8, 15, 9, 17, 10, 19,
	2, 21, 2, 23, 2, 25, 11, 27, 12, 29, 13, 31, 14, 33, 15, 35, 16, 37, 2,
	39, 2, 41, 2, 43, 2, 3, 2, 8, 3, 2, 64, 64, 4, 2, 12, 12, 15, 15, 5, 2,
	11, 12, 15, 15, 34, 34, 3, 2, 36, 36, 4, 2, 67, 92, 99, 124, 5, 2, 50,
	59, 67, 72, 99, 104, 2, 223, 2, 3, 3, 2, 2, 2, 2, 5, 3, 2, 2, 2, 2, 7,
	3, 2, 2, 2, 2, 9, 3, 2, 2, 2, 2, 11, 3, 2, 2, 2, 2, 13, 3, 2, 2, 2, 2,
	15, 3, 2, 2, 2, 2, 17, 3, 2, 2, 2, 2, 25, 3, 2, 2, 2, 2, 27, 3, 2, 2, 2,
	2, 29, 3, 2, 2, 2, 2, 31, 3, 2, 2, 2, 2, 33, 3, 2, 2, 2, 2, 35, 3, 2, 2,
	2, 3, 45, 3, 2, 2, 2, 5, 47, 3, 2, 2, 2, 7, 49, 3, 2, 2, 2, 9, 51, 3, 2,
	2, 2, 11, 53, 3, 2, 2, 2, 13, 55, 3, 2, 2, 2, 15, 57, 3, 2, 2, 2, 17, 59,
	3, 2, 2, 2, 19, 65, 3, 2, 2, 2, 21, 89, 3, 2, 2, 2, 23, 113, 3, 2, 2, 2,
	25, 137, 3, 2, 2, 2, 27, 146, 3, 2, 2, 2, 29, 156, 3, 2, 2, 2, 31, 160,
	3, 2, 2, 2, 33, 174, 3, 2, 2, 2, 35, 182, 3, 2, 2, 2, 37, 193, 3, 2, 2,
	2, 39, 195, 3, 2, 2, 2, 41, 197, 3, 2, 2, 2, 43, 199, 3, 2, 2, 2, 45, 46,
	7, 63, 2, 2, 46, 4, 3, 2, 2, 2, 47, 48, 7, 49, 2, 2, 48, 6, 3, 2, 2, 2,
	49, 50, 7, 44, 2, 2, 50, 8, 3, 2, 2, 2, 51, 52, 7, 42, 2, 2, 52, 10, 3,
	2, 2, 2, 53, 54, 7, 43, 2, 2, 54, 12, 3, 2, 2, 2, 55, 56, 7, 93, 2, 2,
	56, 14, 3, 2, 2, 2, 57, 58, 7, 95, 2, 2, 58, 16, 3, 2, 2, 2, 59, 63, 7,
	39, 2, 2, 60, 64, 5, 19, 10, 2, 61, 64, 5, 21, 11, 2, 62, 64, 5, 23, 12,
	2, 63, 60, 3, 2, 2, 2, 63, 61, 3, 2, 2, 2, 63, 62, 3, 2, 2, 2, 64, 18,
	3, 2, 2, 2, 65, 67, 7, 100, 2, 2, 66, 68, 5, 39, 20, 2, 67, 66, 3, 2, 2,
	2, 68, 69, 3, 2, 2, 2, 69, 67, 3, 2, 2, 2, 69, 70, 3, 2, 2, 2, 70, 87,
	3, 2, 2, 2, 71, 73, 7, 48, 2, 2, 72, 74, 5, 39, 20, 2, 73, 72, 3, 2, 2,
	2, 74, 75, 3, 2, 2, 2, 75, 73, 3, 2, 2, 2, 75, 76, 3, 2, 2, 2, 76, 78,
	3, 2, 2, 2, 77, 71, 3, 2, 2, 2, 78, 79, 3, 2, 2, 2, 79, 77, 3, 2, 2, 2,
	79, 80, 3, 2, 2, 2, 80, 88, 3, 2, 2, 2, 81, 83, 7, 47, 2, 2, 82, 84, 5,
	39, 20, 2, 83, 82, 3, 2, 2, 2, 84, 85, 3, 2, 2, 2, 85, 83, 3, 2, 2, 2,
	85, 86, 3, 2, 2, 2, 86, 88, 3, 2, 2, 2, 87, 77, 3, 2, 2, 2, 87, 81, 3,
	2, 2, 2, 87, 88, 3, 2, 2, 2, 88, 20, 3, 2, 2, 2, 89, 91, 7, 102, 2, 2,
	90, 92, 5, 41, 21, 2, 91, 90, 3, 2, 2, 2, 92, 93, 3, 2, 2, 2, 93, 91, 3,
	2, 2, 2, 93, 94, 3, 2, 2, 2, 94, 111, 3, 2, 2, 2, 95, 97, 7, 48, 2, 2,
	96, 98, 5, 41, 21, 2, 97, 96, 3, 2, 2, 2, 98, 99, 3, 2, 2, 2, 99, 97, 3,
	2, 2, 2, 99, 100, 3, 2, 2, 2, 100, 102, 3, 2, 2, 2, 101, 95, 3, 2, 2, 2,
	102, 103, 3, 2, 2, 2, 103, 101, 3, 2, 2, 2, 103, 104, 3, 2, 2, 2, 104,
	112, 3, 2, 2, 2, 105, 107, 7, 47, 2, 2, 106, 108, 5, 41, 21, 2, 107, 106,
	3, 2, 2, 2, 108, 109, 3, 2, 2, 2, 109, 107, 3, 2, 2, 2, 109, 110, 3, 2,
	2, 2, 110, 112, 3, 2, 2, 2, 111, 101, 3, 2, 2, 2, 111, 105, 3, 2, 2, 2,
	111, 112, 3, 2, 2, 2, 112, 22, 3, 2, 2, 2, 113, 115, 7, 122, 2, 2, 114,
	116, 5, 43, 22, 2, 115, 114, 3, 2, 2, 2, 116, 117, 3, 2, 2, 2, 117, 115,
	3, 2, 2, 2, 117, 118, 3, 2, 2, 2, 118, 135, 3, 2, 2, 2, 119, 121, 7, 48,
	2, 2, 120, 122, 5, 43, 22, 2, 121, 120, 3, 2, 2, 2, 122, 123, 3, 2, 2,
	2, 123, 121, 3, 2, 2, 2, 123, 124, 3, 2, 2, 2, 124, 126, 3, 2, 2, 2, 125,
	119, 3, 2, 2, 2, 126, 127, 3, 2, 2, 2, 127, 125, 3, 2, 2, 2, 127, 128,
	3, 2, 2, 2, 128, 136, 3, 2, 2, 2, 129, 131, 7, 47, 2, 2, 130, 132, 5, 43,
	22, 2, 131, 130, 3, 2, 2, 2, 132, 133, 3, 2, 2, 2, 133, 131, 3, 2, 2, 2,
	133, 134, 3, 2, 2, 2, 134, 136, 3, 2, 2, 2, 135, 125, 3, 2, 2, 2, 135,
	129, 3, 2, 2, 2, 135, 136, 3, 2, 2, 2, 136, 24, 3, 2, 2, 2, 137, 141, 7,
	62, 2, 2, 138, 140, 10, 2, 2, 2, 139, 138, 3, 2, 2, 2, 140, 143, 3, 2,
	2, 2, 141, 139, 3, 2, 2, 2, 141, 142, 3, 2, 2, 2, 142, 144, 3, 2, 2, 2,
	143, 141, 3, 2, 2, 2, 144, 145, 7, 64, 2, 2, 145, 26, 3, 2, 2, 2, 146,
	152, 5, 37, 19, 2, 147, 151, 5, 37, 19, 2, 148, 151, 5, 41, 21, 2, 149,
	151, 7, 47, 2, 2, 150, 147, 3, 2, 2, 2, 150, 148, 3, 2, 2, 2, 150, 149,
	3, 2, 2, 2, 151, 154, 3, 2, 2, 2, 152, 150, 3, 2, 2, 2, 152, 153, 3, 2,
	2, 2, 153, 28, 3, 2, 2, 2, 154, 152, 3, 2, 2, 2, 155, 157, 4, 50, 59, 2,
	156, 155, 3, 2, 2, 2, 157, 158, 3, 2, 2, 2, 158, 156, 3, 2, 2, 2, 158,
	159, 3, 2, 2, 2, 159, 30, 3, 2, 2, 2, 160, 164, 7, 61, 2, 2, 161, 163,
	10, 3, 2, 2, 162, 161, 3, 2, 2, 2, 163, 166, 3, 2, 2, 2, 164, 162, 3, 2,
	2, 2, 164, 165, 3, 2, 2, 2, 165, 168, 3, 2, 2, 2, 166, 164, 3, 2, 2, 2,
	167, 169, 7, 15, 2, 2, 168, 167, 3, 2, 2, 2, 168, 169, 3, 2, 2, 2, 169,
	170, 3, 2, 2, 2, 170, 171, 7, 12, 2, 2, 171, 172, 3, 2, 2, 2, 172, 173,
	8, 16, 2, 2, 173, 32, 3, 2, 2, 2, 174, 175, 9, 4, 2, 2, 175, 176, 3, 2,
	2, 2, 176, 177, 8, 17, 2, 2, 177, 34, 3, 2, 2, 2, 178, 179, 7, 39, 2, 2,
	179, 183, 7, 117, 2, 2, 180, 181, 7, 39, 2, 2, 181, 183, 7, 107, 2, 2,
	182, 178, 3, 2, 2, 2, 182, 180, 3, 2, 2, 2, 182, 183, 3, 2, 2, 2, 183,
	184, 3, 2, 2, 2, 184, 188, 7, 36, 2, 2, 185, 187, 10, 5, 2, 2, 186, 185,
	3, 2, 2, 2, 187, 190, 3, 2, 2, 2, 188, 186, 3, 2, 2, 2, 188, 189, 3, 2,
	2, 2, 189, 191, 3, 2, 2, 2, 190, 188, 3, 2, 2, 2, 191, 192, 7, 36, 2, 2,
	192, 36, 3, 2, 2, 2, 193, 194, 9, 6, 2, 2, 194, 38, 3, 2, 2, 2, 195, 196,
	4, 50, 51, 2, 196, 40, 3, 2, 2, 2, 197, 198, 4, 50, 59, 2, 198, 42, 3,
	2, 2, 2, 199, 200, 9, 7, 2, 2, 200, 44, 3, 2, 2, 2, 27, 2, 63, 69, 75,
	79, 85, 87, 93, 99, 103, 109, 111, 117, 123, 127, 133, 135, 141, 150, 152,
	158, 164, 168, 182, 188, 3, 2, 3, 2,
}

var lexerChannelNames = []string{
	"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
}

var lexerModeNames = []string{
	"DEFAULT_MODE",
}

var lexerLiteralNames = []string{
	"", "'='", "'/'", "'*'", "'('", "')'", "'['", "']'",
}

var lexerSymbolicNames = []string{
	"", "", "", "", "", "", "", "", "NumberValue", "ProseValue", "ID", "INT",
	"COMMENT", "WS", "STRING",
}

var lexerRuleNames = []string{
	"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "NumberValue",
	"BinaryValue", "DecimalValue", "HexValue", "ProseValue", "ID", "INT", "COMMENT",
	"WS", "STRING", "LETTER", "BIT", "DIGIT", "HEX_DIGIT",
}

type AbnfLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

// NewAbnfLexer produces a new lexer instance for the optional input antlr.CharStream.
//
// The *AbnfLexer instance produced may be reused by calling the SetInputStream method.
// The initial lexer configuration is expensive to construct, and the object is not thread-safe;
// however, if used within a Golang sync.Pool, the construction cost amortizes well and the
// objects can be used in a thread-safe manner.
func NewAbnfLexer(input antlr.CharStream) *AbnfLexer {
	l := new(AbnfLexer)
	lexerDeserializer := antlr.NewATNDeserializer(nil)
	lexerAtn := lexerDeserializer.DeserializeFromUInt16(serializedLexerAtn)
	lexerDecisionToDFA := make([]*antlr.DFA, len(lexerAtn.DecisionToState))
	for index, ds := range lexerAtn.DecisionToState {
		lexerDecisionToDFA[index] = antlr.NewDFA(ds, index)
	}
	l.BaseLexer = antlr.NewBaseLexer(input)
	l.Interpreter = antlr.NewLexerATNSimulator(l, lexerAtn, lexerDecisionToDFA, antlr.NewPredictionContextCache())

	l.channelNames = lexerChannelNames
	l.modeNames = lexerModeNames
	l.RuleNames = lexerRuleNames
	l.LiteralNames = lexerLiteralNames
	l.SymbolicNames = lexerSymbolicNames
	l.GrammarFileName = "Abnf.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// AbnfLexer tokens.
const (
	AbnfLexerT__0        = 1
	AbnfLexerT__1        = 2
	AbnfLexerT__2        = 3
	AbnfLexerT__3        = 4
	AbnfLexerT__4        = 5
	AbnfLexerT__5        = 6
	AbnfLexerT__6        = 7
	AbnfLexerNumberValue = 8
	AbnfLexerProseValue  = 9
	AbnfLexerID          = 10
	AbnfLexerINT         = 11
	AbnfLexerCOMMENT     = 12
	AbnfLexerWS          = 13
	AbnfLexerSTRING      = 14
)
