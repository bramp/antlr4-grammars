// Code generated from alpaca.g4 by ANTLR 4.9.3. DO NOT EDIT.

package alpaca

import (
	"fmt"
	"unicode"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = unicode.IsLetter

var serializedLexerAtn = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 2, 31, 189,
	8, 1, 4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7,
	9, 7, 4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12,
	4, 13, 9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4,
	18, 9, 18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23,
	9, 23, 4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26, 4, 27, 9, 27, 4, 28, 9,
	28, 4, 29, 9, 29, 4, 30, 9, 30, 3, 2, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 4, 3, 4, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 6, 3, 6, 3,
	6, 3, 6, 3, 6, 3, 6, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3,
	7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 8, 3, 8, 3, 8, 3, 9, 3, 9, 3, 10, 3,
	10, 3, 10, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 12, 3, 12, 3, 12, 3, 13,
	3, 13, 3, 13, 3, 13, 3, 14, 3, 14, 3, 14, 3, 15, 3, 15, 3, 15, 3, 15, 3,
	16, 3, 16, 3, 17, 3, 17, 3, 18, 3, 18, 3, 18, 3, 18, 3, 19, 3, 19, 3, 20,
	3, 20, 3, 20, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 22, 3, 22, 3, 22, 3,
	22, 3, 22, 3, 22, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 24, 3, 24,
	7, 24, 157, 10, 24, 12, 24, 14, 24, 160, 11, 24, 3, 24, 3, 24, 3, 25, 3,
	25, 3, 26, 3, 26, 3, 27, 3, 27, 3, 28, 3, 28, 3, 29, 3, 29, 3, 29, 3, 29,
	7, 29, 176, 10, 29, 12, 29, 14, 29, 179, 11, 29, 3, 29, 3, 29, 3, 29, 3,
	29, 3, 29, 3, 30, 3, 30, 3, 30, 3, 30, 3, 177, 2, 31, 3, 3, 5, 4, 7, 5,
	9, 6, 11, 7, 13, 8, 15, 9, 17, 10, 19, 11, 21, 12, 23, 13, 25, 14, 27,
	15, 29, 16, 31, 17, 33, 18, 35, 19, 37, 20, 39, 21, 41, 22, 43, 23, 45,
	24, 47, 25, 49, 26, 51, 27, 53, 28, 55, 29, 57, 30, 59, 31, 3, 2, 7, 3,
	2, 36, 36, 4, 2, 67, 92, 99, 124, 3, 2, 50, 59, 6, 2, 62, 62, 64, 64, 96,
	96, 120, 120, 5, 2, 11, 12, 15, 15, 34, 34, 2, 190, 2, 3, 3, 2, 2, 2, 2,
	5, 3, 2, 2, 2, 2, 7, 3, 2, 2, 2, 2, 9, 3, 2, 2, 2, 2, 11, 3, 2, 2, 2, 2,
	13, 3, 2, 2, 2, 2, 15, 3, 2, 2, 2, 2, 17, 3, 2, 2, 2, 2, 19, 3, 2, 2, 2,
	2, 21, 3, 2, 2, 2, 2, 23, 3, 2, 2, 2, 2, 25, 3, 2, 2, 2, 2, 27, 3, 2, 2,
	2, 2, 29, 3, 2, 2, 2, 2, 31, 3, 2, 2, 2, 2, 33, 3, 2, 2, 2, 2, 35, 3, 2,
	2, 2, 2, 37, 3, 2, 2, 2, 2, 39, 3, 2, 2, 2, 2, 41, 3, 2, 2, 2, 2, 43, 3,
	2, 2, 2, 2, 45, 3, 2, 2, 2, 2, 47, 3, 2, 2, 2, 2, 49, 3, 2, 2, 2, 2, 51,
	3, 2, 2, 2, 2, 53, 3, 2, 2, 2, 2, 55, 3, 2, 2, 2, 2, 57, 3, 2, 2, 2, 2,
	59, 3, 2, 2, 2, 3, 61, 3, 2, 2, 2, 5, 63, 3, 2, 2, 2, 7, 69, 3, 2, 2, 2,
	9, 71, 3, 2, 2, 2, 11, 77, 3, 2, 2, 2, 13, 83, 3, 2, 2, 2, 15, 97, 3, 2,
	2, 2, 17, 100, 3, 2, 2, 2, 19, 102, 3, 2, 2, 2, 21, 105, 3, 2, 2, 2, 23,
	110, 3, 2, 2, 2, 25, 113, 3, 2, 2, 2, 27, 117, 3, 2, 2, 2, 29, 120, 3,
	2, 2, 2, 31, 124, 3, 2, 2, 2, 33, 126, 3, 2, 2, 2, 35, 128, 3, 2, 2, 2,
	37, 132, 3, 2, 2, 2, 39, 134, 3, 2, 2, 2, 41, 137, 3, 2, 2, 2, 43, 142,
	3, 2, 2, 2, 45, 148, 3, 2, 2, 2, 47, 154, 3, 2, 2, 2, 49, 163, 3, 2, 2,
	2, 51, 165, 3, 2, 2, 2, 53, 167, 3, 2, 2, 2, 55, 169, 3, 2, 2, 2, 57, 171,
	3, 2, 2, 2, 59, 185, 3, 2, 2, 2, 61, 62, 7, 48, 2, 2, 62, 4, 3, 2, 2, 2,
	63, 64, 7, 100, 2, 2, 64, 65, 7, 103, 2, 2, 65, 66, 7, 105, 2, 2, 66, 67,
	7, 107, 2, 2, 67, 68, 7, 112, 2, 2, 68, 6, 3, 2, 2, 2, 69, 70, 7, 61, 2,
	2, 70, 8, 3, 2, 2, 2, 71, 72, 7, 117, 2, 2, 72, 73, 7, 118, 2, 2, 73, 74,
	7, 99, 2, 2, 74, 75, 7, 118, 2, 2, 75, 76, 7, 103, 2, 2, 76, 10, 3, 2,
	2, 2, 77, 78, 7, 101, 2, 2, 78, 79, 7, 110, 2, 2, 79, 80, 7, 99, 2, 2,
	80, 81, 7, 117, 2, 2, 81, 82, 7, 117, 2, 2, 82, 12, 3, 2, 2, 2, 83, 84,
	7, 112, 2, 2, 84, 85, 7, 103, 2, 2, 85, 86, 7, 107, 2, 2, 86, 87, 7, 105,
	2, 2, 87, 88, 7, 106, 2, 2, 88, 89, 7, 100, 2, 2, 89, 90, 7, 113, 2, 2,
	90, 91, 7, 119, 2, 2, 91, 92, 7, 116, 2, 2, 92, 93, 7, 106, 2, 2, 93, 94,
	7, 113, 2, 2, 94, 95, 7, 113, 2, 2, 95, 96, 7, 102, 2, 2, 96, 14, 3, 2,
	2, 2, 97, 98, 7, 107, 2, 2, 98, 99, 7, 117, 2, 2, 99, 16, 3, 2, 2, 2, 100,
	101, 7, 46, 2, 2, 101, 18, 3, 2, 2, 2, 102, 103, 7, 118, 2, 2, 103, 104,
	7, 113, 2, 2, 104, 20, 3, 2, 2, 2, 105, 106, 7, 121, 2, 2, 106, 107, 7,
	106, 2, 2, 107, 108, 7, 103, 2, 2, 108, 109, 7, 112, 2, 2, 109, 22, 3,
	2, 2, 2, 110, 111, 7, 111, 2, 2, 111, 112, 7, 103, 2, 2, 112, 24, 3, 2,
	2, 2, 113, 114, 7, 99, 2, 2, 114, 115, 7, 112, 2, 2, 115, 116, 7, 102,
	2, 2, 116, 26, 3, 2, 2, 2, 117, 118, 7, 113, 2, 2, 118, 119, 7, 116, 2,
	2, 119, 28, 3, 2, 2, 2, 120, 121, 7, 122, 2, 2, 121, 122, 7, 113, 2, 2,
	122, 123, 7, 116, 2, 2, 123, 30, 3, 2, 2, 2, 124, 125, 7, 42, 2, 2, 125,
	32, 3, 2, 2, 2, 126, 127, 7, 43, 2, 2, 127, 34, 3, 2, 2, 2, 128, 129, 7,
	112, 2, 2, 129, 130, 7, 113, 2, 2, 130, 131, 7, 118, 2, 2, 131, 36, 3,
	2, 2, 2, 132, 133, 7, 63, 2, 2, 133, 38, 3, 2, 2, 2, 134, 135, 7, 107,
	2, 2, 135, 136, 7, 112, 2, 2, 136, 40, 3, 2, 2, 2, 137, 138, 7, 118, 2,
	2, 138, 139, 7, 116, 2, 2, 139, 140, 7, 119, 2, 2, 140, 141, 7, 103, 2,
	2, 141, 42, 3, 2, 2, 2, 142, 143, 7, 104, 2, 2, 143, 144, 7, 99, 2, 2,
	144, 145, 7, 110, 2, 2, 145, 146, 7, 117, 2, 2, 146, 147, 7, 103, 2, 2,
	147, 44, 3, 2, 2, 2, 148, 149, 7, 105, 2, 2, 149, 150, 7, 119, 2, 2, 150,
	151, 7, 103, 2, 2, 151, 152, 7, 117, 2, 2, 152, 153, 7, 117, 2, 2, 153,
	46, 3, 2, 2, 2, 154, 158, 7, 36, 2, 2, 155, 157, 10, 2, 2, 2, 156, 155,
	3, 2, 2, 2, 157, 160, 3, 2, 2, 2, 158, 156, 3, 2, 2, 2, 158, 159, 3, 2,
	2, 2, 159, 161, 3, 2, 2, 2, 160, 158, 3, 2, 2, 2, 161, 162, 7, 36, 2, 2,
	162, 48, 3, 2, 2, 2, 163, 164, 7, 36, 2, 2, 164, 50, 3, 2, 2, 2, 165, 166,
	9, 3, 2, 2, 166, 52, 3, 2, 2, 2, 167, 168, 9, 4, 2, 2, 168, 54, 3, 2, 2,
	2, 169, 170, 9, 5, 2, 2, 170, 56, 3, 2, 2, 2, 171, 172, 7, 49, 2, 2, 172,
	173, 7, 44, 2, 2, 173, 177, 3, 2, 2, 2, 174, 176, 11, 2, 2, 2, 175, 174,
	3, 2, 2, 2, 176, 179, 3, 2, 2, 2, 177, 178, 3, 2, 2, 2, 177, 175, 3, 2,
	2, 2, 178, 180, 3, 2, 2, 2, 179, 177, 3, 2, 2, 2, 180, 181, 7, 44, 2, 2,
	181, 182, 7, 49, 2, 2, 182, 183, 3, 2, 2, 2, 183, 184, 8, 29, 2, 2, 184,
	58, 3, 2, 2, 2, 185, 186, 9, 6, 2, 2, 186, 187, 3, 2, 2, 2, 187, 188, 8,
	30, 2, 2, 188, 60, 3, 2, 2, 2, 5, 2, 158, 177, 3, 8, 2, 2,
}

var lexerChannelNames = []string{
	"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
}

var lexerModeNames = []string{
	"DEFAULT_MODE",
}

var lexerLiteralNames = []string{
	"", "'.'", "'begin'", "';'", "'state'", "'class'", "'neighbourhood'", "'is'",
	"','", "'to'", "'when'", "'me'", "'and'", "'or'", "'xor'", "'('", "')'",
	"'not'", "'='", "'in'", "'true'", "'false'", "'guess'", "", "'\"'",
}

var lexerSymbolicNames = []string{
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "QUOTEDCHAR", "QUOTE", "ALPHA", "DIGIT", "ARROW", "COMMENT",
	"WS",
}

var lexerRuleNames = []string{
	"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8",
	"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16",
	"T__17", "T__18", "T__19", "T__20", "T__21", "QUOTEDCHAR", "QUOTE", "ALPHA",
	"DIGIT", "ARROW", "COMMENT", "WS",
}

type alpacaLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

// NewalpacaLexer produces a new lexer instance for the optional input antlr.CharStream.
//
// The *alpacaLexer instance produced may be reused by calling the SetInputStream method.
// The initial lexer configuration is expensive to construct, and the object is not thread-safe;
// however, if used within a Golang sync.Pool, the construction cost amortizes well and the
// objects can be used in a thread-safe manner.
func NewalpacaLexer(input antlr.CharStream) *alpacaLexer {
	l := new(alpacaLexer)
	lexerDeserializer := antlr.NewATNDeserializer(nil)
	lexerAtn := lexerDeserializer.DeserializeFromUInt16(serializedLexerAtn)
	lexerDecisionToDFA := make([]*antlr.DFA, len(lexerAtn.DecisionToState))
	for index, ds := range lexerAtn.DecisionToState {
		lexerDecisionToDFA[index] = antlr.NewDFA(ds, index)
	}
	l.BaseLexer = antlr.NewBaseLexer(input)
	l.Interpreter = antlr.NewLexerATNSimulator(l, lexerAtn, lexerDecisionToDFA, antlr.NewPredictionContextCache())

	l.channelNames = lexerChannelNames
	l.modeNames = lexerModeNames
	l.RuleNames = lexerRuleNames
	l.LiteralNames = lexerLiteralNames
	l.SymbolicNames = lexerSymbolicNames
	l.GrammarFileName = "alpaca.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// alpacaLexer tokens.
const (
	alpacaLexerT__0       = 1
	alpacaLexerT__1       = 2
	alpacaLexerT__2       = 3
	alpacaLexerT__3       = 4
	alpacaLexerT__4       = 5
	alpacaLexerT__5       = 6
	alpacaLexerT__6       = 7
	alpacaLexerT__7       = 8
	alpacaLexerT__8       = 9
	alpacaLexerT__9       = 10
	alpacaLexerT__10      = 11
	alpacaLexerT__11      = 12
	alpacaLexerT__12      = 13
	alpacaLexerT__13      = 14
	alpacaLexerT__14      = 15
	alpacaLexerT__15      = 16
	alpacaLexerT__16      = 17
	alpacaLexerT__17      = 18
	alpacaLexerT__18      = 19
	alpacaLexerT__19      = 20
	alpacaLexerT__20      = 21
	alpacaLexerT__21      = 22
	alpacaLexerQUOTEDCHAR = 23
	alpacaLexerQUOTE      = 24
	alpacaLexerALPHA      = 25
	alpacaLexerDIGIT      = 26
	alpacaLexerARROW      = 27
	alpacaLexerCOMMENT    = 28
	alpacaLexerWS         = 29
)
